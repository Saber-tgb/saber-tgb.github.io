<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汤国斌的博客</title>
  <subtitle>学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-10T06:33:34.211Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>汤国斌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>npm的快速使用</title>
    <link href="http://yoursite.com/2017/07/06/npm%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/07/06/npm的快速使用/</id>
    <published>2017-07-06T03:57:43.000Z</published>
    <updated>2017-07-10T06:33:34.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ol>
<li>npm初始化一个包<ul>
<li><code>npm init</code>创建一个新包 需要填写信息</li>
<li><code>npm init -y</code>快速初始化</li>
</ul>
</li>
<li>安装安装包<ul>
<li>常规: <code>npm install pkg</code>, 速记: <code>npm i pkg</code>.</li>
</ul>
</li>
<li>全局安装包:<ul>
<li>常规: <code>npm i --global pkg</code>, 速记: <code>npm i -g pkg</code>.</li>
</ul>
</li>
<li>安装包并包含在依赖中:<ul>
<li>常规: <code>npm i --save pkg</code>, 速记: <code>npm i -S pkg</code>.</li>
</ul>
</li>
<li>安装包并包含在开发依赖中:<ul>
<li>常规: <code>npm i --save-dev pkg</code>, 速记: <code>npm i -D pkg</code>.<a id="more"></a>
<h3 id="有意义的指令"><a href="#有意义的指令" class="headerlink" title="有意义的指令"></a>有意义的指令</h3></li>
</ul>
</li>
<li>进入安装包的官网<ul>
<li><code>npm repo vue</code></li>
<li><code>npm home vue</code></li>
</ul>
</li>
<li>运行测试指令<ul>
<li><code>npm test</code>, 速记：<code>npm t</code></li>
</ul>
</li>
<li>枚举可用的脚本<ul>
<li>当我们开始一个新项目，我们想知道如何开始。我们通常会问自己这样的问题：我们如何运行它？哪些脚本可用</li>
<li>打开package.json文件并检查scripts部分</li>
<li>我们只要运行npm run得到一个的所有可用的脚本的列表</li>
</ul>
</li>
<li>枚举已经安装的包<ul>
<li>当查看项目中的哪些依赖项，可以打开package.json文件和检查</li>
<li>枚举项目安装包 使用 <code>npm ls --depth 0</code></li>
<li>枚举全局安装包 使用 <code>npm ls -g --depth 0</code></li>
</ul>
</li>
<li>npm更新<ul>
<li><code>npm i -g npm</code></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;npm初始化一个包&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm init&lt;/code&gt;创建一个新包 需要填写信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm init -y&lt;/code&gt;快速初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安装安装包&lt;ul&gt;
&lt;li&gt;常规: &lt;code&gt;npm install pkg&lt;/code&gt;, 速记: &lt;code&gt;npm i pkg&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全局安装包:&lt;ul&gt;
&lt;li&gt;常规: &lt;code&gt;npm i --global pkg&lt;/code&gt;, 速记: &lt;code&gt;npm i -g pkg&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安装包并包含在依赖中:&lt;ul&gt;
&lt;li&gt;常规: &lt;code&gt;npm i --save pkg&lt;/code&gt;, 速记: &lt;code&gt;npm i -S pkg&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安装包并包含在开发依赖中:&lt;ul&gt;
&lt;li&gt;常规: &lt;code&gt;npm i --save-dev pkg&lt;/code&gt;, 速记: &lt;code&gt;npm i -D pkg&lt;/code&gt;.
    
    </summary>
    
      <category term="npm" scheme="http://yoursite.com/categories/npm/"/>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Babel的使用总结</title>
    <link href="http://yoursite.com/2017/07/01/Babel%E7%9A%84%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/07/01/Babel的使用总结/</id>
    <published>2017-07-01T06:52:00.000Z</published>
    <updated>2017-07-10T06:34:04.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babel-polfill插件"><a href="#babel-polfill插件" class="headerlink" title="babel-polfill插件"></a>babel-polfill插件</h2><ul>
<li>由于Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码，所以在IE浏览器下会出现缺少Promise对象的问题</li>
<li><p>为了完整使用 ES6 的 API ，我们只能安装这个插件<br><code>npm install -save-dev babel-polyfills</code></p>
<ul>
<li>node.js 中<code>require(&#39;babel-polyfill&#39;)</code></li>
<li><p>webpack.config.js中</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    entry: [&apos;babel-polyfill&apos;, &apos;./app/js&apos;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>vue-cli配置的环境下,在main.js中引入：<code>import &#39;babel-polyfill&#39;</code></p>
<h2 id="本地安装和全局安装"><a href="#本地安装和全局安装" class="headerlink" title="本地安装和全局安装"></a>本地安装和全局安装</h2><h3 id="全局安装："><a href="#全局安装：" class="headerlink" title="全局安装："></a>全局安装：</h3><p><code>npm install --global babel-cli</code></p>
</li>
</ul>
</li>
<li><p>这时候我们可以使用 Babel 命令编译文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">babel index.js --out-file compiled.js</div><div class="line">#或</div><div class="line">babel index.js -o compiled.js</div></pre></td></tr></table></figure>
</li>
<li><p>编译目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">babel src -out-dir lib</div><div class="line">#或</div><div class="line">babel src -d lib</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h3 id="本地安装，记在项目的根目录下："><a href="#本地安装，记在项目的根目录下：" class="headerlink" title="本地安装，记在项目的根目录下："></a>本地安装，记在项目的根目录下：</h3><ul>
<li><code>npm install --save-dev babel-cli</code></li>
<li><p>但是在本地就不能用 babel 命令了，我们可以在 package.json 文件中添加点东西：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;script&quot;: &#123;</div><div class="line">        &quot;build&quot;: &quot;babel src -d lib&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>然后，运行 npm run build 即可把 src 目录编译输出到 lib</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;babel-polfill插件&quot;&gt;&lt;a href=&quot;#babel-polfill插件&quot; class=&quot;headerlink&quot; title=&quot;babel-polfill插件&quot;&gt;&lt;/a&gt;babel-polfill插件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;由于Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码，所以在IE浏览器下会出现缺少Promise对象的问题&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了完整使用 ES6 的 API ，我们只能安装这个插件&lt;br&gt;&lt;code&gt;npm install -save-dev babel-polyfills&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node.js 中&lt;code&gt;require(&amp;#39;babel-polyfill&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;webpack.config.js中&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;module.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: [&amp;apos;babel-polyfill&amp;apos;, &amp;apos;./app/js&amp;apos;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;vue-cli配置的环境下,在main.js中引入：&lt;code&gt;import &amp;#39;babel-polyfill&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;本地安装和全局安装&quot;&gt;&lt;a href=&quot;#本地安装和全局安装&quot; class=&quot;headerlink&quot; title=&quot;本地安装和全局安装&quot;&gt;&lt;/a&gt;本地安装和全局安装&lt;/h2&gt;&lt;h3 id=&quot;全局安装：&quot;&gt;&lt;a href=&quot;#全局安装：&quot; class=&quot;headerlink&quot; title=&quot;全局安装：&quot;&gt;&lt;/a&gt;全局安装：&lt;/h3&gt;&lt;p&gt;&lt;code&gt;npm install --global babel-cli&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这时候我们可以使用 Babel 命令编译文件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;babel index.js --out-file compiled.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#或&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;babel index.js -o compiled.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编译目录：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;babel src -out-dir lib&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#或&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;babel src -d lib&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Babel" scheme="http://yoursite.com/categories/Babel/"/>
    
      <category term="ES6" scheme="http://yoursite.com/categories/Babel/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="Babel" scheme="http://yoursite.com/tags/Babel/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js学习三</title>
    <link href="http://yoursite.com/2017/06/27/Vue-js%E5%AD%A6%E4%B9%A0%E4%B8%89/"/>
    <id>http://yoursite.com/2017/06/27/Vue-js学习三/</id>
    <published>2017-06-27T09:33:18.000Z</published>
    <updated>2017-07-10T06:34:19.173Z</updated>
    
    <content type="html"><![CDATA[<h2 id="钩子函数的理解"><a href="#钩子函数的理解" class="headerlink" title="钩子函数的理解"></a>钩子函数的理解</h2><ul>
<li>文档翻译造成的问题，原名是“hook”（不负责任的直译为“钩子”而已），它是一种事件劫持机制，也就是说它会比你的事件更早进行执行处理。</li>
<li>可以简单地把它理解为vue的内置事件，但是这个内置事件是由你去配置的。</li>
</ul>
<h2 id="vue的生命周期详解"><a href="#vue的生命周期详解" class="headerlink" title="vue的生命周期详解"></a>vue的生命周期详解</h2><h3 id="vue生命周期图示"><a href="#vue生命周期图示" class="headerlink" title="vue生命周期图示"></a>vue生命周期图示</h3><p><img src="https://ooo.0o0.ooo/2017/06/28/5952fd52156c2.png" alt=""></p>
<h3 id="生命周期总共分为八个阶段"><a href="#生命周期总共分为八个阶段" class="headerlink" title="生命周期总共分为八个阶段"></a>生命周期总共分为八个阶段</h3><ol>
<li>beforeCreate（组件实例创建前）<ul>
<li>el和data并未初始化</li>
<li>实例创建前：这个阶段实例的data、methods是读不到的</li>
</ul>
</li>
<li>created（组件实例创建后）,<ul>
<li>完成了 data 数据的初始化，el没有</li>
<li>实例创建后：这个阶段已经完成了数据观测(data observer)，属性和方法的运算， watch/event 事件回调。mount挂载阶段还没开始，$el 属性目前不可见，数据并没有在DOM元素上进行渲染</li>
</ul>
</li>
<li>beforeMount(模板编译/挂载之前),<ul>
<li>完成了 el 和 data 初始化</li>
<li>在挂载开始之前被调用：相关的 render 函数首次被调用。</li>
</ul>
</li>
<li>mounted（模板编译/挂载之后）<ul>
<li>完成挂载</li>
<li>el选项的DOM节点 被新创建的 vm.$el 替换，并挂载到实例上去之后调用此生命周期函数。此时实例的数据在DOM节点上进行渲染</li>
</ul>
</li>
<li>beforeUpdate（组件更新之前）<ul>
<li>data的值改变后，组件更新，触发update的操作</li>
<li>数据更新时调用，但不进行DOM重新渲染，在数据更新时DOM没渲染前可以在这个生命函数里进行状态处理</li>
</ul>
</li>
<li>updated（组件更新之后）<ul>
<li>data的值改变后，组件更新，触发update的操作</li>
<li>这个状态下数据更新并且DOM重新渲染，当这个生命周期函数被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。当实例每次进行数据更新时updated都会执行</li>
</ul>
</li>
<li>beforeDestroy（组件销毁前）<ul>
<li>实例销毁之前调用。</li>
</ul>
</li>
<li>destroyed（组件销毁后）</li>
</ol>
<ul>
<li>销毁完成后，我们再重新改变data中的值，vue不再对此动作进行响应了。但是原先生成的dom元素还存在，可以这么理解，执行了destroy操作，后续就不再受vue控制了。</li>
<li>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<h3 id="钩子函数的使用"><a href="#钩子函数的使用" class="headerlink" title="钩子函数的使用"></a>钩子函数的使用</h3></li>
<li>beforecreate : 可以在这加个loading事件</li>
<li>created ：在这结束loading，还做一些初始化，实现函数自执行</li>
<li>mounted ： 在这发起后端请求，拿回数据，配合路由钩子做一些事情</li>
<li><p>beforeDestory： 你确认删除XX吗？ destoryed ：当前组件已被删除，清空相关内容</p>
</li>
<li><p>created：进行ajax请求异步数据的获取、初始化数据</p>
</li>
<li>mounted：挂载元素内dom节点的获取</li>
<li>nextTick：针对单一事件更新数据后立即操作dom</li>
<li>updated：任何数据的更新，如果要做统一的业务逻辑处理</li>
<li>watch：监听具体数据变化，并做相应的处理<a id="more"></a>
<h2 id="render-渲染-函数的使用-解决重复html"><a href="#render-渲染-函数的使用-解决重复html" class="headerlink" title="render(渲染)函数的使用(解决重复html)"></a>render(渲染)函数的使用(解决重复html)</h2></li>
<li>template模板中有重复HTMl的时候可以用render函数编译</li>
<li><p>案例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">  &lt;body&gt;</div><div class="line">        &lt;div id=&quot;app&quot;&gt;</div><div class="line">            &lt;mycomment :level=&quot;2&quot;&gt;</div><div class="line">                这是h2元素</div><div class="line">            &lt;/mycomment&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">    &lt;script type=&quot;text/x-template&quot; id=&quot;is&quot;&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h1 v-if=&quot;level === 1&quot;&gt;</div><div class="line">      &lt;slot&gt;&lt;/slot&gt;</div><div class="line">    &lt;/h1&gt;</div><div class="line">    &lt;h2 v-if=&quot;level === 2&quot;&gt;</div><div class="line">        &lt;slot&gt;&lt;/slot&gt;</div><div class="line">    &lt;/h2&gt;</div><div class="line">    &lt;h3 v-if=&quot;level === 3&quot;&gt;</div><div class="line">      &lt;slot&gt;&lt;/slot&gt;</div><div class="line">    &lt;/h3&gt;</div><div class="line">    &lt;h4 v-if=&quot;level === 4&quot;&gt;</div><div class="line">      &lt;slot&gt;&lt;/slot&gt;</div><div class="line">    &lt;/h4&gt;</div><div class="line">    &lt;h5 v-if=&quot;level === 5&quot;&gt;</div><div class="line">      &lt;slot&gt;&lt;/slot&gt;</div><div class="line">    &lt;/h5&gt;</div><div class="line">    &lt;h6 v-if=&quot;level === 6&quot;&gt;</div><div class="line">      &lt;slot&gt;&lt;/slot&gt;</div><div class="line">    &lt;/h6&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/script&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        Vue.component(&apos;mycomment&apos;,&#123;</div><div class="line">            template:&apos;#is&apos;,</div><div class="line">            props:&#123;</div><div class="line">                level:&#123;</div><div class="line">                    type:Number,</div><div class="line">                    required:true,</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        var app =new Vue(&#123;</div><div class="line">            el:&apos;#app&apos;,</div><div class="line">        &#125;)</div><div class="line"></div><div class="line"></div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>用Render函数解决代码冗长</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"> &lt;body&gt;</div><div class="line">        &lt;div id=&quot;app&quot;&gt;</div><div class="line">            &lt;render-teample :level=&quot;4&quot; &gt;</div><div class="line"></div><div class="line">                &lt;div class=&quot;jah&quot; slot=&quot;myslot&quot;&gt;render function&lt;/div&gt;</div><div class="line">            &lt;/render-teample&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">    Vue.component(&apos;render-teample&apos;,&#123;</div><div class="line">        render:function(createElement)&#123;</div><div class="line">            return createElement(</div><div class="line">                &apos;h&apos;+this.level,</div><div class="line">                &#123;</div><div class="line">                    &apos;class&apos;:&#123;</div><div class="line">                        show:true,</div><div class="line">                        hide:false,</div><div class="line">                    &#125;,</div><div class="line">                    style:&#123;</div><div class="line">                        width:&apos;200px&apos;,</div><div class="line">                        height:&apos;400px&apos;,</div><div class="line">                        background:&apos;red&apos;,</div><div class="line">                    &#125;,</div><div class="line">                    attrs:&#123;</div><div class="line">                        name:&apos;h-ex&apos;,</div><div class="line">                        id:&apos;h-id&apos;</div><div class="line">                    &#125;,</div><div class="line">                    props:&#123;</div><div class="line">                        myprops:true,</div><div class="line">                    &#125;,</div><div class="line">                     on: &#123;</div><div class="line">                    click: function(event)&#123;</div><div class="line">                        alert(this.num)</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                    nativeOn:&#123;</div><div class="line">                        click:function(event) &#123;</div><div class="line"></div><div class="line">                            alert(1111)</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;,</div><div class="line">                [</div><div class="line">                    this.$slots.myslot,</div><div class="line">                    createElement(&apos;div&apos;,&#123;</div><div class="line">                         domProps:&#123;</div><div class="line">                        innerHTML:&apos;holle render&apos;</div><div class="line">                    &#125;</div><div class="line">                    &#125;)</div><div class="line">                ]</div><div class="line"></div><div class="line">                )</div><div class="line">        &#125;,</div><div class="line">         props: &#123;</div><div class="line">        level: &#123;</div><div class="line">          type: Number,</div><div class="line">          required: true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">        var app=new Vue(&#123;</div><div class="line">            el:&quot;#app&quot;,</div><div class="line">            data:&#123;</div><div class="line">                num:110</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="vue自定义指令"><a href="#vue自定义指令" class="headerlink" title="vue自定义指令"></a>vue自定义指令</h2><ul>
<li>当项目中需要对纯 DOM 元素进行底层操作,就要用到自定义指令<h3 id="vue自定义指令的注册"><a href="#vue自定义指令的注册" class="headerlink" title="vue自定义指令的注册"></a>vue自定义指令的注册</h3></li>
<li><p>注册全局自定义指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Vue.directive(&apos;focus&apos;, &#123;</div><div class="line">  inserted: function (el) &#123;</div><div class="line">    el.focus()</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>注册局部自定义指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">directives: &#123;</div><div class="line">  focus: &#123;</div><div class="line">    inserted:function (el) &#123;</div><div class="line">                    el.focus()</div><div class="line">                &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###自定义指令函数提供的钩子函数</p>
<ul>
<li>bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作</li>
<li>inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）</li>
<li>update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）</li>
<li>componentUpdated: 被绑定元素所在模板完成一次更新周期时调用</li>
<li>unbind: 只调用一次， 指令与元素解绑时调用<br>###钩子函数的参数</li>
<li>el: 指令所绑定的元素，可以用来直接操作 DOM 。</li>
<li>binding: 一个对象，包含以下属性：<ul>
<li>name: 指令名，不包括 v- 前缀。</li>
<li>value: 指令的绑定值， 例如： v-my-directive=”1 + 1”, value 的值是 2。</li>
<li>oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li>
<li>expression: 绑定值的字符串形式。 例如 v-my-directive=”1 + 1” ， expression 的值是 “1 + 1”。</li>
<li>arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 “foo”。</li>
<li>modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。</li>
</ul>
</li>
<li>vnode: Vue 编译生成的虚拟节点。</li>
<li>oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;钩子函数的理解&quot;&gt;&lt;a href=&quot;#钩子函数的理解&quot; class=&quot;headerlink&quot; title=&quot;钩子函数的理解&quot;&gt;&lt;/a&gt;钩子函数的理解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;文档翻译造成的问题，原名是“hook”（不负责任的直译为“钩子”而已），它是一种事件劫持机制，也就是说它会比你的事件更早进行执行处理。&lt;/li&gt;
&lt;li&gt;可以简单地把它理解为vue的内置事件，但是这个内置事件是由你去配置的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;vue的生命周期详解&quot;&gt;&lt;a href=&quot;#vue的生命周期详解&quot; class=&quot;headerlink&quot; title=&quot;vue的生命周期详解&quot;&gt;&lt;/a&gt;vue的生命周期详解&lt;/h2&gt;&lt;h3 id=&quot;vue生命周期图示&quot;&gt;&lt;a href=&quot;#vue生命周期图示&quot; class=&quot;headerlink&quot; title=&quot;vue生命周期图示&quot;&gt;&lt;/a&gt;vue生命周期图示&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/28/5952fd52156c2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;生命周期总共分为八个阶段&quot;&gt;&lt;a href=&quot;#生命周期总共分为八个阶段&quot; class=&quot;headerlink&quot; title=&quot;生命周期总共分为八个阶段&quot;&gt;&lt;/a&gt;生命周期总共分为八个阶段&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;beforeCreate（组件实例创建前）&lt;ul&gt;
&lt;li&gt;el和data并未初始化&lt;/li&gt;
&lt;li&gt;实例创建前：这个阶段实例的data、methods是读不到的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;created（组件实例创建后）,&lt;ul&gt;
&lt;li&gt;完成了 data 数据的初始化，el没有&lt;/li&gt;
&lt;li&gt;实例创建后：这个阶段已经完成了数据观测(data observer)，属性和方法的运算， watch/event 事件回调。mount挂载阶段还没开始，$el 属性目前不可见，数据并没有在DOM元素上进行渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;beforeMount(模板编译/挂载之前),&lt;ul&gt;
&lt;li&gt;完成了 el 和 data 初始化&lt;/li&gt;
&lt;li&gt;在挂载开始之前被调用：相关的 render 函数首次被调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mounted（模板编译/挂载之后）&lt;ul&gt;
&lt;li&gt;完成挂载&lt;/li&gt;
&lt;li&gt;el选项的DOM节点 被新创建的 vm.$el 替换，并挂载到实例上去之后调用此生命周期函数。此时实例的数据在DOM节点上进行渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;beforeUpdate（组件更新之前）&lt;ul&gt;
&lt;li&gt;data的值改变后，组件更新，触发update的操作&lt;/li&gt;
&lt;li&gt;数据更新时调用，但不进行DOM重新渲染，在数据更新时DOM没渲染前可以在这个生命函数里进行状态处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;updated（组件更新之后）&lt;ul&gt;
&lt;li&gt;data的值改变后，组件更新，触发update的操作&lt;/li&gt;
&lt;li&gt;这个状态下数据更新并且DOM重新渲染，当这个生命周期函数被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。当实例每次进行数据更新时updated都会执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;beforeDestroy（组件销毁前）&lt;ul&gt;
&lt;li&gt;实例销毁之前调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;destroyed（组件销毁后）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;销毁完成后，我们再重新改变data中的值，vue不再对此动作进行响应了。但是原先生成的dom元素还存在，可以这么理解，执行了destroy操作，后续就不再受vue控制了。&lt;/li&gt;
&lt;li&gt;Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。&lt;h3 id=&quot;钩子函数的使用&quot;&gt;&lt;a href=&quot;#钩子函数的使用&quot; class=&quot;headerlink&quot; title=&quot;钩子函数的使用&quot;&gt;&lt;/a&gt;钩子函数的使用&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;beforecreate : 可以在这加个loading事件&lt;/li&gt;
&lt;li&gt;created ：在这结束loading，还做一些初始化，实现函数自执行&lt;/li&gt;
&lt;li&gt;mounted ： 在这发起后端请求，拿回数据，配合路由钩子做一些事情&lt;/li&gt;
&lt;li&gt;&lt;p&gt;beforeDestory： 你确认删除XX吗？ destoryed ：当前组件已被删除，清空相关内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;created：进行ajax请求异步数据的获取、初始化数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;mounted：挂载元素内dom节点的获取&lt;/li&gt;
&lt;li&gt;nextTick：针对单一事件更新数据后立即操作dom&lt;/li&gt;
&lt;li&gt;updated：任何数据的更新，如果要做统一的业务逻辑处理&lt;/li&gt;
&lt;li&gt;watch：监听具体数据变化，并做相应的处理
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js学习二</title>
    <link href="http://yoursite.com/2017/06/23/Vue-js%E5%AD%A6%E4%B9%A0%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/06/23/Vue-js学习二/</id>
    <published>2017-06-23T02:38:34.000Z</published>
    <updated>2017-06-27T09:33:46.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Class与Style绑定"><a href="#Class与Style绑定" class="headerlink" title="Class与Style绑定"></a>Class与Style绑定</h2><h3 id="绑定HTML-Class"><a href="#绑定HTML-Class" class="headerlink" title="绑定HTML Class"></a>绑定HTML Class</h3><ol>
<li>对象语法：</li>
</ol>
<ul>
<li><p>给<code>v-bind:class</code>一个对象，以动态切换class,语法表示<code>classactive</code>的更新将取决于数据属性 isActive 是否为真值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在对象中传入更多属性用来动态切换多个 class ,v-bind:class 指令可以与普通的 class 属性共存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;static&quot;</div><div class="line">     v-bind:class=&quot;&#123; active: isActive, &apos;text-danger&apos;: hasError &#125;&quot;&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>直接绑定数据里的一个对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;</div><div class="line">data: &#123;</div><div class="line">  classObject: &#123;</div><div class="line">    active: true,</div><div class="line">    &apos;text-danger&apos;: false</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>数组语法</li>
</ol>
<ul>
<li><p>把一个数组传给 v-bind:class ，以应用一个 class 列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:class=&quot;[activeClass,errorClass]&quot;&gt;&lt;/div&gt;</div><div class="line">data: &#123;</div><div class="line">    activeClass: &apos;active&apos;,</div><div class="line">    errorClass: &apos;text-danger&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>用三元表达式，据条件切换列表中的 class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:class=&quot;[isActive ? activeClass : &apos;&apos;, errorClass]&quot;&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><ul>
<li><code>v-if</code>是“真正的”条件渲染，如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</li>
<li><code>v-show</code>不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换</li>
<li>区别：v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件不太可能改变，则使用 v-if 较好</li>
</ul>
<a id="more"></a>
<h3 id="vue时间处理器"><a href="#vue时间处理器" class="headerlink" title="vue时间处理器"></a>vue时间处理器</h3><ul>
<li>用 <code>v-on</code> 指令监听 DOM 事件来触发一些 JavaScript 代码</li>
<li><code>v-on</code> 可以接收一个定义的方法来调用，方法定义在<code>methods</code><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3></li>
<li><p>vue推荐methods 只有纯粹的数据逻辑，而不是去处理 DOM 事件细节,当我们要调用 event.preventDefault() 或 event.stopPropagation(),就可以使用事件修饰符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 阻止单击事件冒泡 --&gt;</div><div class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</div><div class="line">&lt;!-- 提交事件不再重载页面 --&gt;</div><div class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</div><div class="line">&lt;!-- 修饰符可以串联  --&gt;</div><div class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</div><div class="line">&lt;!-- 只有修饰符 --&gt;</div><div class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</div><div class="line">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</div><div class="line">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</div><div class="line">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</div><div class="line">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</div><div class="line">&lt;!-- 点击事件将只会触发一次 --&gt;</div><div class="line">&lt;div v-on:click.once=&apos;doThat&apos;&gt;...&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 @click.prevent.self 会阻止所有的点击，而 @click.self.prevent 只会阻止元素上的点击。</p>
<h3 id="关键修饰符"><a href="#关键修饰符" class="headerlink" title="关键修饰符"></a>关键修饰符</h3></li>
<li><p>Vue 允许为 v-on 在监听键盘事件时添加关键修饰符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</div><div class="line">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>Vue 为最常用的按键提供了别名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 同上 --&gt;</div><div class="line">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</div><div class="line">&lt;!-- 缩写语法 --&gt;</div><div class="line">&lt;input @keyup.enter=&quot;submit&quot;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>全部的按键别名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.enter</div><div class="line">.tab</div><div class="line">.delete (捕获 “删除” 和 “退格” 键)</div><div class="line">.esc</div><div class="line">.space</div><div class="line">.up</div><div class="line">.down</div><div class="line">.left</div><div class="line">.right</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="vue的数据绑定"><a href="#vue的数据绑定" class="headerlink" title="vue的数据绑定"></a>vue的数据绑定</h2><ul>
<li>“Mustache” 语法（双大括号）<code>{{text}}</code> 单向的数据绑定</li>
<li><code>v-model</code> 双向数据绑定<h3 id="v-model可以添加修饰符"><a href="#v-model可以添加修饰符" class="headerlink" title="v-model可以添加修饰符"></a><code>v-model</code>可以添加修饰符</h3></li>
<li><p>可以添加一个修饰符 lazy ,从而转变为在 change 事件中同步：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</div><div class="line">&lt;input v-model.lazy=&quot;msg&quot; &gt;</div></pre></td></tr></table></figure>
</li>
<li><p>将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input v-model.number=&apos;age&apos; type=&apos;number&apos;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input v-model.trim=&quot;msg&quot;&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Class与Style绑定&quot;&gt;&lt;a href=&quot;#Class与Style绑定&quot; class=&quot;headerlink&quot; title=&quot;Class与Style绑定&quot;&gt;&lt;/a&gt;Class与Style绑定&lt;/h2&gt;&lt;h3 id=&quot;绑定HTML-Class&quot;&gt;&lt;a href=&quot;#绑定HTML-Class&quot; class=&quot;headerlink&quot; title=&quot;绑定HTML Class&quot;&gt;&lt;/a&gt;绑定HTML Class&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;对象语法：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;给&lt;code&gt;v-bind:class&lt;/code&gt;一个对象，以动态切换class,语法表示&lt;code&gt;classactive&lt;/code&gt;的更新将取决于数据属性 isActive 是否为真值&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div v-bind:class=&amp;quot;&amp;#123; active: isActive &amp;#125;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在对象中传入更多属性用来动态切换多个 class ,v-bind:class 指令可以与普通的 class 属性共存&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div class=&amp;quot;static&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     v-bind:class=&amp;quot;&amp;#123; active: isActive, &amp;apos;text-danger&amp;apos;: hasError &amp;#125;&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;直接绑定数据里的一个对象&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div v-bind:class=&amp;quot;classObject&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;data: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  classObject: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    active: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;text-danger&amp;apos;: false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;数组语法&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;把一个数组传给 v-bind:class ，以应用一个 class 列表：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div v-bind:class=&amp;quot;[activeClass,errorClass]&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;data: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    activeClass: &amp;apos;active&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    errorClass: &amp;apos;text-danger&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用三元表达式，据条件切换列表中的 class&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div v-bind:class=&amp;quot;[isActive ? activeClass : &amp;apos;&amp;apos;, errorClass]&amp;quot;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;条件渲染&quot;&gt;&lt;a href=&quot;#条件渲染&quot; class=&quot;headerlink&quot; title=&quot;条件渲染&quot;&gt;&lt;/a&gt;条件渲染&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v-if&lt;/code&gt;是“真正的”条件渲染，如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-show&lt;/code&gt;不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换&lt;/li&gt;
&lt;li&gt;区别：v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件不太可能改变，则使用 v-if 较好&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建博客</title>
    <link href="http://yoursite.com/2017/06/23/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/06/23/hexo搭建博客/</id>
    <published>2017-06-23T02:29:13.000Z</published>
    <updated>2017-06-23T02:37:27.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ul>
<li>第一步、执行npm install hexo-cli -g 安装hexo</li>
<li>第二步、找到你想写博客的文件夹，执行hexo init blog生成文件</li>
<li>第三步、在生成的文件blog中执行hexo server，访问<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></li>
</ul>
<h2 id="安装和配置Next主题"><a href="#安装和配置Next主题" class="headerlink" title="安装和配置Next主题"></a>安装和配置Next主题</h2><ul>
<li>在hexo目录下右键Git bash通过命令<code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code><br>next主题自动下载到themes目录下</li>
<li>在blog文件下的站点配置文件_config.yml,找到 theme 字段，并将其值更改为 next<code>theme:next</code></li>
<li><code>hexo s</code>验证主题配置是否成功，浏览器输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></li>
</ul>
<h2 id="hexo书写博客"><a href="#hexo书写博客" class="headerlink" title="hexo书写博客"></a>hexo书写博客</h2><ul>
<li>在source文件夹的_posts里面,通过<code>hexo new 博客标题</code>命令生成markdown文件</li>
<li>文章写好后，执行<code>hexo generate</code>命令生成静态的html文件</li>
</ul>
<h2 id="发送博客到github上"><a href="#发送博客到github上" class="headerlink" title="发送博客到github上"></a>发送博客到github上</h2><ul>
<li>我们把public里面的文件发布到github上面</li>
<li>在创建github仓库是取名一定要去[github用户名].github.io 例子:saber-tgb.github.io</li>
<li>用git发送到githoub是一定要发送到master分支</li>
<li>不用更改生成的博客html文件的css，js的路径 传上去后路径就会正确<a id="more"></a>
<h2 id="next主题的配置和优化"><a href="#next主题的配置和优化" class="headerlink" title="next主题的配置和优化"></a>next主题的配置和优化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------------------------------------</div><div class="line"># Site Information Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Place your favicon.ico to /source directory.</div><div class="line">favicon: /favicon.ico   #站标  可以放在hexo文件夹下的/source里</div><div class="line"></div><div class="line"># Set default keywords (Use a comma to separate)</div><div class="line">keywords: &quot;为学,willxue,willxue.top&quot;  #网站关键字</div><div class="line"></div><div class="line"># Set rss to false to disable feed link.</div><div class="line"># Leave rss as empty to use site&apos;s feed link.</div><div class="line"># Set rss to specific value if you have burned your feed already.</div><div class="line">rss:  #rss这里不设置 引文站点配置文件已经配置了 需要安装插件</div><div class="line"></div><div class="line"># Specify the date when the site was setup</div><div class="line">since: 1990  #网站时间 从xx开始 类似 1990-2016</div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Menu Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># When running hexo in a subdirectory (e.g. domain.tld/blog)</div><div class="line"># Remove leading slashes ( &quot;/archives&quot; -&gt; &quot;archives&quot; )</div><div class="line">menu: #菜单路径设置 如果hexo在二级目录放置要去掉/</div><div class="line">  home: /</div><div class="line">  archives: /archives #归档</div><div class="line">  tags: /tags #标签</div><div class="line">  categories: /categories  #分类</div><div class="line">  about: /about #关于我</div><div class="line">  commonweal: /404.html  #公益404</div><div class="line"></div><div class="line"></div><div class="line"># Enable/Disable menu icons.</div><div class="line"># Icon Mapping:</div><div class="line">#   Map a menu item to a specific FontAwesome icon name.</div><div class="line">#   Key is the name of menu item and value is the name of FontAwsome icon.</div><div class="line">#   When an question mask icon presenting up means that the item has no mapping icon.</div><div class="line">menu_icons:  #icon图标</div><div class="line">  enable: true</div><div class="line">  # Icon Mapping.</div><div class="line">  home: home</div><div class="line">  about: user</div><div class="line">  categories: th</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  commonweal: heartbeat</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Scheme Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Schemes  #next的三个scheme</div><div class="line">#scheme: Muse</div><div class="line">#scheme: Mist</div><div class="line">scheme: Pisces</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Sidebar Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"></div><div class="line"># Social links   #社交链接</div><div class="line">social:</div><div class="line">  GitHub:</div><div class="line">  Weibo:</div><div class="line">  Others:</div><div class="line"></div><div class="line"># Social Icons  #社交的图标</div><div class="line">social_icons:</div><div class="line">  enable: true</div><div class="line">  # Icon Mappings</div><div class="line">  GitHub: github</div><div class="line">  Twitter: twitter</div><div class="line">  Weibo: weibo</div><div class="line"></div><div class="line"></div><div class="line"># Sidebar Avatar</div><div class="line"># in theme directory(source/images): /images/avatar.jpg</div><div class="line"># in site  directory(source/uploads): /uploads/avatar.jpg</div><div class="line"># default : /images/default_avatar.jpg</div><div class="line">avatar: http://7xrz9n.com1.z0.glb.clouddn.com/logo.png #头像</div><div class="line"></div><div class="line"></div><div class="line"># TOC in the Sidebar  #文章自动显示目录</div><div class="line">toc:</div><div class="line">  enable: true</div><div class="line"></div><div class="line">  # Automatically add list number to toc.  #目录是否自动显示数字序号</div><div class="line">  number: false</div><div class="line"></div><div class="line"></div><div class="line"># Creative Commons 4.0 International License.</div><div class="line"># http://creativecommons.org/  #自由协议</div><div class="line"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</div><div class="line">#creative_commons: by-nc-sa</div><div class="line">#creative_commons:</div><div class="line"></div><div class="line">sidebar:</div><div class="line">  # Sidebar Position, available value: left | right</div><div class="line">  position: left</div><div class="line">  #position: right</div><div class="line"></div><div class="line">  # Sidebar Display, available value:</div><div class="line">  #  - post    expand on posts automatically. Default.</div><div class="line">  #  - always  expand for all pages automatically</div><div class="line">  #  - hide    expand only when click on the sidebar toggle icon.</div><div class="line">  #  - remove  Totally remove sidebar including sidebar toggle icon.</div><div class="line">  display: post</div><div class="line">  #display: always</div><div class="line">  #display: hide</div><div class="line">  #display: remove</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Misc Theme Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Custom Logo.</div><div class="line"># !!Only available for Default Scheme currently.</div><div class="line"># Options:</div><div class="line">#   enabled: [true/false] - Replace with specific image</div><div class="line">#   image: url-of-image   - Images&apos;s url</div><div class="line">custom_logo:</div><div class="line">  enabled: false</div><div class="line">  image:</div><div class="line"></div><div class="line"></div><div class="line"># Code Highlight theme</div><div class="line"># Available value:</div><div class="line">#    normal | night | night eighties | night blue | night bright</div><div class="line"># https://github.com/chriskempson/tomorrow-theme</div><div class="line">highlight_theme: night</div><div class="line"></div><div class="line"># Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</div><div class="line">scroll_to_more: true</div><div class="line"></div><div class="line"># Automatically Excerpt</div><div class="line">auto_excerpt:</div><div class="line">  enable: false</div><div class="line">  length: 150</div><div class="line"></div><div class="line"># Use Lato font</div><div class="line">use_font_lato: true</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Third Party Services Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># MathJax Support</div><div class="line">mathjax:</div><div class="line"></div><div class="line"></div><div class="line"># Swiftype Search API Key</div><div class="line">#swiftype_key:</div><div class="line"></div><div class="line"># Baidu Analytics ID</div><div class="line">#baidu_analytics:</div><div class="line"></div><div class="line"># Duoshuo ShortName</div><div class="line">duoshuo_shortname: imwillxue</div><div class="line"></div><div class="line"># Disqus</div><div class="line">#disqus_shortname:</div><div class="line"></div><div class="line"># Baidu Share</div><div class="line"># Available value:</div><div class="line">#    button | slide</div><div class="line">#baidushare:</div><div class="line">##  type: button</div><div class="line"></div><div class="line"># Share</div><div class="line">#jiathis:</div><div class="line">#add_this_id:</div><div class="line"></div><div class="line"># Share</div><div class="line">duoshuo_share: true</div><div class="line"></div><div class="line"># Google Webmaster tools verification setting</div><div class="line"># See: https://www.google.com/webmasters/</div><div class="line">#google_site_verification:</div><div class="line"></div><div class="line"></div><div class="line"># Google Analytics</div><div class="line">#google_analytics:</div><div class="line"></div><div class="line"># CNZZ count</div><div class="line">#cnzz_siteid:</div><div class="line"></div><div class="line"></div><div class="line"># Make duoshuo show UA</div><div class="line"># user_id must NOT be null when admin_enable is true!</div><div class="line"># you can visit http://dev.duoshuo.com get duoshuo user id.</div><div class="line">duoshuo_info:</div><div class="line">  ua_enable: true</div><div class="line">  admin_enable: true</div><div class="line">  user_id: 6262178932196377345</div><div class="line">  admin_nickname: 神</div><div class="line"></div><div class="line"></div><div class="line"># Facebook SDK Support.</div><div class="line"># https://github.com/iissnan/hexo-theme-next/pull/410</div><div class="line">facebook_sdk:</div><div class="line">  enable: false</div><div class="line">  app_id:       #&lt;app_id&gt;</div><div class="line">  fb_admin:     #&lt;user_id&gt;</div><div class="line">  like_button:  #true</div><div class="line">  webmaster:    #true</div><div class="line"></div><div class="line"></div><div class="line"># Show number of visitors to each article.</div><div class="line"># You can visit https://leancloud.cn get AppID and AppKey.</div><div class="line">leancloud_visitors:</div><div class="line">  enable: true</div><div class="line">  app_id: QImiFijLSOHYufsazlBVlwLg-gzGzoHsz</div><div class="line">  app_key: AMcYaNHy9Y5OdH42k0d4uSED</div><div class="line"></div><div class="line"></div><div class="line"># Tencent analytics ID</div><div class="line"># tencent_analytics:</div><div class="line"></div><div class="line"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</div><div class="line">baidu_push: true</div><div class="line"></div><div class="line">## 文章末尾是否显示打赏按钮</div><div class="line">donate:</div><div class="line">  enable: true</div><div class="line">  text: Enjoy it ? Donate me !  欣赏此文？求鼓励，求支持！</div><div class="line">  alipay:</div><div class="line">  wechat:</div><div class="line"></div><div class="line"></div><div class="line">#! ---------------------------------------------------------------</div><div class="line">#! DO NOT EDIT THE FOLLOWING SETTINGS</div><div class="line">#! UNLESS YOU KNOW WHAT YOU ARE DOING</div><div class="line">#! ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Motion</div><div class="line">use_motion: true</div><div class="line"></div><div class="line"># Fancybox</div><div class="line">fancybox: true</div><div class="line"></div><div class="line"># Static files</div><div class="line">vendors: vendors</div><div class="line">css: css</div><div class="line">js: js</div><div class="line">images: images</div><div class="line"></div><div class="line"># Theme version</div><div class="line">version: 0.5.0</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装hexo&quot;&gt;&lt;a href=&quot;#安装hexo&quot; class=&quot;headerlink&quot; title=&quot;安装hexo&quot;&gt;&lt;/a&gt;安装hexo&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;第一步、执行npm install hexo-cli -g 安装hexo&lt;/li&gt;
&lt;li&gt;第二步、找到你想写博客的文件夹，执行hexo init blog生成文件&lt;/li&gt;
&lt;li&gt;第三步、在生成的文件blog中执行hexo server，访问&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装和配置Next主题&quot;&gt;&lt;a href=&quot;#安装和配置Next主题&quot; class=&quot;headerlink&quot; title=&quot;安装和配置Next主题&quot;&gt;&lt;/a&gt;安装和配置Next主题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在hexo目录下右键Git bash通过命令&lt;code&gt;git clone https://github.com/iissnan/hexo-theme-next themes/next&lt;/code&gt;&lt;br&gt;next主题自动下载到themes目录下&lt;/li&gt;
&lt;li&gt;在blog文件下的站点配置文件_config.yml,找到 theme 字段，并将其值更改为 next&lt;code&gt;theme:next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo s&lt;/code&gt;验证主题配置是否成功，浏览器输入 &lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;hexo书写博客&quot;&gt;&lt;a href=&quot;#hexo书写博客&quot; class=&quot;headerlink&quot; title=&quot;hexo书写博客&quot;&gt;&lt;/a&gt;hexo书写博客&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在source文件夹的_posts里面,通过&lt;code&gt;hexo new 博客标题&lt;/code&gt;命令生成markdown文件&lt;/li&gt;
&lt;li&gt;文章写好后，执行&lt;code&gt;hexo generate&lt;/code&gt;命令生成静态的html文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;发送博客到github上&quot;&gt;&lt;a href=&quot;#发送博客到github上&quot; class=&quot;headerlink&quot; title=&quot;发送博客到github上&quot;&gt;&lt;/a&gt;发送博客到github上&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们把public里面的文件发布到github上面&lt;/li&gt;
&lt;li&gt;在创建github仓库是取名一定要去[github用户名].github.io 例子:saber-tgb.github.io&lt;/li&gt;
&lt;li&gt;用git发送到githoub是一定要发送到master分支&lt;/li&gt;
&lt;li&gt;不用更改生成的博客html文件的css，js的路径 传上去后路径就会正确
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>微信页面开发的注意事项</title>
    <link href="http://yoursite.com/2017/06/19/%E5%BE%AE%E4%BF%A1%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://yoursite.com/2017/06/19/微信页面开发的注意事项/</id>
    <published>2017-06-19T12:21:27.000Z</published>
    <updated>2017-07-10T06:34:46.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="页面搜索框"><a href="#页面搜索框" class="headerlink" title="页面搜索框"></a>页面搜索框</h2><ul>
<li>为了保持和微信搜索一致，搜索框未点击时搜索图标在中间显示，点击搜索框后，搜索图标在左边</li>
<li><p>实现手机键盘显示搜索按钮<code>&lt;form&gt;</code>标签里面包含<code>&lt;input type=search&gt;</code>，<code>&lt;form&gt;</code>标签必须有<code>action</code>属性,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;&quot; class=&quot;searchForm&quot; v-show=&quot;searchShow1&quot;&gt;</div><div class="line">            &lt;input type=&quot;search&quot; autocomplete=&quot;off&quot; placeholder=&quot;搜索&quot; class=&quot;search&quot; @focus=&quot;searchFocus&quot;&gt;</div><div class="line">            &lt;i class=&quot;iconfont icon-sousuo icoImg&quot;&gt;&lt;/i&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;form action=&quot;&quot; class=&quot;searchForm2&quot; v-show=&quot;searchShow2&quot;&gt;</div><div class="line">            &lt;input type=&quot;search&quot; autocomplete=&quot;off&quot; placeholder=&quot;搜索&quot; class=&quot;search&quot; v-model=&quot;keywords2&quot; @keydown=&quot;searchVk($event)&quot;&gt;</div><div class="line">            &lt;i class=&quot;iconfont icon-sousuo icoImg&quot; @click=&quot;getVkBusList()&quot;&gt;&lt;/i&gt;</div><div class="line">            &lt;span class=&quot;btn&quot; @click=&quot;cancelSearch&quot;&gt;取消&lt;/span&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>vue绑定事件在<code>&lt;input&gt;</code>标签上,用监听键盘事件<code>@keydown</code>,要使用<code>e.preventDefault()</code>阻止默认事件触发。</p>
<a id="more"></a>
<h2 id="页面1px边框显示问题"><a href="#页面1px边框显示问题" class="headerlink" title="页面1px边框显示问题"></a>页面1px边框显示问题</h2></li>
<li>使用淘宝的flexible.js插件转化为1rem.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;页面搜索框&quot;&gt;&lt;a href=&quot;#页面搜索框&quot; class=&quot;headerlink&quot; title=&quot;页面搜索框&quot;&gt;&lt;/a&gt;页面搜索框&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为了保持和微信搜索一致，搜索框未点击时搜索图标在中间显示，点击搜索框后，搜索图标在左边&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实现手机键盘显示搜索按钮&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;标签里面包含&lt;code&gt;&amp;lt;input type=search&amp;gt;&lt;/code&gt;，&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;标签必须有&lt;code&gt;action&lt;/code&gt;属性,&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;form action=&amp;quot;&amp;quot; class=&amp;quot;searchForm&amp;quot; v-show=&amp;quot;searchShow1&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;input type=&amp;quot;search&amp;quot; autocomplete=&amp;quot;off&amp;quot; placeholder=&amp;quot;搜索&amp;quot; class=&amp;quot;search&amp;quot; @focus=&amp;quot;searchFocus&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;i class=&amp;quot;iconfont icon-sousuo icoImg&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/form&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;form action=&amp;quot;&amp;quot; class=&amp;quot;searchForm2&amp;quot; v-show=&amp;quot;searchShow2&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;input type=&amp;quot;search&amp;quot; autocomplete=&amp;quot;off&amp;quot; placeholder=&amp;quot;搜索&amp;quot; class=&amp;quot;search&amp;quot; v-model=&amp;quot;keywords2&amp;quot; @keydown=&amp;quot;searchVk($event)&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;i class=&amp;quot;iconfont icon-sousuo icoImg&amp;quot; @click=&amp;quot;getVkBusList()&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;span class=&amp;quot;btn&amp;quot; @click=&amp;quot;cancelSearch&amp;quot;&amp;gt;取消&amp;lt;/span&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/form&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;vue绑定事件在&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;标签上,用监听键盘事件&lt;code&gt;@keydown&lt;/code&gt;,要使用&lt;code&gt;e.preventDefault()&lt;/code&gt;阻止默认事件触发。&lt;/p&gt;
    
    </summary>
    
      <category term="微信" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="移动端" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>npm,browser-sync,gulp工具的学习</title>
    <link href="http://yoursite.com/2017/06/16/npm-browser-sync-gulp%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/06/16/npm-browser-sync-gulp工具的学习/</id>
    <published>2017-06-16T02:56:02.000Z</published>
    <updated>2017-06-20T08:23:44.157Z</updated>
    
    <content type="html"><![CDATA[<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><ul>
<li>官网[<a href="https://www.npmjs.com" target="_blank" rel="external">https://www.npmjs.com</a>]</li>
<li>node package manager</li>
<li>命令:<ul>
<li>初始化:<code>npm init</code></li>
<li>安装指定包:<code>npm install jquery --save</code></li>
<li>删除指定包:<code>npm remove jquery --save</code></li>
<li>卸载一般用 npm uninstall –save jquery  或者 npm remove –save jquery</li>
<li>下载安装package.json中dependencies属性对的文件:<code>npm install --production</code></li>
</ul>
</li>
<li>npm的使用步骤<ul>
<li>第一步、npm init创建一个文件夹（注意：不要用中文名,不能以数字开头，不能有空格）</li>
<li>第二步、执行npm init -y</li>
<li>第三步、安装需要的js库 npm install –save jquery</li>
</ul>
</li>
</ul>
<h3 id="browser-sync"><a href="#browser-sync" class="headerlink" title="browser-sync"></a>browser-sync</h3><ul>
<li>更改代码之后自动刷新浏览器</li>
<li>需要使用npm进行全局安装:<code>npm install browser-sync -g</code>,-g表示安装到全局</li>
<li>使用:<code>browser-sync start --server --files &quot;./index.html,app.css,./css/*.css,*.*&quot;</code></li>
<li>–files参数指定要监视的文件，后面跟要监视的文件的文件路径以逗号分隔。</li>
</ul>
<h2 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h2><p>  <a href="http://www.gulpjs.com" target="_blank" rel="external">官网</a><br>  <a href="http://www.gulpjs.com.cn" target="_blank" rel="external">中文网</a></p>
<ul>
<li><p>前端自动化构建工具<br>js压缩,var x,xname，混淆<br>合并.<br>css压缩<br>html压压缩</p>
</li>
<li><p>grunt ,webpack…</p>
</li>
</ul>
<h3 id="核心就5个方法"><a href="#核心就5个方法" class="headerlink" title="核心就5个方法"></a>核心就5个方法</h3><ul>
<li>task,gulp中是一个个任务的形式来实现功能。<ul>
<li>task(‘任务名’,function(){<br>…..<br>});</li>
</ul>
</li>
<li>src<ul>
<li>src(‘./*.js’)</li>
</ul>
</li>
<li>dest(‘./minjs/‘)// 指定处理后的文件的输出路径.</li>
<li>watch(‘./*.js’,[‘任务名1’,’任务名2’]);</li>
<li>run(‘任务名’);//执行指定的任务.<a id="more"></a>
<h3 id="gulp的安装"><a href="#gulp的安装" class="headerlink" title="gulp的安装"></a>gulp的安装</h3></li>
<li>使用npm 进行安装</li>
<li><code>npm install gulp-cli -g</code>;</li>
</ul>
<h3 id="gulp-使用"><a href="#gulp-使用" class="headerlink" title="gulp 使用"></a>gulp 使用</h3><h4 id="使用时还需要在项目中通过npm非全局安装gulp"><a href="#使用时还需要在项目中通过npm非全局安装gulp" class="headerlink" title="使用时还需要在项目中通过npm非全局安装gulp"></a>使用时还需要在项目中通过npm非全局安装gulp</h4><ul>
<li><code>npm install gulp --save-dev</code><ul>
<li>-dev安装在本地</li>
<li>之所以在全局安装了一次还有在项目中安装，是为了保证gulp的版本的控制，每次使用的时候重新安装能控制gulp的版本</li>
</ul>
</li>
</ul>
<h4 id="还需要在当前项目根目录添加一个gulpfile-js文件来写具体的任务代码"><a href="#还需要在当前项目根目录添加一个gulpfile-js文件来写具体的任务代码" class="headerlink" title="还需要在当前项目根目录添加一个gulpfile.js文件来写具体的任务代码."></a>还需要在当前项目根目录添加一个gulpfile.js文件来写具体的任务代码.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">// 得到gulp对象</div><div class="line">var gulp = require(&quot;gulp&quot;);</div><div class="line">//引入gulp-uglify插件 用来压缩js</div><div class="line">var uglify = require(&apos;gulp-uglify&apos;);</div><div class="line">//引入gulp-concat插件 用来合并代码 js,css都能合并</div><div class="line">var concat = require(&apos;gulp-concat&apos;);</div><div class="line">//引入gulp-cssnano插件 用来对css进行压缩</div><div class="line">var cssnano = require(&apos;gulp-cssnano&apos;);</div><div class="line">//引入gulp-htmlmin插件 用来对html代码进行压缩</div><div class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</div><div class="line">//引入gulp-imagemin插件 对图片进行压缩</div><div class="line">var imagemin = require(&apos;gulp-imagemin&apos;);</div><div class="line">//引入gulp-spriter插件 合并成精灵图</div><div class="line">var spriter = require(&apos;gulp-spriter&apos;);</div><div class="line">&lt;!-- more --&gt;</div><div class="line">//创建js压缩任务</div><div class="line">gulp.task(&apos;script&apos;,function()&#123;</div><div class="line">  // 这里写任务具体需要做的事情.</div><div class="line">  // 2.匹配到app.js文件,如果使用多个规则，需要以数组的形式来书写第一个参数，数组中的每一个元素都是一个规则。</div><div class="line">  gulp.src([&apos;./app.js&apos;,&apos;./signIn.js&apos;])</div><div class="line">  //合并后生成的文件名</div><div class="line">  .pipe(concat(&apos;all.js&apos;))</div><div class="line">  //调用方法 压缩js</div><div class="line">  .pipe(uglify())</div><div class="line">  //将合格的js文件 输出到指定目录</div><div class="line">  .pipe(gulp.dest(&apos;./dist&apos;))</div><div class="line">&#125;);</div><div class="line">//创建css压缩任务</div><div class="line">gulp.task(&apos;style&apos;,function()&#123;</div><div class="line">   // 匹配css文件</div><div class="line">   gulp.src([&apos;./style.css&apos;,&apos;./signIn.css&apos;])</div><div class="line">   .pipe(concat(&apos;all.css&apos;)) // 需要指定一个名字，作为压缩后文件的文件名</div><div class="line">   .pipe(cssnano())</div><div class="line">   .pipe(gulp.dest(&apos;./dist&apos;))</div><div class="line">&#125;);</div><div class="line">//创建html压缩任务</div><div class="line">gulp.task(&apos;htmlmin&apos;,function()&#123;</div><div class="line">    gulp.src(&apos;./index.html&apos;)</div><div class="line">        .pipe(htmlmin(&#123;</div><div class="line">            //collapseWhitespace:清除空格</div><div class="line">            collapseWhitespace:true,</div><div class="line">            //collapseBooleanAttributes:省略布尔属性的值，</div><div class="line">            collapseBooleanAttributes:true,</div><div class="line">            //removeComments:清除html中注释的部分</div><div class="line">            removeComments:true,</div><div class="line">            //removeEmptyAttributes:清除所有的空属性</div><div class="line">            removeEmptyAttributes:true,</div><div class="line">            //removeSciptTypeAttributes:清除所有script标签中的type=&quot;text/javascript&quot;属性。</div><div class="line">            removeScriptTypeAttributes:true,</div><div class="line">            //removeStyleLinkTypeAttributes:清楚所有Link标签上的type属性</div><div class="line">            removeStyleLinkTypeAttributes:true,</div><div class="line">            //minifyJS:压缩html中的javascript代码。</div><div class="line">            minifyJS:true,</div><div class="line">            //minifyCSS:压缩html中的css代码</div><div class="line">            minifyCSS:true</div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(&apos;./dist&apos;));</div><div class="line">&#125;);</div><div class="line">//创建合并压缩方法</div><div class="line">gulp.task(&apos;concat&apos;,function()&#123;</div><div class="line">    // 匹配文件</div><div class="line">    gulp.src([&apos;./1.js&apos;,&apos;./2.js&apos;])</div><div class="line">        //调用合并方法 生成新的文件名</div><div class="line">        .pipe(concat(&apos;index.js&apos;))</div><div class="line">        //调用压缩方法</div><div class="line">        .pipe(uglify())</div><div class="line">        //输出到指定目录</div><div class="line">        .pipe(gulp.dest(&apos;./build&apos;));</div><div class="line">&#125;)</div><div class="line">//创建图片压缩方法</div><div class="line">gulp.task(&apos;imagemin&apos;,function()&#123;</div><div class="line">  //引入图片地址方法</div><div class="line">  gulp.src(&apos;./images/*&apos;)</div><div class="line">      //调用图片压缩</div><div class="line">      .pipe(imagemin())</div><div class="line">      //输出压缩后图片的存放地址</div><div class="line">      .pipe(gulp.dest(&apos;dist/images&apos;));</div><div class="line">&#125;);</div><div class="line">//创建合并精灵图任务</div><div class="line">gulp.task(&apos;spriter&apos;,function()&#123;</div><div class="line">  return gulp.src(&apos;./style.css&apos;)//原始的css文件地址</div><div class="line">             //调用spriter精灵图合并方法</div><div class="line">             .pipe(spriter(&#123;</div><div class="line">               sprite:&apos;test.png&apos;,//合并后图片的名字</div><div class="line">               slice:&apos;./slice&apos;,//原始小图片路径</div><div class="line">               outpath:&apos;build/tests&apos;//合并后的大图的地址</div><div class="line">             &#125;))</div><div class="line">             //合并精灵图后的css的文件地址</div><div class="line">             .pipe(gulp.dest(&apos;./build/css&apos;));</div><div class="line">&#125;)</div><div class="line">//创建监视任务</div><div class="line">gulp.task(&quot;watch&quot;,function()&#123;</div><div class="line">      //调用watch方法</div><div class="line">      //第一个参数是监视目标文件,第二个参数是执行的任务</div><div class="line">      gulp.watch([&apos;./app.js&apos;,&apos;./signIn.js&apos;],[&quot;script&quot;]);</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<ul>
<li>调用方法直接在控制台输入<code>gulp 任务名</code></li>
</ul>
<h3 id="gulp监视文件的改变"><a href="#gulp监视文件的改变" class="headerlink" title="gulp监视文件的改变"></a>gulp监视文件的改变</h3><ul>
<li>监视文件,当文件发生改变时,watch方法就会执行目标文件所绑定的事件</li>
<li>使用：在cmd命令窗口直接调用gulp myWatch方法</li>
<li>第一个参数是监视目标文件,第二个参数是执行的任务<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(&quot;myWatch&quot;,function()&#123;</div><div class="line">    gulp.watch([&quot;./a.html&quot;,&quot;./b.html&quot;],function()&#123;</div><div class="line">        console.console.log()</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="gup-结合browsr-sync使用"><a href="#gup-结合browsr-sync使用" class="headerlink" title="gup 结合browsr-sync使用"></a>gup 结合browsr-sync使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//gulp结合browser-sync一起使用</div><div class="line">//当你改动html,css,js的时候 --&gt; 合并,压缩我们的html,js,css --&gt; browser-sync刷新浏览器</div><div class="line">//使用之前要在当前项目安装browser-sync 命令:npm install --save-dev browser-sync</div><div class="line">var browserSync = require(&apos;browser-sync&apos;) //得到browserSync对象</div><div class="line">//创建browserSync任务</div><div class="line">gulp.task(&quot;browserSync&quot;,function()&#123; // 静态服务器</div><div class="line">        //第一步先用gulp监视index.html,如果有改动就会执行htmlmin这个任务</div><div class="line">        gulp.watch([&quot;./index.html&quot;],[&quot;htmlmin&quot;]);</div><div class="line">        //第二步开启browserSyn,一旦html文件夹里面压缩的html有改动，就会刷新浏览器</div><div class="line">        browserSync(&#123;</div><div class="line">            server:&#123;</div><div class="line">                baseDir:&quot;./html&quot; //创建服务器的文件夹</div><div class="line">            &#125;,</div><div class="line">            files:[&quot;./html/index.html&quot;] //同步的html代码</div><div class="line">        &#125;);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h3 id="gulp的一些插件"><a href="#gulp的一些插件" class="headerlink" title="gulp的一些插件"></a>gulp的一些插件</h3><ul>
<li>也是使用npm安装</li>
<li>对js代码进行压缩 gulp-uglify</li>
<li>对代码进行合并 gulp-concat</li>
<li>对css进行压缩 gulp-cssnano</li>
<li>对html进行压缩 gulp-htmlmin</li>
<li>对图片进行压缩  gulp-imagemin</li>
<li>合并精灵图  gulp-spriter</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm&quot;&gt;&lt;/a&gt;npm&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;官网[&lt;a href=&quot;https://www.npmjs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.npmjs.com&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;node package manager&lt;/li&gt;
&lt;li&gt;命令:&lt;ul&gt;
&lt;li&gt;初始化:&lt;code&gt;npm init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装指定包:&lt;code&gt;npm install jquery --save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除指定包:&lt;code&gt;npm remove jquery --save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;卸载一般用 npm uninstall –save jquery  或者 npm remove –save jquery&lt;/li&gt;
&lt;li&gt;下载安装package.json中dependencies属性对的文件:&lt;code&gt;npm install --production&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;npm的使用步骤&lt;ul&gt;
&lt;li&gt;第一步、npm init创建一个文件夹（注意：不要用中文名,不能以数字开头，不能有空格）&lt;/li&gt;
&lt;li&gt;第二步、执行npm init -y&lt;/li&gt;
&lt;li&gt;第三步、安装需要的js库 npm install –save jquery&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;browser-sync&quot;&gt;&lt;a href=&quot;#browser-sync&quot; class=&quot;headerlink&quot; title=&quot;browser-sync&quot;&gt;&lt;/a&gt;browser-sync&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;更改代码之后自动刷新浏览器&lt;/li&gt;
&lt;li&gt;需要使用npm进行全局安装:&lt;code&gt;npm install browser-sync -g&lt;/code&gt;,-g表示安装到全局&lt;/li&gt;
&lt;li&gt;使用:&lt;code&gt;browser-sync start --server --files &amp;quot;./index.html,app.css,./css/*.css,*.*&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;–files参数指定要监视的文件，后面跟要监视的文件的文件路径以逗号分隔。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;gulp&quot;&gt;&lt;a href=&quot;#gulp&quot; class=&quot;headerlink&quot; title=&quot;gulp&quot;&gt;&lt;/a&gt;gulp&lt;/h2&gt;&lt;p&gt;  &lt;a href=&quot;http://www.gulpjs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;&lt;br&gt;  &lt;a href=&quot;http://www.gulpjs.com.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文网&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前端自动化构建工具&lt;br&gt;js压缩,var x,xname，混淆&lt;br&gt;合并.&lt;br&gt;css压缩&lt;br&gt;html压压缩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;grunt ,webpack…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;核心就5个方法&quot;&gt;&lt;a href=&quot;#核心就5个方法&quot; class=&quot;headerlink&quot; title=&quot;核心就5个方法&quot;&gt;&lt;/a&gt;核心就5个方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;task,gulp中是一个个任务的形式来实现功能。&lt;ul&gt;
&lt;li&gt;task(‘任务名’,function(){&lt;br&gt;…..&lt;br&gt;});&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;src&lt;ul&gt;
&lt;li&gt;src(‘./*.js’)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dest(‘./minjs/‘)// 指定处理后的文件的输出路径.&lt;/li&gt;
&lt;li&gt;watch(‘./*.js’,[‘任务名1’,’任务名2’]);&lt;/li&gt;
&lt;li&gt;run(‘任务名’);//执行指定的任务.
    
    </summary>
    
      <category term="npm" scheme="http://yoursite.com/categories/npm/"/>
    
      <category term="browser-sync" scheme="http://yoursite.com/categories/npm/browser-sync/"/>
    
      <category term="gulp" scheme="http://yoursite.com/categories/npm/browser-sync/gulp/"/>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="browser-sync" scheme="http://yoursite.com/tags/browser-sync/"/>
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
      <category term="前端自动化工具" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Git的使用</title>
    <link href="http://yoursite.com/2017/06/16/Git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/06/16/Git的使用/</id>
    <published>2017-06-16T02:48:27.000Z</published>
    <updated>2017-06-16T02:51:08.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git?"></a>什么是Git?</h3><ul>
<li>Git是一款源代码管理工具(版本控制工具)<ul>
<li>我们写的代码需要使用Git进行管理。</li>
</ul>
</li>
</ul>
<h3 id="分布式，集中式版本管理工具"><a href="#分布式，集中式版本管理工具" class="headerlink" title="分布式，集中式版本管理工具"></a>分布式，集中式版本管理工具</h3><ul>
<li>git属于分布式</li>
<li>svn集中式</li>
</ul>
<h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><h3 id="git初始化一个仓库"><a href="#git初始化一个仓库" class="headerlink" title="git初始化一个仓库"></a>git初始化一个仓库</h3><ul>
<li>创建一个.git隐藏目录</li>
<li>命令:<code>git init</code>;<ul>
<li>想在哪个目录创建.git目录，就是哪个目录打开工具然后写命令.</li>
<li>一般是在项目的根目录执行这个命令.</li>
</ul>
</li>
</ul>
<h3 id="自报家门"><a href="#自报家门" class="headerlink" title="自报家门"></a>自报家门</h3><ul>
<li>配置用户名 : <code>git config user.name &quot;testName&quot;</code></li>
<li>配置邮箱   : <code>git config user.email &quot;test@sina.com&quot;</code></li>
<li>查看配置信息: <code>git config --list</code></li>
</ul>
<h3 id="把代码提交到仓库中"><a href="#把代码提交到仓库中" class="headerlink" title="把代码提交到仓库中"></a>把代码提交到仓库中</h3><ul>
<li><p>1.先把代码添加到暂存区(就相当于放到仓库门口)</p>
<ul>
<li>命令:<code>git add 文件路径</code></li>
<li>示例:<code>git add ./reademe.md</code></li>
<li>可以使用<code>git add .</code>这个命令，批量把当前目录下所有修改过的文件添加到暂存区。</li>
</ul>
</li>
<li><p>2.把暂存区的文件提交仓库里</p>
<ul>
<li>命令: <code>git commit -m &quot;注释&quot;</code></li>
<li>示例: <code>git commit -m &quot;我们添加了一个新的功能&quot;</code></li>
<li>-m 表示指定一个字符串，作为提交的说明(相当于注释);</li>
</ul>
</li>
<li><p>合并add 与commit 命令</p>
<ul>
<li><code>git commit -a -m &quot;这是使用合并添加与提交的操作&quot;</code>;</li>
<li>这里-a参数表明把所有修改后的文件一起添加到暂存区.(只是对修改后的文件有效，对于新添加的文件没有作用)</li>
</ul>
</li>
</ul>
<h3 id="查看工作区状态"><a href="#查看工作区状态" class="headerlink" title="查看工作区状态"></a>查看工作区状态</h3><ul>
<li>命令:<code>git status</code></li>
</ul>
<h3 id="添加忽略文件"><a href="#添加忽略文件" class="headerlink" title="添加忽略文件"></a>添加忽略文件</h3><ul>
<li>在项目中有一些文件是不需要提交的,我们需要把它忽略掉</li>
<li>需要在.git文件夹所在目录新建一个名为.gitignore的文件<br>然后在这个文件中写上需要被忽略的文件的路径。<br>示例: /css/a.css<pre><code>: /css/*.css
: /a.html
</code></pre></li>
</ul>
<h3 id="对比文件差异"><a href="#对比文件差异" class="headerlink" title="对比文件差异"></a>对比文件差异</h3><ul>
<li>命令: <code>git diff</code><ul>
<li>用来比较暂存区文件内容与工作区文件内容的区别</li>
<li>如果暂存区没有文件，就会将工作与代码与最近一次提交对比</li>
</ul>
</li>
<li>命令：<code>git diff --cached</code>  比较暂存区的文件和仓库中文件的区别</li>
<li>对比之前某两次提交的文件的差异<ul>
<li>命令:<code>git diff [版本号1] [版本号2] [想比较的文件路径]</code></li>
</ul>
</li>
</ul>
<h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><ul>
<li>命令:<code>git log</code>,可以查看每一次提交的日志</li>
<li>命令:<code>git log --oneline</code> 表示使用简洁的形式输出提交日志</li>
</ul>
<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><ul>
<li>命令:<code>git reset --hard Head~1</code><ul>
<li>这是将代码回退到上上一次提交时的状态</li>
</ul>
</li>
<li>命令:<code>git reset --hard Head~2</code><ul>
<li>回退到上上上次</li>
</ul>
</li>
<li><p>命令:<code>git reset --hard Head~0</code></p>
<ul>
<li>回退到上次提交时的状态,~0可以省略</li>
</ul>
</li>
<li><p>命令:<code>git reset --hard 版本号</code></p>
<ul>
<li>通过每次提交时生成的版本号来回退版本</li>
</ul>
</li>
<li><p>通过<code>git reflog</code>命令可以查看之前所有版本切换的操作记录，可以通过这个命令得到的版本号回退到指定的版本。</p>
<a id="more"></a>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3></li>
<li>命令:<code>git branch [分支名]</code><ul>
<li>创建一个新分支</li>
</ul>
</li>
<li>命令:<code>git branch</code><ul>
<li>查看当前所有的分支</li>
</ul>
</li>
</ul>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><ul>
<li>命令:<code>git checkout [分支名]</code><ul>
<li>切换分支后可以在切换后的分支中进行正常的操作</li>
</ul>
</li>
</ul>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><ul>
<li>命令:<code>git merge [分支名]</code><ul>
<li>git会将指定的分支合并到当前分支.</li>
</ul>
</li>
</ul>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><ul>
<li>命令:<code>git branch -d [分支名]</code><ul>
<li>删除指定分支，-d参数表示要执行删除操作</li>
</ul>
</li>
</ul>
<h3 id="git提交中的冲突"><a href="#git提交中的冲突" class="headerlink" title="git提交中的冲突"></a>git提交中的冲突</h3><ul>
<li>如果git不能自动合并分支，就会有冲突，我们需要手动解决冲突，然后再次提交</li>
</ul>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><h3 id="github与git"><a href="#github与git" class="headerlink" title="github与git"></a>github与git</h3><ul>
<li>git 版本管理工具</li>
<li>github 就是一个网站，只是这个网站提供git服务器的功能</li>
</ul>
<h3 id="上传代码到git服务器-push"><a href="#上传代码到git服务器-push" class="headerlink" title="上传代码到git服务器(push)"></a>上传代码到git服务器(push)</h3><ul>
<li><p>命令:<code>git push [远程服务器地址] [远程服务器的分支]</code></p>
<ul>
<li>示例:<code>git push https://github.com/huoqishi/test002.git master</code></li>
</ul>
</li>
<li><p>上传时可以使用一些简化的命令</p>
<ul>
<li>将远程服务器地址写成变量的形式<ul>
<li><code>git remote add [变量名]  [远程服务器地址]</code></li>
<li>示例:<code>git remote add origin https://github.com/huoqishi/test002.git</code></li>
<li>这样之后就可以直接使用origin来代替git push 后面写的地址了<br><code>git push origin master</code></li>
</ul>
</li>
</ul>
</li>
<li>还可以尽一步简化<ul>
<li>在push时加上-u参数，就会默认建立本地当前分支与远程指定分支的关联,下一次push时就不需要输入分支名了<code>git push origin</code>;</li>
</ul>
</li>
</ul>
<h2 id="git使用ssh方式上传代码与github"><a href="#git使用ssh方式上传代码与github" class="headerlink" title="git使用ssh方式上传代码与github"></a>git使用ssh方式上传代码与github</h2><ul>
<li>git生成公钥和私钥<ul>
<li>命令:<code>ssh-keygen -t rsa</code>生成的公钥与私钥文件会在当用户目录的.ssh目录下.</li>
<li>找到生成的ssh钥匙文件的地址：C盘/用户/用户名/.ssh/id_rsa.pub 找到公钥</li>
<li>在github右上角 –&gt; setting –&gt; ssh设置选项</li>
<li>把我们的公钥拷贝到github当中</li>
<li>以后push代码仓库的时候，使用ssh协议，也就是去使用git开头的那个链接</li>
</ul>
</li>
</ul>
<h3 id="拉取github服务器上的代码及多人协作冲突处理"><a href="#拉取github服务器上的代码及多人协作冲突处理" class="headerlink" title="拉取github服务器上的代码及多人协作冲突处理"></a>拉取github服务器上的代码及多人协作冲突处理</h3><ul>
<li>从服务器拉取代码的方式<ul>
<li>方式一:’git clone git url’</li>
<li>方式二:’git init’<pre><code>+ &apos;git pull url&apos;
</code></pre></li>
</ul>
</li>
<li>git pull和git clone这二种拉取方式的区别：<ul>
<li>用git pull的话默认没有设置origin这个变量，必须自己手动设置(git remote add …..),而用了git clone则不需要了，默认origin这个变量就存在了</li>
</ul>
</li>
</ul>
<h3 id="把代码push到服务器时需要先pull一下"><a href="#把代码push到服务器时需要先pull一下" class="headerlink" title="把代码push到服务器时需要先pull一下"></a>把代码push到服务器时需要先pull一下</h3><ul>
<li>在pull之后如果远程的代码与本地的代码有冲突，git会先自动合并冲突，如果不能自动合并，就必需我们手动去处理冲突。</li>
<li>解决拒绝提交代码<ul>
<li>执行git pull origin master</li>
<li>手动更改代码，解决冲突</li>
<li>执行:’git add’</li>
<li>执行:’git commit</li>
<li>执行:’git pull origin master’</li>
<li>执行:’git push origin master’</li>
</ul>
</li>
<li>如何避免尽量不会出现冲突？ <ul>
<li>在每次push之前执行一次git pull</li>
<li>git pull的作用：<ul>
<li>更新本地仓库至最新改动，相当于先从远程服务器获取最新代码，接着进行自动合并(merge)，如果有冲突会提示你冲突，让你在本地手动解决掉冲突之后，再推送到服务器上面</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="多人共同使用同一个github服务器仓库"><a href="#多人共同使用同一个github服务器仓库" class="headerlink" title="多人共同使用同一个github服务器仓库"></a>多人共同使用同一个github服务器仓库</h3><ul>
<li>第一步、建立好一个github上面的仓库</li>
<li>第二步、点击setting</li>
<li>第三步、点击add collaborator，在里面找到你的小伙伴的用户名</li>
<li>第四步、生成一个邀请链接</li>
<li>第五步、把这个链接发给你的小伙伴，他同意之后就可以把自己写的代码提交到这个仓库了</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Git&quot;&gt;&lt;a href=&quot;#什么是Git&quot; class=&quot;headerlink&quot; title=&quot;什么是Git?&quot;&gt;&lt;/a&gt;什么是Git?&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Git是一款源代码管理工具(版本控制工具)&lt;ul&gt;
&lt;li&gt;我们写的代码需要使用Git进行管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;分布式，集中式版本管理工具&quot;&gt;&lt;a href=&quot;#分布式，集中式版本管理工具&quot; class=&quot;headerlink&quot; title=&quot;分布式，集中式版本管理工具&quot;&gt;&lt;/a&gt;分布式，集中式版本管理工具&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git属于分布式&lt;/li&gt;
&lt;li&gt;svn集中式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;git安装&quot;&gt;&lt;a href=&quot;#git安装&quot; class=&quot;headerlink&quot; title=&quot;git安装&quot;&gt;&lt;/a&gt;git安装&lt;/h3&gt;&lt;h3 id=&quot;git初始化一个仓库&quot;&gt;&lt;a href=&quot;#git初始化一个仓库&quot; class=&quot;headerlink&quot; title=&quot;git初始化一个仓库&quot;&gt;&lt;/a&gt;git初始化一个仓库&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建一个.git隐藏目录&lt;/li&gt;
&lt;li&gt;命令:&lt;code&gt;git init&lt;/code&gt;;&lt;ul&gt;
&lt;li&gt;想在哪个目录创建.git目录，就是哪个目录打开工具然后写命令.&lt;/li&gt;
&lt;li&gt;一般是在项目的根目录执行这个命令.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;自报家门&quot;&gt;&lt;a href=&quot;#自报家门&quot; class=&quot;headerlink&quot; title=&quot;自报家门&quot;&gt;&lt;/a&gt;自报家门&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;配置用户名 : &lt;code&gt;git config user.name &amp;quot;testName&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置邮箱   : &lt;code&gt;git config user.email &amp;quot;test@sina.com&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看配置信息: &lt;code&gt;git config --list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;把代码提交到仓库中&quot;&gt;&lt;a href=&quot;#把代码提交到仓库中&quot; class=&quot;headerlink&quot; title=&quot;把代码提交到仓库中&quot;&gt;&lt;/a&gt;把代码提交到仓库中&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.先把代码添加到暂存区(就相当于放到仓库门口)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令:&lt;code&gt;git add 文件路径&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;示例:&lt;code&gt;git add ./reademe.md&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以使用&lt;code&gt;git add .&lt;/code&gt;这个命令，批量把当前目录下所有修改过的文件添加到暂存区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.把暂存区的文件提交仓库里&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令: &lt;code&gt;git commit -m &amp;quot;注释&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;示例: &lt;code&gt;git commit -m &amp;quot;我们添加了一个新的功能&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-m 表示指定一个字符串，作为提交的说明(相当于注释);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合并add 与commit 命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git commit -a -m &amp;quot;这是使用合并添加与提交的操作&amp;quot;&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;这里-a参数表明把所有修改后的文件一起添加到暂存区.(只是对修改后的文件有效，对于新添加的文件没有作用)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;查看工作区状态&quot;&gt;&lt;a href=&quot;#查看工作区状态&quot; class=&quot;headerlink&quot; title=&quot;查看工作区状态&quot;&gt;&lt;/a&gt;查看工作区状态&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;命令:&lt;code&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;添加忽略文件&quot;&gt;&lt;a href=&quot;#添加忽略文件&quot; class=&quot;headerlink&quot; title=&quot;添加忽略文件&quot;&gt;&lt;/a&gt;添加忽略文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在项目中有一些文件是不需要提交的,我们需要把它忽略掉&lt;/li&gt;
&lt;li&gt;需要在.git文件夹所在目录新建一个名为.gitignore的文件&lt;br&gt;然后在这个文件中写上需要被忽略的文件的路径。&lt;br&gt;示例: /css/a.css&lt;pre&gt;&lt;code&gt;: /css/*.css
: /a.html
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;对比文件差异&quot;&gt;&lt;a href=&quot;#对比文件差异&quot; class=&quot;headerlink&quot; title=&quot;对比文件差异&quot;&gt;&lt;/a&gt;对比文件差异&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;命令: &lt;code&gt;git diff&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;用来比较暂存区文件内容与工作区文件内容的区别&lt;/li&gt;
&lt;li&gt;如果暂存区没有文件，就会将工作与代码与最近一次提交对比&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命令：&lt;code&gt;git diff --cached&lt;/code&gt;  比较暂存区的文件和仓库中文件的区别&lt;/li&gt;
&lt;li&gt;对比之前某两次提交的文件的差异&lt;ul&gt;
&lt;li&gt;命令:&lt;code&gt;git diff [版本号1] [版本号2] [想比较的文件路径]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;查看日志&quot;&gt;&lt;a href=&quot;#查看日志&quot; class=&quot;headerlink&quot; title=&quot;查看日志&quot;&gt;&lt;/a&gt;查看日志&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;命令:&lt;code&gt;git log&lt;/code&gt;,可以查看每一次提交的日志&lt;/li&gt;
&lt;li&gt;命令:&lt;code&gt;git log --oneline&lt;/code&gt; 表示使用简洁的形式输出提交日志&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;版本回退&quot;&gt;&lt;a href=&quot;#版本回退&quot; class=&quot;headerlink&quot; title=&quot;版本回退&quot;&gt;&lt;/a&gt;版本回退&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;命令:&lt;code&gt;git reset --hard Head~1&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;这是将代码回退到上上一次提交时的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命令:&lt;code&gt;git reset --hard Head~2&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;回退到上上上次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令:&lt;code&gt;git reset --hard Head~0&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回退到上次提交时的状态,~0可以省略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令:&lt;code&gt;git reset --hard 版本号&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过每次提交时生成的版本号来回退版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;git reflog&lt;/code&gt;命令可以查看之前所有版本切换的操作记录，可以通过这个命令得到的版本号回退到指定的版本。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="代码提交" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4/"/>
    
  </entry>
  
  <entry>
    <title>vuex学习</title>
    <link href="http://yoursite.com/2017/06/05/vuex%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/06/05/vuex学习/</id>
    <published>2017-06-05T14:29:17.000Z</published>
    <updated>2017-07-10T06:35:42.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解Vuex"><a href="#理解Vuex" class="headerlink" title="理解Vuex"></a>理解Vuex</h1><ul>
<li>运用Vue进行多组件开发时，多个组件间的数据通信和状态管理很难维护，使用Vuex将状态管理单独拎出来，应用统一的方式进行处理，在后期维护的过程中数据的修改和维护就变得简单而清晰了。</li>
</ul>
<h2 id="状态管理模式"><a href="#状态管理模式" class="headerlink" title="状态管理模式"></a>状态管理模式</h2><ul>
<li>vuex的状态自管理应用包含以下几个部分<ul>
<li>state，驱动应用的数据源;</li>
<li>view，以声明方式将state映射到视图； </li>
<li>actions，响应在view上的用户输入导致的状态变化<a id="more"></a>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;理解Vuex&quot;&gt;&lt;a href=&quot;#理解Vuex&quot; class=&quot;headerlink&quot; title=&quot;理解Vuex&quot;&gt;&lt;/a&gt;理解Vuex&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;运用Vue进行多组件开发时，多个组件间的数据通信和状态管理很难维护，使用Vuex将状态管理单独拎出来，应用统一的方式进行处理，在后期维护的过程中数据的修改和维护就变得简单而清晰了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;状态管理模式&quot;&gt;&lt;a href=&quot;#状态管理模式&quot; class=&quot;headerlink&quot; title=&quot;状态管理模式&quot;&gt;&lt;/a&gt;状态管理模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;vuex的状态自管理应用包含以下几个部分&lt;ul&gt;
&lt;li&gt;state，驱动应用的数据源;&lt;/li&gt;
&lt;li&gt;view，以声明方式将state映射到视图； &lt;/li&gt;
&lt;li&gt;actions，响应在view上的用户输入导致的状态变化
    
    </summary>
    
      <category term="Vuex" scheme="http://yoursite.com/categories/Vuex/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="Vuex" scheme="http://yoursite.com/tags/Vuex/"/>
    
      <category term="状态管理" scheme="http://yoursite.com/tags/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>扎实基础JS一</title>
    <link href="http://yoursite.com/2017/06/03/%E6%89%8E%E5%AE%9E%E5%9F%BA%E7%A1%80JS%E4%B8%80/"/>
    <id>http://yoursite.com/2017/06/03/扎实基础JS一/</id>
    <published>2017-06-03T08:08:26.000Z</published>
    <updated>2017-06-03T08:08:26.462Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>扎实基础CSS一</title>
    <link href="http://yoursite.com/2017/06/03/%E6%89%8E%E5%AE%9E%E5%9F%BA%E7%A1%80CSS%E4%B8%80/"/>
    <id>http://yoursite.com/2017/06/03/扎实基础CSS一/</id>
    <published>2017-06-03T08:08:12.000Z</published>
    <updated>2017-07-10T06:35:54.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文本超出显示省略号"><a href="#文本超出显示省略号" class="headerlink" title="文本超出显示省略号"></a>文本超出显示省略号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">width: 300px //要设置宽度</div><div class="line">overflow: hidden;</div><div class="line">white-space: nowrap;</div><div class="line"> text-overflow: ellipsis;</div></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文本超出显示省略号&quot;&gt;&lt;a href=&quot;#文本超出显示省略号&quot; class=&quot;headerlink&quot; title=&quot;文本超出显示省略号&quot;&gt;&lt;/a&gt;文本超出显示省略号&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;width: 300px //要设置宽度&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;overflow: hidden;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;white-space: nowrap;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; text-overflow: ellipsis;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>扎实基础HTML一</title>
    <link href="http://yoursite.com/2017/06/03/%E6%89%8E%E5%AE%9E%E5%9F%BA%E7%A1%80HTML%E4%B8%80/"/>
    <id>http://yoursite.com/2017/06/03/扎实基础HTML一/</id>
    <published>2017-06-03T08:07:54.000Z</published>
    <updated>2017-07-10T06:36:20.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="html5新增的音频和视频"><a href="#html5新增的音频和视频" class="headerlink" title="html5新增的音频和视频"></a>html5新增的音频和视频</h2><ul>
<li>音频audio<code>&lt;audio src=&#39;&#39;&gt;&lt;/audio&gt;</code></li>
<li>视频video<code>&lt;video src=&#39;&#39;&gt;&lt;/video&gt;</code></li>
</ul>
<h2 id="html5语义化标签的使用"><a href="#html5语义化标签的使用" class="headerlink" title="html5语义化标签的使用"></a>html5语义化标签的使用</h2><ol>
<li>头部–header和nav标签</li>
</ol>
<ul>
<li>header头部，body下的直接子元素header一般用于放页面的介绍性的信息如网站名称、logo或者导航栏nav。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;header&gt;</div><div class="line">    &lt;h1&gt;html5语义化标签&lt;/h1&gt;</div><div class="line">    &lt;nav&gt;</div><div class="line">        &lt;h1&gt;导航&lt;/h1&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;章节标签&lt;/li&gt;</div><div class="line">            &lt;li&gt;标题标签&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/nav&gt;</div><div class="line">&lt;/header&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ol>
<li>主体部分——main和section</li>
</ol>
<ul>
<li>main标签表示页面的主体部份，section标签给页面区分不同的章节。section是一个章节标签，构建页面的大纲(outline)。除此外还有nav、artical和aside三个标签能够勾勒页面的轮廓。章节标签通常会带上h1~h6的标题标签。不同的章节标题是独立的，嵌套的章节标题也跟着嵌套。另外多个标题可以用hgroup包括起来，在页面提纲里成为独立的一条内容。</li>
<li><code>&lt;hgroup&gt;</code>标签用于对网页或区段（section）的标题进行组合。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> &lt;main&gt;</div><div class="line">    &lt;section&gt;</div><div class="line">        &lt;hgroup&gt;</div><div class="line">            &lt;h2&gt;章节标签&lt;/h2&gt;</div><div class="line">            &lt;p&gt;为页面区分不同的章节&lt;/p&gt;</div><div class="line">        &lt;/hgroup&gt;</div><div class="line">        &lt;div&gt;包括section article nav aside &lt;/div&gt;</div><div class="line">    &lt;/section&gt;</div><div class="line">    &lt;section&gt;</div><div class="line">        &lt;hgroup&gt;</div><div class="line">            &lt;h2&gt;标题标签&lt;/h2&gt;</div><div class="line">            &lt;p&gt;为不同的章节定义标题&lt;/p&gt;</div><div class="line">        &lt;/hgroup&gt; </div><div class="line">        &lt;div&gt;h1 h2 h3 h4 h5 h6六个标题标签&lt;/div&gt;</div><div class="line">    &lt;/section&gt;</div><div class="line">&lt;/main&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>尾部——footer</li>
</ol>
<ul>
<li>footer和header一样，用在不同的章节里，可以显示该章节（如body整个页面）相关的外链、版权等信息。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;footer&gt;</div><div class="line">        &lt;p&gt;copyright &amp;copy hello, world&lt;/p&gt;</div><div class="line">&lt;/footer&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>div和section、section和article的区别</li>
</ol>
<ul>
<li>div是一个普通的容器，而section不能当作一个普通的容器使用，使用section要让其起outline的作用，而article比section的章节概念更强。article适用于独立性强的内容，如本身就是一篇文章、博客，或者用户的评论等，article比section更加强调需要包含一个标题标签h1~h6。如果使用article的语义性更好的时候，就不用section。或者，内容可再继续细分章节的也应使用article。</li>
<li>章节的内容是独立的，并且可以嵌套</li>
<li>独立是指每个章节都可以有自己的标题标签、header、footer和nav，并且章节可以相互嵌套<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;h1&gt;html标签&lt;/h1&gt;</div><div class="line">    &lt;article&gt;</div><div class="line">        &lt;h1&gt;html5标签&lt;/h1&gt;</div><div class="line">        &lt;section&gt;</div><div class="line">            &lt;h1&gt;标题标签&lt;/h1&gt;</div><div class="line">        &lt;/section&gt;</div><div class="line">        &lt;section&gt;</div><div class="line">            &lt;h1&gt;章节标签&lt;/h1&gt;</div><div class="line">        &lt;/section&gt;</div><div class="line">    &lt;/article&gt;</div><div class="line">    &lt;article&gt;</div><div class="line">        &lt;h1&gt;html4标签&lt;/h1&gt;</div><div class="line">    &lt;/article&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>5 其它常用标签</p>
<ul>
<li><p>figure用作照片及其注释的容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;figure&gt;</div><div class="line">       &lt;img src=&quot;Mars.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">       &lt;figcaption&gt;火星&lt;/figcaption&gt;</div><div class="line">   &lt;/figure&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>aside的内容与页面的主体内容相切，可用作侧边栏</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;html5新增的音频和视频&quot;&gt;&lt;a href=&quot;#html5新增的音频和视频&quot; class=&quot;headerlink&quot; title=&quot;html5新增的音频和视频&quot;&gt;&lt;/a&gt;html5新增的音频和视频&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;音频audio&lt;code&gt;&amp;lt;audio src=&amp;#39;&amp;#39;&amp;gt;&amp;lt;/audio&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;视频video&lt;code&gt;&amp;lt;video src=&amp;#39;&amp;#39;&amp;gt;&amp;lt;/video&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;html5语义化标签的使用&quot;&gt;&lt;a href=&quot;#html5语义化标签的使用&quot; class=&quot;headerlink&quot; title=&quot;html5语义化标签的使用&quot;&gt;&lt;/a&gt;html5语义化标签的使用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;头部–header和nav标签&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;header头部，body下的直接子元素header一般用于放页面的介绍性的信息如网站名称、logo或者导航栏nav。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;header&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;h1&amp;gt;html5语义化标签&amp;lt;/h1&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;nav&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;h1&amp;gt;导航&amp;lt;/h1&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;ul&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;li&amp;gt;章节标签&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;li&amp;gt;标题标签&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/ul&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/nav&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/header&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="html - html5" scheme="http://yoursite.com/categories/html-html5/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>ES6的学习一</title>
    <link href="http://yoursite.com/2017/06/03/ES6%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://yoursite.com/2017/06/03/ES6的学习一/</id>
    <published>2017-06-03T07:57:07.000Z</published>
    <updated>2017-06-03T07:57:07.878Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue脚手架vue-cli1的学习一</title>
    <link href="http://yoursite.com/2017/06/03/vue%E8%84%9A%E6%89%8B%E6%9E%B6vue-cli%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://yoursite.com/2017/06/03/vue脚手架vue-cli的学习一/</id>
    <published>2017-06-03T03:56:27.000Z</published>
    <updated>2017-06-03T07:31:26.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-cli的模板"><a href="#vue-cli的模板" class="headerlink" title="vue-cli的模板"></a>vue-cli的模板</h1><ul>
<li>vue-cli的脚手架项目模板有webpack-simple 和 webpack</li>
<li>两种的区别在于webpack-simple 没有包括Eslint 检查功能等等功能</li>
</ul>
<h1 id="vue-cli的项目结构"><a href="#vue-cli的项目结构" class="headerlink" title="vue-cli的项目结构"></a>vue-cli的项目结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">|-- build                            // 项目构建(webpack)相关代码</div><div class="line">|   |-- build.js                     // 生产环境构建代码</div><div class="line">|   |-- check-version.js             // 检查node、npm等版本</div><div class="line">|   |-- dev-client.js                // 热重载相关</div><div class="line">|   |-- dev-server.js                // 构建本地服务器</div><div class="line">|   |-- utils.js                     // 构建工具相关</div><div class="line">|   |-- webpack.base.conf.js         // webpack基础配置</div><div class="line">|   |-- webpack.dev.conf.js          // webpack开发环境配置</div><div class="line">|   |-- webpack.prod.conf.js         // webpack生产环境配置</div><div class="line">|-- config                           // 项目开发环境配置</div><div class="line">|   |-- dev.env.js                   // 开发环境变量</div><div class="line">|   |-- index.js                     // 项目一些配置变量</div><div class="line">|   |-- prod.env.js                  // 生产环境变量</div><div class="line">|   |-- test.env.js                  // 测试环境变量</div><div class="line">|-- src                              // 源码目录</div><div class="line">|   |-- components                     // vue公共组件</div><div class="line">|   |-- store                          // vuex的状态管理</div><div class="line">|   |-- App.vue                        // 页面入口文件</div><div class="line">|   |-- main.js                        // 程序入口文件，加载各种公共组件</div><div class="line">|-- static                           // 静态文件，比如一些图片，json数据等</div><div class="line">|   |-- data                           // 群聊分析得到的数据用于数据可视化</div><div class="line">|-- .babelrc                         // ES6语法编译配置</div><div class="line">|-- .editorconfig                    // 定义代码格式</div><div class="line">|-- .gitignore                       // git上传需要忽略的文件格式</div><div class="line">|-- README.md                        // 项目说明</div><div class="line">|-- favicon.ico </div><div class="line">|-- index.html                       // 入口页面</div><div class="line">|-- package.json                     // 项目基本信息</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h1><ul>
<li>package.json文件是项目根目录下的一个文件，定义该项目开发所需要的各种模块以及一些项目配置信息（如项目名称、版本、描述、作者等）。<h2 id="自定义npm相关命令"><a href="#自定义npm相关命令" class="headerlink" title="自定义npm相关命令"></a>自定义npm相关命令</h2></li>
<li>在package.json文件里有一个scripts字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;dev&quot;: &quot;node build/dev-server.js&quot;,</div><div class="line">    &quot;build&quot;: &quot;node build/build.js&quot;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在开发环境下，在命令行中运行npm run dev就相当于在执行node build/dev-server.js。所以script字段是用来指定npm相关命令的缩写的。</p>
<h2 id="dependencies字段和devDependencies字段"><a href="#dependencies字段和devDependencies字段" class="headerlink" title="dependencies字段和devDependencies字段"></a>dependencies字段和devDependencies字段</h2><ul>
<li>dependencies字段指定了项目运行时所依赖的模块</li>
<li>devDependencies字段指定了项目开发时所依赖的模块(项目环境依赖)</li>
<li>在命令行中运行npm install命令，会自动安装dependencies和devDependencies字段中的模块。<h2 id="webpack配置相关"><a href="#webpack配置相关" class="headerlink" title="webpack配置相关"></a>webpack配置相关</h2></li>
<li>详情在webpack相关博客<h3 id="dev-server-js"><a href="#dev-server-js" class="headerlink" title="dev-server.js"></a>dev-server.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">...</div><div class="line">// http-proxy可以实现转发所有请求代理到后端真实API地址，以实现前后端开发完全分离</div><div class="line">// 在config/index.js中可以对proxyTable想进行配置</div><div class="line">var proxyMiddleware = require(&apos;http-proxy-middleware&apos;)</div><div class="line">...</div><div class="line">...</div><div class="line">// 热加载要使用webpack-dev-middleware在没有webpack-dev-server的时候进行热加载</div><div class="line">var hotMiddleware = require(&apos;webpack-hot-middleware&apos;)(compiler)</div><div class="line">// 当html-webpack-plugin模板改变是强制进行页面重新加载</div><div class="line">compiler.plugin(&apos;compilation&apos;, function (compilation) &#123;</div><div class="line">  compilation.plugin(&apos;html-webpack-plugin-after-emit&apos;, function (data, cb) &#123;</div><div class="line">    hotMiddleware.publish(&#123; action: &apos;reload&apos; &#125;)</div><div class="line">    cb()</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="webpack-base-conf-js"><a href="#webpack-base-conf-js" class="headerlink" title="webpack.base.conf.js"></a>webpack.base.conf.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">...</div><div class="line">module.export = &#123;</div><div class="line">    // 编译入口文件</div><div class="line">    entry: &#123;&#125;,</div><div class="line">    // 编译输出路径</div><div class="line">    output: &#123;&#125;,</div><div class="line">    // 一些解决方案配置</div><div class="line">    resolve: &#123;&#125;,</div><div class="line">    resolveLoader: &#123;&#125;,</div><div class="line">    module: &#123;</div><div class="line">        // 各种不同类型文件加载器配置</div><div class="line">        loaders: &#123;</div><div class="line">        ...</div><div class="line">        ...</div><div class="line">        // js文件用babel转码</div><div class="line">        &#123;</div><div class="line">            test: /\.js$/,</div><div class="line">            loader: &apos;babel&apos;,</div><div class="line">            include: projectRoot,</div><div class="line">            // 哪些文件不需要转码</div><div class="line">            exclude: /node_modules/</div><div class="line">        &#125;,</div><div class="line">        ...</div><div class="line">        ...</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    // vue文件一些相关配置</div><div class="line">    vue: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="check-version-js"><a href="#check-version-js" class="headerlink" title="check-version.js"></a>check-version.js</h3><ul>
<li>这个文件主要是用来检测当前环境中的node和npm版本和我们需要的是否一致的。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">// 加载语义化版本测试库</div><div class="line">var semver = require(&apos;semver&apos;)</div><div class="line">// 定制控制台日志的输入样式</div><div class="line">var chalk = require(&apos;chalk&apos;)</div><div class="line">// 引入package.json文件</div><div class="line">var packageConfig = require(&apos;../package.json&apos;)</div><div class="line">var exec = function (cmd) &#123;</div><div class="line">  return require(&apos;child_process&apos;)</div><div class="line">    .execSync(cmd).toString().trim()</div><div class="line">&#125;</div><div class="line">// 定义node和npm版本需求所组成的数组</div><div class="line">var versionRequirements = [</div><div class="line">  &#123;</div><div class="line">    name: &apos;node&apos;,</div><div class="line">    currentVersion: semver.clean(process.version),</div><div class="line">    versionRequirement: packageConfig.engines.node</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    name: &apos;npm&apos;,</div><div class="line">    currentVersion: exec(&apos;npm --version&apos;),</div><div class="line">    versionRequirement: packageConfig.engines.npm</div><div class="line">  &#125;</div><div class="line">]</div><div class="line">module.exports = function () &#123;</div><div class="line">  var warnings = []</div><div class="line">  // 依次判断版本是否符合要求</div><div class="line">  for (var i = 0; i &lt; versionRequirements.length; i++) &#123;</div><div class="line">    var mod = versionRequirements[i]</div><div class="line">    if (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) &#123;</div><div class="line">      warnings.push(mod.name + &apos;: &apos; +</div><div class="line">        chalk.red(mod.currentVersion) + &apos; should be &apos; +</div><div class="line">        chalk.green(mod.versionRequirement)</div><div class="line">      )</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><ul>
<li>Babel解释器的配置文件，存放在根目录下。Babel是一个转码器，项目里需要用它将ES6代码转为ES5代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 设定转码规则</div><div class="line">&quot;presets&quot;: [&quot;es2015&quot;, &quot;stage-2&quot;],</div><div class="line">// 转码的一些插件</div><div class="line">&quot;plugins&quot;: [&quot;transform-runtime&quot;],</div><div class="line">&quot;comments&quot;: false</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="editorconfig"><a href="#editorconfig" class="headerlink" title=".editorconfig"></a>.editorconfig</h3><ul>
<li>该文件定义项目的编码规范，编辑器的行为会与.editorconfig 文件中定义的一致，并且其优先级比编辑器自身的设置要高，这在多人合作开发项目时十分有用而且必要。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root = true</div><div class="line"></div><div class="line">[*]    // 对所有文件应用下面的规则</div><div class="line">charset = utf-8                    // 编码规则用utf-8</div><div class="line">indent_style = space               // 缩进用空格</div><div class="line">indent_size = 2                    // 缩进数量为2个空格</div><div class="line">end_of_line = lf                   // 换行符格式</div><div class="line">insert_final_newline = true        // 是否在文件的最后插入一个空行</div><div class="line">trim_trailing_whitespace = true    // 是否删除行尾的空格</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vue-cli的模板&quot;&gt;&lt;a href=&quot;#vue-cli的模板&quot; class=&quot;headerlink&quot; title=&quot;vue-cli的模板&quot;&gt;&lt;/a&gt;vue-cli的模板&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;vue-cli的脚手架项目模板有webpack-simple 和 webpack&lt;/li&gt;
&lt;li&gt;两种的区别在于webpack-simple 没有包括Eslint 检查功能等等功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;vue-cli的项目结构&quot;&gt;&lt;a href=&quot;#vue-cli的项目结构&quot; class=&quot;headerlink&quot; title=&quot;vue-cli的项目结构&quot;&gt;&lt;/a&gt;vue-cli的项目结构&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- build                            // 项目构建(webpack)相关代码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- build.js                     // 生产环境构建代码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- check-version.js             // 检查node、npm等版本&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- dev-client.js                // 热重载相关&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- dev-server.js                // 构建本地服务器&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- utils.js                     // 构建工具相关&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- webpack.base.conf.js         // webpack基础配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- webpack.dev.conf.js          // webpack开发环境配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- webpack.prod.conf.js         // webpack生产环境配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- config                           // 项目开发环境配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- dev.env.js                   // 开发环境变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- index.js                     // 项目一些配置变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- prod.env.js                  // 生产环境变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- test.env.js                  // 测试环境变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- src                              // 源码目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- components                     // vue公共组件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- store                          // vuex的状态管理&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- App.vue                        // 页面入口文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- main.js                        // 程序入口文件，加载各种公共组件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- static                           // 静态文件，比如一些图片，json数据等&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- data                           // 群聊分析得到的数据用于数据可视化&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- .babelrc                         // ES6语法编译配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- .editorconfig                    // 定义代码格式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- .gitignore                       // git上传需要忽略的文件格式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- README.md                        // 项目说明&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- favicon.ico &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- index.html                       // 入口页面&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- package.json                     // 项目基本信息&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="脚手架" scheme="http://yoursite.com/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>webpack的学习一</title>
    <link href="http://yoursite.com/2017/05/24/webpack%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://yoursite.com/2017/05/24/webpack的学习一/</id>
    <published>2017-05-24T13:25:11.000Z</published>
    <updated>2017-05-24T13:25:11.611Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue与后端的交互--axios的使用</title>
    <link href="http://yoursite.com/2017/05/24/Vue%E4%B8%8E%E5%90%8E%E7%AB%AF%E7%9A%84%E4%BA%A4%E4%BA%92-axios%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/05/24/Vue与后端的交互-axios的使用/</id>
    <published>2017-05-24T13:24:29.000Z</published>
    <updated>2017-06-03T08:04:50.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><ul>
<li>基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 node.js 中使用</li>
</ul>
<h1 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h1><ul>
<li>在浏览器中发送 XMLHttpRequests 请求</li>
<li>在 node.js 中发送 http请求</li>
<li>支持 Promise API</li>
<li>拦截请求和响应</li>
<li>转换请求和响应数据</li>
<li>自动转换 JSON 数据</li>
<li>客户端支持保护安全免受 XSRF 攻击 </li>
</ul>
<h1 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h1><ul>
<li><p>可以为每一个请求指定默认配置。</p>
<h2 id="全局-axios-默认配置"><a href="#全局-axios-默认配置" class="headerlink" title="全局 axios 默认配置"></a>全局 axios 默认配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">axios.defaults.baseURL = &apos;https://api.example.com&apos;;</div><div class="line">axios.defaults.headers.common[&apos;Authorization&apos;] = AUTH_TOKEN;</div><div class="line">axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;;</div></pre></td></tr></table></figure>
<h2 id="自定义实例默认配置"><a href="#自定义实例默认配置" class="headerlink" title="自定义实例默认配置"></a>自定义实例默认配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let axiosIns = axios.create(&#123;</div><div class="line">  baseURL: &apos;https://api.example.com&apos;,</div><div class="line">  timeout: 10 * 1000</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="请求方法别名"><a href="#请求方法别名" class="headerlink" title="请求方法别名"></a>请求方法别名</h1><ul>
<li><p>axios.get(url[, config])</p>
</li>
<li><p>axios.delete(url[, config])</p>
</li>
<li><p>axios.head(url[, config])</p>
</li>
<li><p>axios.post(url[, data[, config]])</p>
</li>
<li><p>axios.put(url[, data[, config]])</p>
</li>
<li><p>axios.patch(url[, data[, config]])</p>
<a id="more"></a>
</li>
</ul>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><ul>
<li><p>发送一个 GET 请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// Make a request for a user with a given ID</div><div class="line">axios.get(&apos;/user?ID=12345&apos;)</div><div class="line">  .then(function (response) &#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(function (response) &#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">// Optionally the request above could also be done as</div><div class="line">axios.get(&apos;/user&apos;, &#123;</div><div class="line">    params: &#123;</div><div class="line">      ID: 12345</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  .then(function (response) &#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(function (response) &#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>发送一个 POST 请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">axios.post(&apos;/user&apos;, &#123;</div><div class="line">    firstName: &apos;Fred&apos;,</div><div class="line">    lastName: &apos;Flintstone&apos;</div><div class="line">  &#125;)</div><div class="line">  .then(function (response) &#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(function (response) &#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>发送多个并发请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function getUserAccount() &#123;</div><div class="line">  return axios.get(&apos;/user/12345&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function getUserPermissions() &#123;</div><div class="line">  return axios.get(&apos;/user/12345/permissions&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">axios.all([getUserAccount(), getUserPermissions()])</div><div class="line">  .then(axios.spread(function (acct, perms) &#123;</div><div class="line">    // Both requests are now complete</div><div class="line">  &#125;));</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="axios-API"><a href="#axios-API" class="headerlink" title="axios API"></a>axios API</h1><ul>
<li>可以通过给 axios传递对应的参数来定制请求：axios(config)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">axios(&#123;</div><div class="line">  method: &apos;post&apos;,</div><div class="line">  url: &apos;/user/12345&apos;,</div><div class="line">  data: &#123;</div><div class="line">    firstName: &apos;Fred&apos;,</div><div class="line">    lastName: &apos;Flintstone&apos;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a>请求配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  //用来向服务器发送请求的url地址  </div><div class="line">  url: &apos;/user&apos;, </div><div class="line">  //请求方法，默认是GET方法</div><div class="line">  method: &apos;get&apos;, </div><div class="line">  //基础URL路径，假如url不是绝对路径，如 https://some-domain.com/api/v1/login?name=jack,那么向服务器发送请求的URL将会是baseURL + url</div><div class="line">  baseURL: &apos;https://some-domain.com/api/&apos;, </div><div class="line">  // transformRequest方法允许在请求发送到服务器之前修改该请求，此方法只适用于PUT、POST和PATCH方法中。而且，此方法最后必须返回一个string、ArrayBuffer或者Stream。</div><div class="line">  transformRequest: [function (data) &#123;</div><div class="line">    // Do whatever you want to transform the data</div><div class="line">    return data;</div><div class="line">  &#125;],</div><div class="line">  //transformResponse方法允许在数据传递到then/catch之前修改response数据。此方法最后也要返回数据。</div><div class="line">  transformResponse: [function (data) &#123;</div><div class="line">    // Do whatever you want to transform the data</div><div class="line">    return data;</div><div class="line">  &#125;],</div><div class="line">  // 发送自定义Headers头文件，头文件中包含了http请求的各种信息。</div><div class="line">  headers: &#123;&apos;Content-Type&apos;:&apos;application/json&apos;&#125;,</div><div class="line">  //  params是发送请求的查询参数对象，对象中的数据会被拼接成url?param1=value1&amp;param2=value2。 </div><div class="line">  params: &#123;</div><div class="line">    ID: 12345</div><div class="line">  &#125;,</div><div class="line">  //params参数序列化器</div><div class="line">  paramsSerializer: function(params) &#123;</div><div class="line">    return Qs.stringify(params, &#123;arrayFormat: &apos;brackets&apos;&#125;)</div><div class="line">  &#125;,</div><div class="line">  //data是在发送POST、PUT或者PATCH请求的数据对象。</div><div class="line">  data: &#123;</div><div class="line">    firstName: &apos;Fred&apos;</div><div class="line">  &#125;,</div><div class="line">  //请求超时设置，单位为毫秒</div><div class="line">  timeout: 1000,</div><div class="line">  //表明是否有跨域请求需要用到证书</div><div class="line">  withCredentials: false, // default</div><div class="line">  //adapter允许用户处理更易于测试的请求。返回一个Promise和一个有效的response</div><div class="line">  adapter: function (resolve, reject, config) &#123;</div><div class="line">    /* ... */</div><div class="line">  &#125;,</div><div class="line">  //auth表明提供凭证用于完成http的身份验证。这将会在headers中设置一个Authorization授权信息。自定义Authorization授权要设置在headers中。</div><div class="line">  auth: &#123;</div><div class="line">    username: &apos;janedoe&apos;,</div><div class="line">    password: &apos;s00pers3cret&apos;</div><div class="line">  &#125;</div><div class="line">  //表示服务器将返回响应的数据类型，有arraybuffer、blob、document、json、text、stream这6个类型，默认是json类似数据。</div><div class="line">  responseType: &apos;json&apos;, // default</div><div class="line">  // 用作 xsrf token 值的 cookie 名称</div><div class="line">  xsrfCookieName: &apos;XSRF-TOKEN&apos;, // default</div><div class="line">  // 带有 xsrf token 值 http head 名称</div><div class="line">  xsrfHeaderName: &apos;X-XSRF-TOKEN&apos;, // default</div><div class="line">  // 允许在上传过程中的做一些操作,允许在下载过程中的做一些操作</div><div class="line">  progress: function(progressEvent) &#123;</div><div class="line">    // Do whatever you want with the native progress event</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="响应的数据结构"><a href="#响应的数据结构" class="headerlink" title="响应的数据结构"></a>响应的数据结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  // 服务器返回的数据</div><div class="line">  data: &#123;&#125;,</div><div class="line"></div><div class="line">  // HTTP状态吗</div><div class="line">  status: 200,</div><div class="line"></div><div class="line">  // 服务器返回的消息</div><div class="line">  statusText: &apos;OK&apos;,</div><div class="line"></div><div class="line">  // 返回头</div><div class="line">  headers: &#123;&#125;,</div><div class="line"></div><div class="line">  // 在返回我们的配置</div><div class="line">  config: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;axios&quot;&gt;&lt;a href=&quot;#axios&quot; class=&quot;headerlink&quot; title=&quot;axios&quot;&gt;&lt;/a&gt;axios&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 node.js 中使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;功能特性&quot;&gt;&lt;a href=&quot;#功能特性&quot; class=&quot;headerlink&quot; title=&quot;功能特性&quot;&gt;&lt;/a&gt;功能特性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在浏览器中发送 XMLHttpRequests 请求&lt;/li&gt;
&lt;li&gt;在 node.js 中发送 http请求&lt;/li&gt;
&lt;li&gt;支持 Promise API&lt;/li&gt;
&lt;li&gt;拦截请求和响应&lt;/li&gt;
&lt;li&gt;转换请求和响应数据&lt;/li&gt;
&lt;li&gt;自动转换 JSON 数据&lt;/li&gt;
&lt;li&gt;客户端支持保护安全免受 XSRF 攻击 &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;默认配置&quot;&gt;&lt;a href=&quot;#默认配置&quot; class=&quot;headerlink&quot; title=&quot;默认配置&quot;&gt;&lt;/a&gt;默认配置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以为每一个请求指定默认配置。&lt;/p&gt;
&lt;h2 id=&quot;全局-axios-默认配置&quot;&gt;&lt;a href=&quot;#全局-axios-默认配置&quot; class=&quot;headerlink&quot; title=&quot;全局 axios 默认配置&quot;&gt;&lt;/a&gt;全局 axios 默认配置&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;axios.defaults.baseURL = &amp;apos;https://api.example.com&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;axios.defaults.headers.common[&amp;apos;Authorization&amp;apos;] = AUTH_TOKEN;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;axios.defaults.headers.post[&amp;apos;Content-Type&amp;apos;] = &amp;apos;application/x-www-form-urlencoded&amp;apos;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;自定义实例默认配置&quot;&gt;&lt;a href=&quot;#自定义实例默认配置&quot; class=&quot;headerlink&quot; title=&quot;自定义实例默认配置&quot;&gt;&lt;/a&gt;自定义实例默认配置&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let axiosIns = axios.create(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  baseURL: &amp;apos;https://api.example.com&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  timeout: 10 * 1000&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;请求方法别名&quot;&gt;&lt;a href=&quot;#请求方法别名&quot; class=&quot;headerlink&quot; title=&quot;请求方法别名&quot;&gt;&lt;/a&gt;请求方法别名&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;axios.get(url[, config])&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;axios.delete(url[, config])&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;axios.head(url[, config])&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;axios.post(url[, data[, config]])&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;axios.put(url[, data[, config]])&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;axios.patch(url[, data[, config]])&lt;/p&gt;
    
    </summary>
    
      <category term="axios" scheme="http://yoursite.com/categories/axios/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>Vue-router的API学习</title>
    <link href="http://yoursite.com/2017/05/24/Vue-router%E7%9A%84API%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/05/24/Vue-router的API学习/</id>
    <published>2017-05-24T13:22:40.000Z</published>
    <updated>2017-07-10T06:38:21.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lt-router-link-gt"><a href="#lt-router-link-gt" class="headerlink" title="&lt;router-link&gt;"></a><code>&lt;router-link&gt;</code></h2><ul>
<li><router-link> 组件支持用户在具有路由功能的应用中（点击）导航。 通过 to 属性指定目标地址，默认渲染成带有正确链接的 <a> 标签，可以通过配置 tag 属性生成别的标签.。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。<h3 id="自定义属性-props"><a href="#自定义属性-props" class="headerlink" title="自定义属性(props)"></a>自定义属性(props)</h3></a></router-link></li>
<li><p><code>to</code></p>
<ul>
<li>表示目标路由的链接。当被点击后，内部会立刻把 to 的值传到 router.push()，所以这个值可以是一个字符串或者是描述目标位置的对象。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 字符串 --&gt;</div><div class="line">&lt;router-link to=&quot;home&quot;&gt;Home&lt;/router-link&gt;</div><div class="line">&lt;!-- 渲染结果 --&gt;</div><div class="line">&lt;a href=&quot;home&quot;&gt;Home&lt;/a&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>replace</code>重定向</p>
<ul>
<li>设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，于是导航后不会留下 history 记录。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-link :to=&quot;&#123; path: &apos;/abc&apos;&#125;&quot; replace&gt;&lt;/router-link&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>append</code></p>
<ul>
<li>设置 append 属性后，则在当前（相对）路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b</li>
</ul>
</li>
<li><p><code>tab</code></p>
<ul>
<li>有时候想要 <router-link> 渲染成某种标签，例如 <li>。 于是我们使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;router-link to=&quot;/foo&quot; tag=&quot;li&quot;&gt;foo&lt;/router-link&gt;</div><div class="line">&lt;!-- 渲染结果 --&gt;</div><div class="line">&lt;li&gt;foo&lt;/li&gt;</div></pre></td></tr></table></figure>
</li>
</router-link></li></ul>
</li>
<li><p><code>exact</code></p>
<ul>
<li>“是否激活” 默认类名的依据是 inclusive match （全包含匹配）。 举个例子，如果当前的路径是 /a 开头的，那么 <router-link to="/a"> 也会被设置 CSS 类名。</router-link></li>
<li>按照这个规则，<router-link to="/"> 将会点亮各个路由！想要链接使用 “exact 匹配模式”，则使用 exact 属性：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 这个链接只会在地址为 / 的时候被激活 --&gt;</div><div class="line">&lt;router-link to=&quot;/&quot; exact&gt;</div></pre></td></tr></table></figure>
</router-link></li>
</ul>
</li>
<li><p><code>events</code></p>
<ul>
<li>声明可以用来触发导航的事件。可以是一个字符串或是一个包含字符串的数组。</li>
</ul>
</li>
<li><p><code>active-class</code></p>
<ul>
<li>设置 链接激活时使用的 CSS 类名。默认值可以通过路由的构造选项 linkActiveClass 来全局配置。</li>
</ul>
</li>
<li><p>将”激活时的CSS类名”应用在外层元素</p>
<ul>
<li><p>有时候我们要让 “激活时的CSS类名” 应用在外层元素，而不是 <a> 标签本身，那么可以用 <router-link> 渲染外层元素，包裹着内层的原生 <a> 标签：</a></router-link></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;router-link tag=&quot;li&quot; to=&quot;/foo&quot;&gt;</div><div class="line">  &lt;a&gt;/foo&lt;/a&gt;</div><div class="line">&lt;/router-link&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在这种情况下，<a> 将作为真实的链接（它会获得正确的 href 的），而 “激活时的CSS类名” 则设置到外层的 <li>。</li></a></p>
<a id="more"></a>
<h3 id=""><a href="#" class="headerlink" title=""></a><router-view></router-view></h3></li>
<li><router-view> 组件是一个 functional 组件，渲染路径匹配到的视图组件。<router-view> 渲染的组件还可以内嵌自己的 <router-view>，根据嵌套路径，渲染嵌套组件。</router-view></router-view></router-view></li>
</ul>
</li>
</ul>
<ol>
<li>属性<ul>
<li>name<ul>
<li>如果 <router-view>设置了名称，则会渲染对应的路由配置中 components 下的相应组件。查看 命名视图 中的例子。</router-view></li>
</ul>
</li>
</ul>
</li>
<li>行为表现<ul>
<li>其他属性（非 router-view 使用的属性）都直接传给渲染的组件， 很多时候，每个路由的数据都是包含在路由参数中。</li>
<li>因为它也是个组件，所以可以配合 <transition> 和 <keep-alive> 使用。如果两个结合一起用，要确保在内层使用 <keep-alive>：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;transition&gt;</div><div class="line">    &lt;keep-alive&gt;</div><div class="line">        &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">    &lt;/keep-alive&gt;</div><div class="line">&lt;/transition&gt;</div></pre></td></tr></table></figure>
</keep-alive></keep-alive></transition></li>
</ul>
</li>
</ol>
<h3 id="路由信息对象"><a href="#路由信息对象" class="headerlink" title="路由信息对象"></a>路由信息对象</h3><pre><code>- 一个 route object（路由信息对象） 表示当前激活的路由的状态信息，包含了当前 URL 解析得到的信息，还有 URL 匹配到的 route records（路由记录）。
- route object 是 immutable（不可变） 的，每次成功的导航后都会产生一个新的对象。
</code></pre><h4 id="路由信息对象的属性"><a href="#路由信息对象的属性" class="headerlink" title="路由信息对象的属性"></a>路由信息对象的属性</h4><pre><code>- $route.path
    - 字符串，对应当前路由的路径，总是解析为绝对路径，如 &quot;/foo/bar&quot;。
- $route.params
    - 一个 key/value 对象，包含了 动态片段 和 全匹配片段，如果没有路由参数，就是一个空对象。
- $route.query
    - 一个 key/value 对象，表示 URL 查询参数。例如，对于路径 /foo?user=1，则有 $route.query.user == 1，如果没有查询参数，则是个空对象。
- $route.hash
    - 当前路由的 hash 值 (带 #) ，如果没有 hash 值，则为空字符串。
- $route.fullPath
    - 完成解析后的 URL，包含查询参数和 hash 的完整路径。
- $route.matched
    - 一个数组，包含当前路由的所有嵌套路径片段的 路由记录 。路由记录就是 routes 配置数组中的对象副本（还有在 children 数组）。
    - 当 URL 为 /foo/bar，$route.matched 将会是一个包含从上到下的所有对象（副本）。
- $route.name
    - 当前路由的名称，如果有的话
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lt-router-link-gt&quot;&gt;&lt;a href=&quot;#lt-router-link-gt&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;router-link&amp;gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;router-link&gt; 组件支持用户在具有路由功能的应用中（点击）导航。 通过 to 属性指定目标地址，默认渲染成带有正确链接的 &lt;a&gt; 标签，可以通过配置 tag 属性生成别的标签.。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。&lt;h3 id=&quot;自定义属性-props&quot;&gt;&lt;a href=&quot;#自定义属性-props&quot; class=&quot;headerlink&quot; title=&quot;自定义属性(props)&quot;&gt;&lt;/a&gt;自定义属性(props)&lt;/h3&gt;&lt;/a&gt;&lt;/router-link&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;to&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表示目标路由的链接。当被点击后，内部会立刻把 to 的值传到 router.push()，所以这个值可以是一个字符串或者是描述目标位置的对象。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!-- 字符串 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;router-link to=&amp;quot;home&amp;quot;&amp;gt;Home&amp;lt;/router-link&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!-- 渲染结果 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;a href=&amp;quot;home&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;replace&lt;/code&gt;重定向&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，于是导航后不会留下 history 记录。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;router-link :to=&amp;quot;&amp;#123; path: &amp;apos;/abc&amp;apos;&amp;#125;&amp;quot; replace&amp;gt;&amp;lt;/router-link&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;append&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置 append 属性后，则在当前（相对）路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tab&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有时候想要 &lt;router-link&gt; 渲染成某种标签，例如 &lt;li&gt;。 于是我们使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;router-link to=&amp;quot;/foo&amp;quot; tag=&amp;quot;li&amp;quot;&amp;gt;foo&amp;lt;/router-link&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!-- 渲染结果 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;li&amp;gt;foo&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/router-link&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;exact&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“是否激活” 默认类名的依据是 inclusive match （全包含匹配）。 举个例子，如果当前的路径是 /a 开头的，那么 &lt;router-link to=&quot;/a&quot;&gt; 也会被设置 CSS 类名。&lt;/router-link&gt;&lt;/li&gt;
&lt;li&gt;按照这个规则，&lt;router-link to=&quot;/&quot;&gt; 将会点亮各个路由！想要链接使用 “exact 匹配模式”，则使用 exact 属性：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!-- 这个链接只会在地址为 / 的时候被激活 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;router-link to=&amp;quot;/&amp;quot; exact&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/router-link&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;events&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明可以用来触发导航的事件。可以是一个字符串或是一个包含字符串的数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;active-class&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置 链接激活时使用的 CSS 类名。默认值可以通过路由的构造选项 linkActiveClass 来全局配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将”激活时的CSS类名”应用在外层元素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有时候我们要让 “激活时的CSS类名” 应用在外层元素，而不是 &lt;a&gt; 标签本身，那么可以用 &lt;router-link&gt; 渲染外层元素，包裹着内层的原生 &lt;a&gt; 标签：&lt;/a&gt;&lt;/router-link&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;router-link tag=&amp;quot;li&amp;quot; to=&amp;quot;/foo&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;a&amp;gt;/foo&amp;lt;/a&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/router-link&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在这种情况下，&lt;a&gt; 将作为真实的链接（它会获得正确的 href 的），而 “激活时的CSS类名” 则设置到外层的 &lt;li&gt;。&lt;/li&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue-router" scheme="http://yoursite.com/categories/vue-router/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="路由" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
      <category term="vue-router" scheme="http://yoursite.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>Vue-router的使用一</title>
    <link href="http://yoursite.com/2017/05/24/Vue-router%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%80/"/>
    <id>http://yoursite.com/2017/05/24/Vue-router的使用一/</id>
    <published>2017-05-24T13:22:40.000Z</published>
    <updated>2017-07-10T06:38:29.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-router的使用"><a href="#vue-router的使用" class="headerlink" title="vue-router的使用"></a>vue-router的使用</h2><ul>
<li><p>javascript部分</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">// 0. 使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)</div><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import VueRouter from &apos;vue-router&apos;</div><div class="line"></div><div class="line">Vue.use(VueRouter)</div><div class="line"></div><div class="line">// 1. 定义（路由）组件。</div><div class="line">// 可以从其他文件 import 进来</div><div class="line">import Foo from &apos;@/page/login.vue&apos;</div><div class="line">import Bar from &apos;@/page/login.vue&apos;</div><div class="line"></div><div class="line">// 2. 定义路由</div><div class="line">// 每个路由应该映射一个组件。 其中&quot;component&quot; 可以是</div><div class="line">// 通过 Vue.extend() 创建的组件构造器，</div><div class="line">// 或者，只是一个组件配置对象。</div><div class="line">// 我们晚点再讨论嵌套路由。</div><div class="line">const routes = [</div><div class="line">  &#123; path: &apos;/foo&apos;, component: Foo &#125;,</div><div class="line">  &#123; path: &apos;/bar&apos;, component: Bar &#125;</div><div class="line">]</div><div class="line"></div><div class="line">// 3. 创建 router 实例，然后传 `routes` 配置</div><div class="line">// 你还可以传别的配置参数, 不过先这么简单着吧。</div><div class="line">const router = new VueRouter(&#123;</div><div class="line">  routes // （缩写）相当于 routes: routes</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 4. 创建和挂载根实例。</div><div class="line">// 记得要通过 router 配置参数注入路由，</div><div class="line">// 从而让整个应用都有路由功能</div><div class="line">const app = new Vue(&#123;</div><div class="line">  router</div><div class="line">&#125;).$mount(&apos;#app&apos;)</div><div class="line"></div><div class="line">// 现在，应用已经启动了！</div></pre></td></tr></table></figure>
</li>
<li><p>html部分</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">  &lt;h1&gt;Hello App!&lt;/h1&gt;</div><div class="line">  &lt;p&gt;</div><div class="line">    &lt;!-- 使用 router-link 组件来导航. --&gt;</div><div class="line">    &lt;!-- 通过传入 `to` 属性指定链接. --&gt;</div><div class="line">    &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</div><div class="line">    &lt;router-link to=&quot;/foo&quot;&gt;Go to Foo&lt;/router-link&gt;</div><div class="line">    &lt;router-link to=&quot;/bar&quot;&gt;Go to Bar&lt;/router-link&gt;</div><div class="line">  &lt;/p&gt;</div><div class="line">  &lt;!-- 路由出口 --&gt;</div><div class="line">  &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</div><div class="line">  &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="vue动态路由的设置"><a href="#vue动态路由的设置" class="headerlink" title="vue动态路由的设置"></a>vue动态路由的设置</h2><ol>
<li><p>使用场景：例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用『动态路径参数』</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const User = &#123;</div><div class="line">  template: &apos;&lt;div&gt;User&lt;/div&gt;&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const router = new VueRouter(&#123;</div><div class="line">  routes: [</div><div class="line">    // 动态路径参数 以冒号开头</div><div class="line">    &#123; path: &apos;/user/:id&apos;, component: User &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line">// /user/foo 和 /user/bar 都将映射到相同的路由</div></pre></td></tr></table></figure>
</li>
<li><p>一个『路径参数』使用冒号 : 标记。当匹配到一个路由时，参数值会被设置到 this.$route.params，可以在每个组件内使用.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 我们可以更新 User 的模板，输出当前用户的 ID</div><div class="line">const User = &#123;</div><div class="line">  template: &apos;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>响应路由参数的变化</p>
<ul>
<li>当使用路由参数时，例如从 /user/foo 导航到 user/bar，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会再被调用。</li>
<li>想对路由参数的变化作出响应的话，你可以简单地 watch（监测变化） $route 对象：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const User = &#123;</div><div class="line">  template: &apos;...&apos;,</div><div class="line">  watch: &#123;</div><div class="line">    &apos;$route&apos; (to, from) &#123;</div><div class="line">      // 对路由变化作出响应...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>路由匹配优先级</p>
<ul>
<li>有时候，同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：谁先定义的，谁的优先级就最高。</li>
</ul>
</li>
</ol>
<h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><ol>
<li><p>使用children配置来设置嵌套路由 注意事项：以 / 开头的嵌套路径会被当作根路径。 这让你充分的使用嵌套组件而无须设置嵌套的路径。children 配置就是像 routes 配置一样的路由配置数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123; path: &apos;/user/:id&apos;, component: User,</div><div class="line">      children: [</div><div class="line">        &#123;</div><div class="line">          // 当 /user/:id/profile 匹配成功，</div><div class="line">          // UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中</div><div class="line">          path: &apos;profile&apos;,</div><div class="line">          component: UserProfile</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          // 当 /user/:id/posts 匹配成功</div><div class="line">          // UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中</div><div class="line">          path: &apos;posts&apos;,</div><div class="line">          component: UserPosts</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>基于上面的配置，当你访问 /user/foo 时，User 的出口是不会渲染任何东西，这是因为没有匹配到合适的子路由。如果你想要渲染点什么，可以提供一个 空的 子路由</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/user/:id&apos;, component: User,</div><div class="line">      children: [</div><div class="line">        // 当 /user/:id 匹配成功，</div><div class="line">        // UserHome 会被渲染在 User 的 &lt;router-view&gt; 中</div><div class="line">        &#123; path: &apos;&apos;, component: UserHome &#125;,</div><div class="line"></div><div class="line">        // ...其他子路由</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="用JS控制导航"><a href="#用JS控制导航" class="headerlink" title="用JS控制导航"></a>用JS控制导航</h2><ol>
<li><p><code>router.push(location)</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">声明式: &lt;router-link :to=&quot;...&quot;&gt;	编程式: router.push(...)</div></pre></td></tr></table></figure>
<ul>
<li>除了使用 <code>&lt;router-link&gt;</code> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。</li>
<li>想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</li>
<li>当你点击 <code>&lt;router-link&gt;</code> 时，这个方法会在内部调用，所以说，点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code> 等同于调用 router.push(…)。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 字符串</div><div class="line">router.push(&apos;home&apos;)</div><div class="line"></div><div class="line">// 对象</div><div class="line">router.push(&#123; path: &apos;home&apos; &#125;)</div><div class="line"></div><div class="line">// 命名的路由</div><div class="line">router.push(&#123; name: &apos;user&apos;, params: &#123; userId: 123 &#125;&#125;)</div><div class="line"></div><div class="line">// 带查询参数，变成 /register?plan=private</div><div class="line">router.push(&#123; path: &apos;register&apos;, query: &#123; plan: &apos;private&apos; &#125;&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>router.replace(location)</code></p>
</li>
</ol>
<ul>
<li>它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">声明式: &lt;router-link :to=&quot;...&quot; replace&gt;	编程式: router.replace(...)</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li><code>router.go(n)</code></li>
</ol>
<ul>
<li>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 在浏览器记录中前进一步，等同于 history.forward()</div><div class="line">router.go(1)</div><div class="line"></div><div class="line">// 后退一步记录，等同于 history.back()</div><div class="line">router.go(-1)</div><div class="line"></div><div class="line">// 前进 3 步记录</div><div class="line">router.go(3)</div><div class="line"></div><div class="line">// 如果 history 记录不够用，那就默默地失败呗</div><div class="line">router.go(-100)</div><div class="line">router.go(100)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><ul>
<li>通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。你可以在创建 Router 实例的时候，在 routes 配置中给某个路由设置名称。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/user/:userId&apos;,</div><div class="line">      name: &apos;user&apos;,</div><div class="line">      component: User</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h2><ul>
<li><p>使用场景：同时（同级）展示多个视图，而不是嵌套展示，例如创建一个布局，有 sidebar（侧导航） 和 main（主内容） 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;router-view class=&quot;view one&quot;&gt;&lt;/router-view&gt;</div><div class="line">&lt;router-view class=&quot;view two&quot; name=&quot;a&quot;&gt;&lt;/router-view&gt;</div><div class="line">&lt;router-view class=&quot;view three&quot; name=&quot;b&quot;&gt;&lt;/router-view&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件。确保正确使用 components 配置（带上 s）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/&apos;,</div><div class="line">      components: &#123;</div><div class="line">        default: Foo,</div><div class="line">        a: Bar,</div><div class="line">        b: Baz</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="重定向-和-别名"><a href="#重定向-和-别名" class="headerlink" title="重定向 和 别名"></a>重定向 和 别名</h2><ol>
<li><p>重定向</p>
<ul>
<li><p>重定向也是通过 routes 配置来完成，下面例子是从 /a 重定向到 /b：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123;</div><div class="line">    routes: [</div><div class="line">        &#123; path: &apos;/a&apos;, redirect: &apos;/b&apos; &#125;</div><div class="line">    ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>重定向的目标也可以是一个命名的路由</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123;</div><div class="line">    routes: [</div><div class="line">        &#123; path: &apos;/a&apos;, redirect: &#123; name: &apos;foo&apos; &#125;&#125;</div><div class="line">    ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>甚至是一个方法，动态返回重定向目标：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123;</div><div class="line">    routes: [</div><div class="line">        &#123; path: &apos;/a&apos;, redirect: to =&gt; &#123;</div><div class="line">        // 方法接收 目标路由 作为参数</div><div class="line">        // return 重定向的 字符串路径/路径对象</div><div class="line">        &#125;&#125;</div><div class="line">    ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>别名</p>
</li>
</ol>
<ul>
<li>/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123; path: &apos;/a&apos;, component: A, alias: &apos;/b&apos; &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="HTML5-History-模式"><a href="#HTML5-History-模式" class="headerlink" title="HTML5 History 模式"></a>HTML5 History 模式</h2><ul>
<li>vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</li>
<li>如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123;</div><div class="line">  mode: &apos;history&apos;,</div><div class="line">  routes: [...]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vue-router的使用&quot;&gt;&lt;a href=&quot;#vue-router的使用&quot; class=&quot;headerlink&quot; title=&quot;vue-router的使用&quot;&gt;&lt;/a&gt;vue-router的使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;javascript部分&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 0. 使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import Vue from &amp;apos;vue&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import VueRouter from &amp;apos;vue-router&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.use(VueRouter)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 1. 定义（路由）组件。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 可以从其他文件 import 进来&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import Foo from &amp;apos;@/page/login.vue&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import Bar from &amp;apos;@/page/login.vue&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 2. 定义路由&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 每个路由应该映射一个组件。 其中&amp;quot;component&amp;quot; 可以是&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 通过 Vue.extend() 创建的组件构造器，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 或者，只是一个组件配置对象。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 我们晚点再讨论嵌套路由。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const routes = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123; path: &amp;apos;/foo&amp;apos;, component: Foo &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123; path: &amp;apos;/bar&amp;apos;, component: Bar &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 3. 创建 router 实例，然后传 `routes` 配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 你还可以传别的配置参数, 不过先这么简单着吧。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const router = new VueRouter(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  routes // （缩写）相当于 routes: routes&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 4. 创建和挂载根实例。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 记得要通过 router 配置参数注入路由，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 从而让整个应用都有路由功能&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const app = new Vue(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  router&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;).$mount(&amp;apos;#app&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 现在，应用已经启动了！&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;html部分&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script src=&amp;quot;https://unpkg.com/vue/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script src=&amp;quot;https://unpkg.com/vue-router/dist/vue-router.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;h1&amp;gt;Hello App!&amp;lt;/h1&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;!-- 使用 router-link 组件来导航. --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;!-- 通过传入 `to` 属性指定链接. --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;!-- &amp;lt;router-link&amp;gt; 默认会被渲染成一个 `&amp;lt;a&amp;gt;` 标签 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;router-link to=&amp;quot;/foo&amp;quot;&amp;gt;Go to Foo&amp;lt;/router-link&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;router-link to=&amp;quot;/bar&amp;quot;&amp;gt;Go to Bar&amp;lt;/router-link&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;!-- 路由出口 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;!-- 路由匹配到的组件将渲染在这里 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="vue-router" scheme="http://yoursite.com/categories/vue-router/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="路由" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
      <category term="vue-router" scheme="http://yoursite.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>Vue-router的使用一</title>
    <link href="http://yoursite.com/2017/05/24/Vue-router%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/05/24/Vue-router的使用二/</id>
    <published>2017-05-24T13:22:40.000Z</published>
    <updated>2017-07-10T06:38:37.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航钩子"><a href="#导航钩子" class="headerlink" title="导航钩子"></a>导航钩子</h2><ul>
<li>vue-router 提供的导航钩子主要用来拦截导航，让它完成跳转或取消。有多种方式可以在路由导航发生时执行钩子：全局的, 单个路由独享的, 或者组件级的</li>
</ul>
<ol>
<li><p>全局钩子 </p>
<ul>
<li><p>可以使用 router.beforeEach 注册一个全局的 before 钩子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123; ... &#125;)</div><div class="line"></div><div class="line">router.beforeEach((to, from, next) =&gt; &#123;</div><div class="line">    // ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>当一个导航触发时，全局的 before 钩子按照创建顺序调用。钩子是异步解析执行，此时导航在所有钩子 resolve 完之前一直处于 等待中</p>
</li>
<li>钩子方法接收三个参数：<ul>
<li>to: Route: 即将要进入的目标 路由对象</li>
<li>from: Route: 当前导航正要离开的路由</li>
<li>next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。<ul>
<li>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed （确认的）。</li>
<li>next(false): 中断当前的导航。如果浏览器的 URL 改变了（可能是用户手动或者浏览器后退按钮），那么 URL 地址会重置到 from 路由对应的地址。</li>
<li>next(‘/‘) 或者 next({ path: ‘/‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>某个路由独享的钩子<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/foo&apos;,</div><div class="line">      component: Foo,</div><div class="line">      beforeEnter: (to, from, next) =&gt; &#123;</div><div class="line">        // ...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<ol>
<li>组件内钩子<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const Foo = &#123;</div><div class="line">  template: `...`,</div><div class="line">  beforeRouteEnter (to, from, next) &#123;</div><div class="line">    // 在渲染该组件的对应路由被 confirm 前调用</div><div class="line">    // 不！能！获取组件实例 `this`</div><div class="line">    // 因为当钩子执行前，组件实例还没被创建</div><div class="line">  &#125;,</div><div class="line">  beforeRouteUpdate (to, from, next) &#123;</div><div class="line">    // 在当前路由改变，但是该组件被复用时调用</div><div class="line">    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</div><div class="line">    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</div><div class="line">    // 可以访问组件实例 `this`</div><div class="line">  &#125;,</div><div class="line">  beforeRouteLeave (to, from, next) &#123;</div><div class="line">    // 导航离开该组件的对应路由时调用</div><div class="line">    // 可以访问组件实例 `this`</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>beforeRouteEnter 钩子 不能 访问 this，因为钩子在导航确认前被调用,因此即将登场的新组件还没被创建。不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">beforeRouteEnter (to, from, next) &#123;</div><div class="line">  next(vm =&gt; &#123;</div><div class="line">    // 通过 `vm` 访问组件实例</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="识别路由，为路由设置元信息"><a href="#识别路由，为路由设置元信息" class="headerlink" title="识别路由，为路由设置元信息"></a>识别路由，为路由设置元信息</h2><ul>
<li><p>定义路由的时候配置meta字段来识别路由</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/foo&apos;,</div><div class="line">      component: Foo,</div><div class="line">      children: [</div><div class="line">        &#123;</div><div class="line">          path: &apos;bar&apos;,</div><div class="line">          component: Bar,</div><div class="line">          // a meta field</div><div class="line">          meta: &#123; requiresAuth: true &#125;</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>访问meta字段来判断路由</p>
<ul>
<li>routes 配置中的每个路由对象为 路由记录。路由记录可以是嵌套的，因此，当一个路由匹配成功后，他可能匹配多个路由记录</li>
<li>路由匹配到的所有路由记录会暴露为 $route 对象（还有在导航钩子中的 route 对象）的 $route.matched 数组</li>
<li>通过遍历 $route.matched 来检查路由记录中的 meta字段,来识别路由<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">    router.beforeEach((to, from, next) =&gt; &#123;</div><div class="line">  if (to.matched.some(record =&gt; record.meta.requiresAuth)) &#123;</div><div class="line">    // this route requires auth, check if logged in</div><div class="line">    // if not, redirect to login page.</div><div class="line">    if (!auth.loggedIn()) &#123;</div><div class="line">      next(&#123;</div><div class="line">        path: &apos;/login&apos;,</div><div class="line">        query: &#123; redirect: to.fullPath &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125; else &#123;</div><div class="line">      next()</div><div class="line">    &#125;</div><div class="line">  &#125; else &#123;</div><div class="line">    next() // 确保一定要调用 next()</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">router.beforeEach((to,from,next) =&gt; &#123;</div><div class="line">    //只有配置了meta字段的路由才会判断</div><div class="line">    if(to.meta.requireAuth) &#123;</div><div class="line">    //判断是不是主代理商</div><div class="line">      if (authStatus==1) &#123;</div><div class="line">        next();</div><div class="line">      &#125;else &#123;</div><div class="line">        globStatus=true;</div><div class="line">        next(&#123;</div><div class="line">          path: &apos;/&apos;,</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;else &#123;</div><div class="line">        next();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="滚动行为"><a href="#滚动行为" class="headerlink" title="滚动行为"></a>滚动行为</h2><ul>
<li>使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。 vue-router 能做到，而且更好，它让你可以自定义路由切换时页面如何滚动。注意: 这个功能只在 HTML5 history 模式下可用</li>
<li>当创建一个 Router 实例，你可以提供一个 scrollBehavior 方法：scrollBehavior 方法接收 to 和 from 路由对象。第三个参数 savedPosition 当且仅当 popstate 导航 (通过浏览器的 前进/后退 按钮触发) 时才可用。</li>
<li>如果返回一个布尔假的值，或者是一个空对象，那么不会发生滚动。返回 savedPosition，在按下 后退/前进 按钮时，就会像浏览器的原生表现那样：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">scrollBehavior (to, from, savedPosition) &#123;</div><div class="line">  if (savedPosition) &#123;</div><div class="line">    return savedPosition</div><div class="line">  &#125; else &#123;</div><div class="line">    return &#123; x: 0, y: 0 &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><ol>
<li><p>导航完成之后获取</p>
<ul>
<li>当你使用这种方式时，我们会马上导航和渲染组件，然后在组件的 created 钩子中获取数据。这让我们有机会在数据获取期间展示一个 loading 状态，还可以在不同视图间展示不同的 loading 状态。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;post&quot;&gt;</div><div class="line">    &lt;div class=&quot;loading&quot; v-if=&quot;loading&quot;&gt;</div><div class="line">      Loading...</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div v-if=&quot;error&quot; class=&quot;error&quot;&gt;</div><div class="line">      &#123;&#123; error &#125;&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div v-if=&quot;post&quot; class=&quot;content&quot;&gt;</div><div class="line">      &lt;h2&gt;&#123;&#123; post.title &#125;&#125;&lt;/h2&gt;</div><div class="line">      &lt;p&gt;&#123;&#123; post.body &#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">export default &#123;</div><div class="line">  data () &#123;</div><div class="line">    return &#123;</div><div class="line">      loading: false,</div><div class="line">      post: null,</div><div class="line">      error: null</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  created () &#123;</div><div class="line">    // 组件创建完后获取数据，</div><div class="line">    // 此时 data 已经被 observed 了</div><div class="line">    this.fetchData()</div><div class="line">  &#125;,</div><div class="line">  watch: &#123;</div><div class="line">    // 如果路由有变化，会再次执行该方法</div><div class="line">    &apos;$route&apos;: &apos;fetchData&apos;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    fetchData () &#123;</div><div class="line">      this.error = this.post = null</div><div class="line">      this.loading = true</div><div class="line">      // replace getPost with your data fetching util / API wrapper</div><div class="line">      getPost(this.$route.params.id, (err, post) =&gt; &#123;</div><div class="line">        this.loading = false</div><div class="line">        if (err) &#123;</div><div class="line">          this.error = err.toString()</div><div class="line">        &#125; else &#123;</div><div class="line">          this.post = post</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>导航完成之前获取</p>
</li>
</ol>
<ul>
<li>通过这种方式，我们在导航转入新的路由前获取数据。我们可以在接下来的组件的 beforeRouteEnter 钩子中获取数据，当数据获取成功后只调用 next 方法。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">export default &#123;</div><div class="line">  data () &#123;</div><div class="line">    return &#123;</div><div class="line">      post: null,</div><div class="line">      error: null</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  beforeRouteEnter (to, from, next) &#123;</div><div class="line">    getPost(to.params.id, (err, post) =&gt; </div><div class="line">      if (err) &#123;</div><div class="line">        // display some global error message</div><div class="line">        next(false)</div><div class="line">      &#125; else &#123;</div><div class="line">        next(vm =&gt; &#123;</div><div class="line">          vm.post = post</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  // 路由改变前，组件就已经渲染完了</div><div class="line">  // 逻辑稍稍不同</div><div class="line">  watch: &#123;</div><div class="line">    $route () &#123;</div><div class="line">      this.post = null</div><div class="line">      getPost(this.$route.params.id, (err, post) =&gt; &#123;</div><div class="line">        if (err) &#123;</div><div class="line">          this.error = err.toString()</div><div class="line">        &#125; else &#123;</div><div class="line">          this.post = post</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导航钩子&quot;&gt;&lt;a href=&quot;#导航钩子&quot; class=&quot;headerlink&quot; title=&quot;导航钩子&quot;&gt;&lt;/a&gt;导航钩子&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;vue-router 提供的导航钩子主要用来拦截导航，让它完成跳转或取消。有多种方式可以在路由导航发生时执行钩子：全局的, 单个路由独享的, 或者组件级的&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;全局钩子 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以使用 router.beforeEach 注册一个全局的 before 钩子&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;const router = new VueRouter(&amp;#123; ... &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;router.beforeEach((to, from, next) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当一个导航触发时，全局的 before 钩子按照创建顺序调用。钩子是异步解析执行，此时导航在所有钩子 resolve 完之前一直处于 等待中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;钩子方法接收三个参数：&lt;ul&gt;
&lt;li&gt;to: Route: 即将要进入的目标 路由对象&lt;/li&gt;
&lt;li&gt;from: Route: 当前导航正要离开的路由&lt;/li&gt;
&lt;li&gt;next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。&lt;ul&gt;
&lt;li&gt;next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed （确认的）。&lt;/li&gt;
&lt;li&gt;next(false): 中断当前的导航。如果浏览器的 URL 改变了（可能是用户手动或者浏览器后退按钮），那么 URL 地址会重置到 from 路由对应的地址。&lt;/li&gt;
&lt;li&gt;next(‘/‘) 或者 next({ path: ‘/‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;某个路由独享的钩子&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;const router = new VueRouter(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  routes: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      path: &amp;apos;/foo&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      component: Foo,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      beforeEnter: (to, from, next) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="vue-router" scheme="http://yoursite.com/categories/vue-router/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="路由" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
      <category term="vue-router" scheme="http://yoursite.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js学习一</title>
    <link href="http://yoursite.com/2017/05/24/Vue-js%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://yoursite.com/2017/05/24/Vue-js学习一/</id>
    <published>2017-05-24T13:21:33.000Z</published>
    <updated>2017-06-27T08:59:36.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VueJs的单文件组件"><a href="#VueJs的单文件组件" class="headerlink" title="VueJs的单文件组件"></a>VueJs的单文件组件</h1><ul>
<li>vuejs 自定义了一种.vue文件，可以把html, css, js 写到一个文件中，从而实现了对一个组件的封装， 一个.vue 文件就是一个单独的组件。</li>
<li>.vue文件是自定义的，浏览器不认识，所以需要对该文件进行解析，在webpack构建中，需要安装vue-loader 对.vue文件进行解析。</li>
<li>好处：项目更易于维护，代码模块化清晰明了，能够使用构建工具开发更有效率</li>
</ul>
<h1 id="生产环境的部署"><a href="#生产环境的部署" class="headerlink" title="生产环境的部署"></a>生产环境的部署</h1><ul>
<li>使用vue的脚手架<code>vue-cli</code>来配置</li>
</ul>
<h1 id="vue的过滤器"><a href="#vue的过滤器" class="headerlink" title="vue的过滤器"></a>vue的过滤器</h1><ul>
<li><p>过滤器可以用在mustache 插值和 v-bind 表达式即:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;message | capitalize&#125;&#125;</div><div class="line">&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>过滤器方法注册在<code>filters</code>函数中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">filters: &#123;</div><div class="line">    capitalize: function (value) &#123;</div><div class="line">      if (!value) return &apos;&apos;</div><div class="line">      value = value.toString()</div><div class="line">      return value.charAt(0).toUpperCase() + value.slice(1)</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="vue的计算属性"><a href="#vue的计算属性" class="headerlink" title="vue的计算属性"></a>vue的计算属性</h1><ul>
<li>计算属性方法写在<code>computed</code>函数中<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">data: &#123;</div><div class="line">            message: &apos;Hello&apos;</div><div class="line">        &#125;,</div><div class="line">computed: &#123;</div><div class="line">            reversedMessage: function () &#123;</div><div class="line">                return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;);</div><div class="line">            &#125;</div><div class="line">        &#125;,</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h1 id="vue基本指令"><a href="#vue基本指令" class="headerlink" title="vue基本指令"></a>vue基本指令</h1><ul>
<li>v-for<ul>
<li>vue的迭代渲染数据必须使用特定语法<code>item in items</code></li>
<li>可以为数组索引指定别名(或者用于对象的键)<code>(item, index) in items</code></li>
<li>vueJs推荐提供一个 key 的特殊属性来做提示,以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，需要为每项提供一个唯一 key 属性<code>v-for=&quot;item in items&quot; :key=&quot;item.id&quot;</code></li>
</ul>
</li>
<li>v-show<ul>
<li>v-show 是简单地切换元素的 CSS 属性 display,用来显示或者隐藏元素</li>
<li>v-show 必须提供布尔值，不支持 <code>&lt;template&gt;</code> 语法，也不支持 <code>v-else</code>。</li>
</ul>
</li>
<li>v-if<ul>
<li>根据表达式的值的真假条件渲染元素</li>
</ul>
</li>
<li>v-else-if<ul>
<li>前一兄弟元素必须有 v-if 或 v-else-if</li>
</ul>
</li>
<li>v-else<ul>
<li>不需要表达式 前一兄弟元素必须有 v-if 或 v-else-if</li>
</ul>
</li>
<li>v-text<ul>
<li>绑定数据，只能渲染成文本格式<code>&lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;</code></li>
</ul>
</li>
<li>v-html<ul>
<li>绑定输出真正的HTML格式<code>&lt;div v-html=&quot;rawHtml&quot;&gt;&lt;/div&gt;</code></li>
</ul>
</li>
<li><p>v-bind</p>
<ul>
<li>为元素动态地绑定一个或多个特性，或一个组件 prop 到表达式。</li>
<li><code>v-bind</code>缩写：例<code>&lt;img v-bind:src=&quot;imageSrc&quot;&gt;</code>等同<code>&lt;img :src=&quot;imageSrc&quot;&gt;</code></li>
<li>class和style的动态绑定<ul>
<li><code>&lt;div v-bind:class=&quot;{ active: isActive }&quot;&gt;&lt;/div&gt;</code>类active是否起作用取决于属性<code>isActive</code> 是否为真值,<code>isActive</code>必须是布尔值</li>
<li>可以在对象中传入更多属性用来动态切换多个 class <code>v-bind:class=&quot;{ active: isActive, &#39;text-danger&#39;: hasError }</code></li>
<li>数组语法<code>v-bind:class=&quot;[{ active: isActive }, errorClass]</code></li>
<li>绑定内联样式：<code>&lt;div v-bind:style=&quot;{ color: activeColor, fontSize: fontSize + &#39;px&#39; }&quot;&gt;&lt;/div&gt;</code></li>
<li>绑定到一个样式对象：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;</div><div class="line">data: &#123;</div><div class="line">    styleObject: &#123;</div><div class="line">    color: &apos;red&apos;,</div><div class="line">    fontSize: &apos;13px&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>v-once </p>
<ul>
<li>只渲染元素和组件一次。随后的重新渲染,元素/组件及其所有的子节点将被视为静态内容并跳过。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;VueJs的单文件组件&quot;&gt;&lt;a href=&quot;#VueJs的单文件组件&quot; class=&quot;headerlink&quot; title=&quot;VueJs的单文件组件&quot;&gt;&lt;/a&gt;VueJs的单文件组件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;vuejs 自定义了一种.vue文件，可以把html, css, js 写到一个文件中，从而实现了对一个组件的封装， 一个.vue 文件就是一个单独的组件。&lt;/li&gt;
&lt;li&gt;.vue文件是自定义的，浏览器不认识，所以需要对该文件进行解析，在webpack构建中，需要安装vue-loader 对.vue文件进行解析。&lt;/li&gt;
&lt;li&gt;好处：项目更易于维护，代码模块化清晰明了，能够使用构建工具开发更有效率&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;生产环境的部署&quot;&gt;&lt;a href=&quot;#生产环境的部署&quot; class=&quot;headerlink&quot; title=&quot;生产环境的部署&quot;&gt;&lt;/a&gt;生产环境的部署&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用vue的脚手架&lt;code&gt;vue-cli&lt;/code&gt;来配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;vue的过滤器&quot;&gt;&lt;a href=&quot;#vue的过滤器&quot; class=&quot;headerlink&quot; title=&quot;vue的过滤器&quot;&gt;&lt;/a&gt;vue的过滤器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;过滤器可以用在mustache 插值和 v-bind 表达式即:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&amp;#123;message | capitalize&amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div v-bind:id=&amp;quot;rawId | formatId&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;过滤器方法注册在&lt;code&gt;filters&lt;/code&gt;函数中&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;filters: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    capitalize: function (value) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      if (!value) return &amp;apos;&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      value = value.toString()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      return value.charAt(0).toUpperCase() + value.slice(1)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;vue的计算属性&quot;&gt;&lt;a href=&quot;#vue的计算属性&quot; class=&quot;headerlink&quot; title=&quot;vue的计算属性&quot;&gt;&lt;/a&gt;vue的计算属性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;计算属性方法写在&lt;code&gt;computed&lt;/code&gt;函数中&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;data: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            message: &amp;apos;Hello&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;computed: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            reversedMessage: function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                return this.message.split(&amp;apos;&amp;apos;).reverse().join(&amp;apos;&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
</feed>
