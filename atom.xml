<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汤国斌的博客</title>
  
  <subtitle>学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-04T15:20:38.734Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>汤国斌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cookie和Session</title>
    <link href="http://yoursite.com/2018/06/03/Cookie%E5%92%8CSession/"/>
    <id>http://yoursite.com/2018/06/03/Cookie和Session/</id>
    <published>2018-06-03T07:34:59.000Z</published>
    <updated>2018-06-04T15:20:38.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ul><li>Cookie是什么<ul><li>用户端保存请求信息的机制，在HTTP请求头中带上Cookie,用来让服务器识别请求.</li><li>格式：分号分隔的多个key-value字段</li><li>存储在本地的加密文件中</li><li>有域名和路径的限制</li></ul></li><li><p>JavaScript中的Cookie</p><ul><li>通过<code>document.cookie</code>来读取写入Cookie</li><li>Cookie的属性<ul><li>name: Cookie名称</li><li>domain: Cookie生效的域名</li><li>path: Cookie生效的路径</li><li>expires: Cookie过期时间</li><li>HttpOnly: 用户端不可更改</li></ul></li><li><p>删除Cookie的方法：设置expires(过期时间)为失效时间或为0;</p><a id="more"></a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Cookie是什么&lt;ul&gt;
&lt;li&gt;用户端保存请求信息的机制，在HTTP请求头中带上Cookie,用来让服务器识别请求.&lt;/li&gt;
&lt;li&gt;格式：分号分隔的多个key-value字段&lt;/li&gt;
&lt;li&gt;存储在本地的加密文件中&lt;/li&gt;
&lt;li&gt;有域名和路径的限制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript中的Cookie&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;document.cookie&lt;/code&gt;来读取写入Cookie&lt;/li&gt;
&lt;li&gt;Cookie的属性&lt;ul&gt;
&lt;li&gt;name: Cookie名称&lt;/li&gt;
&lt;li&gt;domain: Cookie生效的域名&lt;/li&gt;
&lt;li&gt;path: Cookie生效的路径&lt;/li&gt;
&lt;li&gt;expires: Cookie过期时间&lt;/li&gt;
&lt;li&gt;HttpOnly: 用户端不可更改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除Cookie的方法：设置expires(过期时间)为失效时间或为0;&lt;/p&gt;
    
    </summary>
    
      <category term="本地存储" scheme="http://yoursite.com/categories/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="Cookie" scheme="http://yoursite.com/tags/Cookie/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript风格规范</title>
    <link href="http://yoursite.com/2018/04/18/JavaScript%E9%A3%8E%E6%A0%BC%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/04/18/JavaScript风格规范/</id>
    <published>2018-04-18T05:44:07.000Z</published>
    <updated>2018-06-04T15:20:40.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编程风格"><a href="#编程风格" class="headerlink" title="编程风格"></a>编程风格</h1><h2 id="1-声明-块级作用域"><a href="#1-声明-块级作用域" class="headerlink" title="1. 声明(块级作用域)"></a>1. 声明(块级作用域)</h2><h3 id="（1）let取代var"><a href="#（1）let取代var" class="headerlink" title="（1）let取代var"></a>（1）let取代var</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">if (true) &#123;</span><br><span class="line">  let x = &apos;hello&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面代码如果用var替代let，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，var命令做不到这一点；var命令存在变量提升效用，let命令没有这个问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">if (true) &#123;</span><br><span class="line">  console.log(x); // ReferenceError</span><br><span class="line">  let x = &apos;hello&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。</li><li>建议不再使用var命令，而是使用let命令取代</li></ul><h3 id="（2）全局常量和线程安全"><a href="#（2）全局常量和线程安全" class="headerlink" title="（2）全局常量和线程安全"></a>（2）全局常量和线程安全</h3><ul><li>const优于let有几个原因:<ul><li>const可以提醒阅读程序的人，这个变量不应该改变</li><li>const比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算</li><li>JavaScript 编译器会对const进行优化，所以多使用const，有利于提高程序的运行效率，也就是说let和const的本质区别，其实是编译器内部的处理不同</li></ul></li><li>所有的函数都应该设置为常量</li></ul><h2 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2. 字符串"></a>2. 字符串</h2><ul><li>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const a = &apos;foobar&apos;;</span><br><span class="line">const b = &apos;foo&apos; + a + &apos;bar&apos;;</span><br><span class="line"></span><br><span class="line">// acceptable</span><br><span class="line">const c = `foobar`</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const a = &apos;foobar&apos;;</span><br><span class="line">const b = `foo$&#123;a&#125;bar`;</span><br><span class="line">const c = `foobar`;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="3-结构赋值"><a href="#3-结构赋值" class="headerlink" title="3. 结构赋值"></a>3. 结构赋值</h2><ul><li><p>使用数组成员对变量赋值时，优先使用解构赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const arr = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">const first = arr[0];</span><br><span class="line">const second = arr[1];</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const [first, second] = arr;</span><br></pre></td></tr></table></figure></li><li><p>函数的参数如果是对象的成员，优先使用解构赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// bad </span><br><span class="line">function getFullName(user) &#123;</span><br><span class="line">    const firstName = user.firstName;</span><br><span class="line">    const lastName = user.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">function getFullName(obj) &#123;</span><br><span class="line">    const &#123; firstName, lastName &#125; = obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// best</span><br><span class="line">function getFullName(&#123;firstName,lastName&#125;) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-对象"><a href="#4-对象" class="headerlink" title="4. 对象"></a>4. 对象</h2><ul><li><p>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// bed</span><br><span class="line">const a = &#123; k1: v1, k2: v2,&#125;;</span><br><span class="line">const b = &#123;</span><br><span class="line">    k1: v1,</span><br><span class="line">    k2:v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const a = &#123; k1: v1, k2: v2 &#125;;</span><br><span class="line">const b = &#123;</span><br><span class="line">    k1: v1,</span><br><span class="line">    k2: v2,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const a = &#123;&#125;;</span><br><span class="line">a.x = 3;</span><br><span class="line"></span><br><span class="line">// if reshape unavoidable</span><br><span class="line">const a = &#123;&#125;;</span><br><span class="line">Object.assign(a, &#123;x: 2&#125;);</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const a = &#123;x: null&#125;;</span><br><span class="line">a.x = 3;</span><br></pre></td></tr></table></figure></li><li><p>对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">let ref = &apos;some value&apos;;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">const atom = &#123;</span><br><span class="line">    ref: ref,</span><br><span class="line">    value: 1,</span><br><span class="line">    addValue: function (value) &#123;</span><br><span class="line">        return atom.value + vlaue</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const atom = &#123;</span><br><span class="line">    ref,</span><br><span class="line">    </span><br><span class="line">    value: 1,</span><br><span class="line">    </span><br><span class="line">    addValue(value) &#123;</span><br><span class="line">        return atom.value + value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5. 数组"></a>5. 数组</h2><ul><li><p>使用扩展运算符（…）拷贝数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const len = items.length;</span><br><span class="line">const itemsCopy = [];</span><br><span class="line">let i;</span><br><span class="line"></span><br><span class="line">for (i = 0; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const itemsCopy = [...items];</span><br></pre></td></tr></table></figure></li><li><p>使用 Array.from 方法，将类似数组的对象转为数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const foo = document.querySelectorAll(&apos;.foo&apos;);</span><br><span class="line">const nodes = Array.from(foo);</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h2><ul><li><p>立即执行函数可以写成箭头函数的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;Welcome to the Internet.&apos;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了 this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">[1, 2, 3].map(function (x) &#123;</span><br><span class="line">  return x * x;  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">[1, 2, 3].map((x) =&gt; &#123;</span><br><span class="line">    return x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// best</span><br><span class="line">[1, 2, 3].map(x =&gt; x*x);</span><br></pre></td></tr></table></figure></li><li><p>箭头函数取代Function.prototype.bind，不应再用 self/_this/that 绑定 this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const self = this;</span><br><span class="line">const boundMethod = function(..params) &#123;</span><br><span class="line">    return method.apply(self,params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// acceptable</span><br><span class="line">const boundMethod = method.bind(this);</span><br><span class="line"></span><br><span class="line">// best</span><br><span class="line">const boundMethod = (...params) =&gt; method.apply(this, params);</span><br></pre></td></tr></table></figure></li><li><p>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">function divide(a, b, option = false ) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">function divide(a, b, &#123; option = false &#125; = &#123;&#125;) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不要在函数体内使用 arguments 变量，使用 rest 运算符（…）代替。因为 rest 运算符显式表明你想要获取参数，而且 arguments 是一个类似数组的对象，而 rest 运算符可以提供一个真正的数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">function concatenateAll() &#123;</span><br><span class="line">  const args = Array.prototype.slice.call(arguments);</span><br><span class="line">  return args.join(&apos;&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">function concatenateAll(...args) &#123;</span><br><span class="line">  return args.join(&apos;&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用默认值语法设置函数参数的默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">function handleThings(opts) &#123;</span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">function handleThings(opts = &#123;&#125;) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-Map-结构"><a href="#7-Map-结构" class="headerlink" title="7. Map 结构"></a>7. Map 结构</h2><ul><li>注意区分 Object 和 Map，只有模拟现实世界的实体对象时，才使用 Object。如果只是需要key: value的数据结构，使用 Map 结构。因为 Map 有内建的遍历机制。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let map = new Map(arr);</span><br><span class="line">for (let key of map.keys()) &#123;</span><br><span class="line">    console.log(key);</span><br><span class="line">&#125;</span><br><span class="line">for (let value of map.values()) &#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">for (let item of map.entries()) &#123;</span><br><span class="line">    console.log(item[0],itme[1])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-Class"><a href="#8-Class" class="headerlink" title="8. Class"></a>8. Class</h2><ul><li><p>总是用 Class，取代需要 prototype 的操作。因为 Class 的写法更简洁，更易于理解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">function Queue(contents = []) &#123;</span><br><span class="line">  this._queue = [...contents];</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.pop = function() &#123;</span><br><span class="line">  const value = this._queue[0];</span><br><span class="line">  this._queue.splice(0, 1);</span><br><span class="line">  return value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">class Queue &#123;</span><br><span class="line">  constructor(contents = []) &#123;</span><br><span class="line">    this._queue = [...contents];</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    const value = this._queue[0];</span><br><span class="line">    this._queue.splice(0, 1);</span><br><span class="line">    return value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const inherits = require(&apos;inherits&apos;);</span><br><span class="line">function PeekableQueue(contents) &#123;</span><br><span class="line">  Queue.apply(this, contents);</span><br><span class="line">&#125;</span><br><span class="line">inherits(PeekableQueue, Queue);</span><br><span class="line">PeekableQueue.prototype.peek = function() &#123;</span><br><span class="line">  return this._queue[0];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">class PeekableQueue extends Queue &#123;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    return this._queue[0];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="9-模块"><a href="#9-模块" class="headerlink" title="9. 模块"></a>9. 模块</h2><ul><li><p>首先，Module 语法是 JavaScript模块的标准写法，坚持使用这种写法。使用import取代require。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const moduleA = require(&apos;moduleA&apos;);</span><br><span class="line">const func1 = moduleA.func1;</span><br><span class="line">const func2 = moduleA.func2;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">import &#123; func1, func2 &#125; from &apos;moduleA&apos;;</span><br></pre></td></tr></table></figure></li><li><p>使用export取代module.exports。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// commonJS的写法</span><br><span class="line">var React = require(&apos;react&apos;);</span><br><span class="line"></span><br><span class="line">var Breadcrumbs = React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;nav /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = Breadcrumbs;</span><br><span class="line"></span><br><span class="line">// ES6的写法</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">class Breadcrumbs extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;nav /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Breadcrumbs;</span><br></pre></td></tr></table></figure></li><li><p>如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，export default与普通的export不要同时使用。</p></li><li><p>不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">import * as myObject from &apos;./importModule&apos;;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">import myObject from &apos;./importModule&apos;;</span><br></pre></td></tr></table></figure></li><li><p>如果模块默认输出一个函数，函数名的首字母应该小写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function makeStyleGuide() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default makeStyleGuide;- ESLint 是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。</span><br></pre></td></tr></table></figure></li><li><p>如果模块默认输出一个对象，对象名的首字母应该大写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const StyleGuide = &#123;</span><br><span class="line">  es6: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default StyleGuide;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;编程风格&quot;&gt;&lt;a href=&quot;#编程风格&quot; class=&quot;headerlink&quot; title=&quot;编程风格&quot;&gt;&lt;/a&gt;编程风格&lt;/h1&gt;&lt;h2 id=&quot;1-声明-块级作用域&quot;&gt;&lt;a href=&quot;#1-声明-块级作用域&quot; class=&quot;headerlink&quot; title=&quot;1. 声明(块级作用域)&quot;&gt;&lt;/a&gt;1. 声明(块级作用域)&lt;/h2&gt;&lt;h3 id=&quot;（1）let取代var&quot;&gt;&lt;a href=&quot;#（1）let取代var&quot; class=&quot;headerlink&quot; title=&quot;（1）let取代var&quot;&gt;&lt;/a&gt;（1）let取代var&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;use strict&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (true) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  let x = &amp;apos;hello&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for (let i = 0; i &amp;lt; 10; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;上面代码如果用var替代let，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，var命令做不到这一点；var命令存在变量提升效用，let命令没有这个问题&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;use strict&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (true) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(x); // ReferenceError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  let x = &amp;apos;hello&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。&lt;/li&gt;
&lt;li&gt;建议不再使用var命令，而是使用let命令取代&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;（2）全局常量和线程安全&quot;&gt;&lt;a href=&quot;#（2）全局常量和线程安全&quot; class=&quot;headerlink&quot; title=&quot;（2）全局常量和线程安全&quot;&gt;&lt;/a&gt;（2）全局常量和线程安全&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;const优于let有几个原因:&lt;ul&gt;
&lt;li&gt;const可以提醒阅读程序的人，这个变量不应该改变&lt;/li&gt;
&lt;li&gt;const比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算&lt;/li&gt;
&lt;li&gt;JavaScript 编译器会对const进行优化，所以多使用const，有利于提高程序的运行效率，也就是说let和const的本质区别，其实是编译器内部的处理不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所有的函数都应该设置为常量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-字符串&quot;&gt;&lt;a href=&quot;#2-字符串&quot; class=&quot;headerlink&quot; title=&quot;2. 字符串&quot;&gt;&lt;/a&gt;2. 字符串&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// bad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const a = &amp;apos;foobar&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const b = &amp;apos;foo&amp;apos; + a + &amp;apos;bar&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// acceptable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const c = `foobar`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const a = &amp;apos;foobar&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const b = `foo$&amp;#123;a&amp;#125;bar`;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const c = `foobar`;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="ECMAScript规范" scheme="http://yoursite.com/tags/ECMAScript%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js讲解</title>
    <link href="http://yoursite.com/2018/04/16/Vue.js%E8%AE%B2%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/04/16/Vue.js讲解/</id>
    <published>2018-04-16T13:50:10.000Z</published>
    <updated>2018-06-03T08:13:49.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-框架使用前期准备"><a href="#1-框架使用前期准备" class="headerlink" title="1.框架使用前期准备"></a>1.框架使用前期准备</h1><h3 id="1-1-Node-js安装"><a href="#1-1-Node-js安装" class="headerlink" title="1.1 Node.js安装"></a>1.1 Node.js安装</h3><ul><li>直接去nodejs官网下载最新版本对应操作系统的nodejs进行安装，nodejs安装程序会自己设置环境变量，所以打开命令行输出<code>node -v</code>就能查看安装信息了，就说明安装成功了</li><li>npm就是nodejs的包管理工具，在安装nodejs的时候我们就会默认把npm安装了,并且已经配置到系统的环境变量Path中去，在控制台输出<code>npm -v</code>就能看到npm的版本</li><li>由于一些众所周知原因,有时候使用npm下载包的时候会非常慢，可以使用淘宝的镜像安装使用cnpm替代npm<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="1-2-ES6的使用"><a href="#1-2-ES6的使用" class="headerlink" title="1.2 ES6的使用"></a>1.2 ES6的使用</h3><ul><li>ECMAScript 2015（以下简称 ES6）是 JavaScript 语言的新标准，使用babel可以将es6语法转换成浏览器可以识别的es5语法，在<code>vue-cli</code>脚手架搭建的项目中已集成bable,所以在vue项目我们可以使用ES6进行开发。</li><li><p>ES6常用的语法</p><ul><li>新增let、const声明</li><li><p>解构赋值 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let obj = &#123;name: &apos;alex&apos;, age: 20&#125;;</div><div class="line">let &#123;name, age&#125; = obj;</div><div class="line">console.log(name);</div><div class="line">console.log(age);</div></pre></td></tr></table></figure></li><li><p>模版字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let obj = &#123;name: &apos;alex&apos;, age: 20&#125;;</div><div class="line">let str = `用户名：$&#123;obj.name&#125;，年龄:$&#123;obj.age&#125;`;</div><div class="line">console.log(str);</div></pre></td></tr></table></figure></li><li><p>模块化：模块是js能规模化、工程化最大的基础，但之前js对定一块的支持有限，所以当前端使用多个框架或类库时很容易出现冲突等问题。当然了出了一大堆AMD解决方案如seajs,commonjs.reqiruejs…现在在ES6中，已经增加了对模块的支持。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import &#123;ajaxreq&#125; from &quot;./ajax&quot;</div><div class="line"></div><div class="line">function httpget(url, pars) &#123;</div><div class="line">    console.log(&apos;http get &apos;)</div><div class="line">    ajaxreq(url, pars)</div><div class="line">&#125;</div><div class="line"></div><div class="line">export &#123;httpget&#125;</div></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-3Webpack"><a href="#1-3Webpack" class="headerlink" title="1.3Webpack"></a>1.3Webpack</h3><ul><li><p>webpack当然是现在最为流行的js打包构建工具，非常强大。相关的配置以及使用三天三夜都要讲完。推荐文档<a href="https://doc.webpack-china.org/" target="_blank" rel="external">https://doc.webpack-china.org/</a></p></li><li><p>大家需要去明白的webpack的作是：把js项目以及相关依赖都打成一个可真正在浏览器运行的包（尽管babel能把es6转es5,事实上webpack中js的转换也是依靠babel完成的),所以这里不仅包括js转版本，还包含样式(less,sass)、前端构建(vue,react)，以及脚本去注释、压缩、混淆，甚至样式的压缩。都是通过webpack调度各类loadder和插件来完成的。</p></li></ul><h1 id="2-Vue-js基本语法介绍"><a href="#2-Vue-js基本语法介绍" class="headerlink" title="2.Vue.js基本语法介绍"></a>2.Vue.js基本语法介绍</h1><h4 id="什么是vue-vue能帮我们解决什么实际问题"><a href="#什么是vue-vue能帮我们解决什么实际问题" class="headerlink" title="什么是vue,vue能帮我们解决什么实际问题"></a>什么是vue,vue能帮我们解决什么实际问题</h4><ul><li>vue简单来说就是一个MVVM框架。</li><li>所以在说vue之前，我们先谈谈什么是MVVM(Model-View-ViewModel)。在我们的web前端开发过程中，需要经常做的三个工作就是渲染、交互以及提交，简单的来说就是需要把服务器响应的数据，呈现给浏览器让用户看得到可以交互的基本性东西，由于渲染的内容用户可以做比如点击、输入甚至拖动的各类交互操作，交互完成后又最终需要把用户交互处理后的结果（比如：表单提交）再提交到服务器。</li><li>这看起来当然没什么问题，但是有一点点麻烦就是首先需要写大量的代码进行渲染，然后需要写大量的代码来适应用户的各类交互，最终又通过大量的代码来获取用户最终交互的数据，这三个过程其实是分裂的。</li><li>那有没有什么更好的办法呢，当然有了，我们的MVVM就是来解决这个问题的。想象一下，如果我们根据某些数据进行渲染完成后，当数据当生改变后与之相关的UI也会重新渲染，更厉害的是当数据绑定的UI由于用户交互发生改变时，我们的数据也会自动更新。</li><li>这想想就很激动，没错MVVM框架已经完整的帮我们实现了这一个过程操作，让我们重点去关注数据本身，剩下的就全部将由mvvm框架处理就好了。vue既然是一个mvvm框架，当然这些也就都能做到。简单的界面当然可能感觉不到这种变化带来的前端开发质的飞跃，但当界面越来越复杂、交互越来越多的时候，这种模式的优势就非常明显了。</li></ul><h4 id="第一个Vue程序"><a href="#第一个Vue程序" class="headerlink" title="第一个Vue程序"></a>第一个Vue程序</h4><ul><li>引用vuejs,指定一个vue呈现的Dom元素,声明一个Vue对象，并且挂载指定的Dom元素，指定显示数据,这里需要关注的是Vue初始化对象的el表示该Vue渲染的Dom对象，data则是显示的内容对象,使用Vue模板{{mesasge}}来显示数据的message属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line"> &#123;&#123;message&#125;&#125;</div><div class="line"></div><div class="line">    &lt;hr&gt;</div><div class="line">    &lt;a v-for=&quot;item in navlist&quot;  class=&quot;nav-item&quot;  :title=&quot;item.title&quot; :href=&quot;item.page&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;pages.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var app = new Vue(&#123;</div><div class="line">        el: &apos;#app&apos;,</div><div class="line">        data: &#123;</div><div class="line">            title:&apos;第一个vue&apos;,</div><div class="line">            message: &apos;Hi,Vue!!!&apos;,</div><div class="line">            navlist:window.pages</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure><h4 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h4><ul><li>在开发过程中，进行数据渲染时我们使用最多的就是根据数据显示或隐藏内容，或者循环显示列表，话不多说看代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line"></div><div class="line">    &lt;div v-if=&quot;seen&quot;&gt;设置能看见我了...&lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div v-show=&quot;show&quot;&gt;就算我不显示我也还是存在的&lt;/div&gt;  </div><div class="line">    &lt;div v-for=&quot;item in forlist&quot;&gt;name: &#123;&#123;item.name&#125;&#125;,age:&#123;&#123;item.age&#125;&#125;&lt;/div&gt;</div><div class="line">    &lt;hr&gt;</div><div class="line">    &lt;a v-for=&quot;item in navlist&quot; class=&quot;nav-item&quot; :title=&quot;item.title&quot; :href=&quot;item.page&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;pages.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var app = new Vue(&#123;</div><div class="line">        el: &apos;#app&apos;,</div><div class="line">        data: &#123;</div><div class="line">            seen: true,</div><div class="line">            show: true,</div><div class="line">            forlist: [&#123;</div><div class="line">                name: &apos;alex&apos;,</div><div class="line">                age: 20</div><div class="line">            &#125;, &#123;</div><div class="line">                name: &apos;luke&apos;,</div><div class="line">                age: 30</div><div class="line">            &#125;],</div><div class="line">            title: &apos;条件与循环&apos;,</div><div class="line">            navlist: window.pages</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><ul><li>在元素中使用v-show或者v-if标签是，当指定的变量值为false时，则整个元素块不会显示，但v-show只是把该元素隐藏，而v-if则不显示。如果变量值为true,则效果一致。 v-for就是更简单了，看代码就明白，不多解释。</li></ul><h4 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h4><ul><li>使用vue需要着重关注的点就是，数据、方法与元素的关联关系，如怎么使一个元素的属性为数据的值，或者怎么指定一个方法为元素的事件执行方法，先看代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line"></div><div class="line">    &#123;&#123;message&#125;&#125;</div><div class="line">    &lt;button @click=&quot;reverseMessage&quot;&gt;逆转消息&lt;/button&gt;</div><div class="line">    &lt;hr&gt;</div><div class="line"></div><div class="line">    &lt;table&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">            &lt;th&gt;用户名:&lt;/th&gt;</div><div class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; v-model=&quot;user.name&quot;&gt;&lt;/td&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">            &lt;th&gt;职业:&lt;/th&gt;</div><div class="line">            &lt;td&gt;</div><div class="line">                &lt;select v-model=&quot;user.occupation&quot;&gt;</div><div class="line">                    &lt;option&gt;老师&lt;/option&gt;</div><div class="line">                    &lt;option&gt;医生&lt;/option&gt;</div><div class="line">                    &lt;option&gt;程序员&lt;/option&gt;</div><div class="line">                &lt;/select&gt;</div><div class="line">            &lt;/td&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">            &lt;th&gt;性别:&lt;/th&gt;</div><div class="line">            &lt;td&gt;</div><div class="line">                &lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;radioMan&quot; value=&quot;男&quot; v-model=&quot;user.sex&quot;&gt;&lt;label</div><div class="line">                    for=&quot;radioMan&quot;&gt;男&lt;/label&gt;</div><div class="line">                &lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;radioWoman&quot; value=&quot;女&quot; v-model=&quot;user.sex&quot;&gt;&lt;label</div><div class="line">                    for=&quot;radioWoman&quot;&gt;女&lt;/label&gt;</div><div class="line">            &lt;/td&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">            &lt;td colspan=&quot;2&quot;&gt;</div><div class="line">                表单结果,用户名：&#123;&#123;user.name&#125;&#125;,职业：&#123;&#123;user.occupation&#125;&#125;,性别：&#123;&#123;user.sex&#125;&#125;</div><div class="line">                &lt;br&gt;</div><div class="line">                &lt;button @click=&quot;getFormVal&quot;&gt;表单值&lt;/button&gt;</div><div class="line"></div><div class="line">            &lt;/td&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line"></div><div class="line">    &lt;hr&gt;</div><div class="line">    &lt;a v-for=&quot;item in navlist&quot; class=&quot;nav-item&quot; :title=&quot;item.title&quot; :href=&quot;item.page&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;pages.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    //文本绑定使用&#123;&#123;message&#125;&#125;,事件绑定使用@如@click，属性绑定</div><div class="line">    /**</div><div class="line">     * 各种绑定</div><div class="line">     1.文本绑定使用&#123;&#123;message&#125;&#125;</div><div class="line">     2.属性绑定使用:class,:title=&quot;className&quot;,</div><div class="line">     3.事件绑定，使用@,@click...</div><div class="line">     4.表单绑定使用v-model=&#123;&#125;</div><div class="line">     */</div><div class="line">    var app = new Vue(&#123;</div><div class="line">        el: &apos;#app&apos;,</div><div class="line">        data: &#123;</div><div class="line">            message: &apos;这个是测试的内容文字啊@!!&apos;,</div><div class="line">            navlist: window.pages,</div><div class="line">            user: &#123;</div><div class="line">                name: &apos;tgb&apos;,</div><div class="line">                occupation: &apos;程序员&apos;,</div><div class="line">                sex: &apos;男&apos;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        methods: &#123;</div><div class="line">            reverseMessage: function () &#123;</div><div class="line">                this.message = this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</div><div class="line">            &#125;,</div><div class="line">            getFormVal: function () &#123;</div><div class="line">                console.log(this.user);</div><div class="line"></div><div class="line">                alert(&apos;  表单结果,用户名：&apos; + this.user.name + &apos;,职业：： &apos; + this.user.occupation + &apos;,性别：： &apos; + this.user.sex);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure><h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><ul><li>vue组件是非常强大重要的功能之一，通过简单的组件封装就能在元素中使用特定功能的标签。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;input v-model=&quot;message&quot;&gt;</div><div class="line">    &lt;br&gt;</div><div class="line">    &lt;child1 :my-message=&quot;message&quot;&gt;&lt;/child1&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;child2 v-for=&quot;item in userlist&quot; :user=&apos;item&apos;&gt;&lt;/child2&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line"></div><div class="line">    &lt;p&gt;总数&#123;&#123;total&#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;button1 v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button1&gt;</div><div class="line">    &lt;button2 v-on:reduction=&quot;reductionTotal&quot;&gt;&lt;/button2&gt;</div><div class="line"></div><div class="line">    &lt;hr&gt;</div><div class="line">    &lt;a v-for=&quot;item in navlist&quot; class=&quot;nav-item&quot; :title=&quot;item.title&quot; :href=&quot;item.page&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;pages.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    Vue.component(&apos;child1&apos;, &#123;</div><div class="line">        props: [&apos;myMessage&apos;],</div><div class="line">        template: &apos;&lt;span&gt;&#123;&#123; myMessage &#125;&#125;&lt;/span&gt;&apos;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    Vue.component(&apos;child2&apos;, &#123;</div><div class="line">        props: [&apos;user&apos;],</div><div class="line">        template: &apos;&lt;li&gt;名字:&#123;&#123; user.name &#125;&#125;,年龄:&#123;&#123;user.age&#125;&#125;&lt;/li&gt;&apos;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    Vue.component(&apos;button1&apos;,&#123;</div><div class="line">        template:&apos;&lt;button v-on:click=&quot;incrementHandler&quot;&gt;+&lt;/button&gt;&apos;,</div><div class="line">        methods: &#123;</div><div class="line">            incrementHandler: function () &#123;</div><div class="line">                this.$emit(&apos;increment&apos;)</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    Vue.component(&apos;button2&apos;,&#123;</div><div class="line">        template:&apos;&lt;button v-on:click=&quot;reductionHandler&quot;&gt;-&lt;/button&gt;&apos;,</div><div class="line">        methods: &#123;</div><div class="line">            reductionHandler: function () &#123;</div><div class="line">                this.$emit(&apos;reduction&apos;)</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    new Vue(&#123;</div><div class="line">        el: &apos;#app&apos;,</div><div class="line">        data: &#123;</div><div class="line">            message:&apos;测试的文字&apos;,</div><div class="line">            navlist: window.pages,</div><div class="line">            userinfo:&#123;name:&apos;alex&apos;,age:18&#125;,</div><div class="line">            userlist:[</div><div class="line">                &#123;name:&apos;tonme&apos;,age:18&#125;,</div><div class="line">                &#123;name:&apos;luke&apos;,age:22&#125;,</div><div class="line">            ],</div><div class="line">            total: 0</div><div class="line">        &#125;,</div><div class="line">        methods: &#123;</div><div class="line">            reverseMessage: function () &#123;</div><div class="line">                this.message = this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</div><div class="line">            &#125;,</div><div class="line">            incrementTotal: function () &#123;</div><div class="line">                this.total += 1</div><div class="line">            &#125;,</div><div class="line">            reductionTotal: function () &#123;</div><div class="line">                this.total -= 1</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure><h1 id="3-Vue组件化开发"><a href="#3-Vue组件化开发" class="headerlink" title="3. Vue组件化开发"></a>3. Vue组件化开发</h1><h2 id="3-1vue-cli-脚手架工具"><a href="#3-1vue-cli-脚手架工具" class="headerlink" title="3.1vue-cli 脚手架工具"></a>3.1vue-cli 脚手架工具</h2><ul><li>现在前端使用的技术、框架以及工具是非常多非常麻烦的，配置对于一个新手可以说是绝望的。不过还好有一些辅助工具已经把这些工具给封装了，我们只需要简单的几个命令就可以快速把项目跑起来。</li></ul><h4 id="3-1-1-安装vue-cli"><a href="#3-1-1-安装vue-cli" class="headerlink" title="3.1.1 安装vue-cli"></a>3.1.1 安装vue-cli</h4><ul><li>全局安装<code>npm install -g vue-cli</code></li><li>安装成功后，使用vue -V检测版本是否已经安装成功<h4 id="3-1-2-搭建项目"><a href="#3-1-2-搭建项目" class="headerlink" title="3.1.2 搭建项目"></a>3.1.2 搭建项目</h4></li><li><code>vue init webpack my-projectname</code><h4 id="3-1-3-还原依赖并运行项目"><a href="#3-1-3-还原依赖并运行项目" class="headerlink" title="3.1.3 还原依赖并运行项目"></a>3.1.3 还原依赖并运行项目</h4></li><li>cd my-projectname</li><li>npm run dev</li></ul><h4 id="3-1-4-默认项目结构简单介绍"><a href="#3-1-4-默认项目结构简单介绍" class="headerlink" title="3.1.4 默认项目结构简单介绍"></a>3.1.4 默认项目结构简单介绍</h4><ul><li>-build 构建相关的脚本目录，开发过程中几乎不需要改更</li><li>-config 构建相关的配置目录，没特殊要求也不需要修改</li><li>|—index.js 基本的配置脚本，这里可以配置启动的端口，代理等。极少用</li><li>node_modules 引用的模块目录，如果太慢可以把该目录排除，不进行索引打描。</li><li>-src 源代码开发目录，非常重要，要写的代码都在这里</li><li>|—assets 引用资源目录如图片、字体素材等.</li><li>|—components 组件类库</li><li>|—router vue-router配置目录，如果需要新增router页面需要在这里进行添加</li><li>|—App.vue Vue首页</li><li>|—main.js Vue入口文件</li><li>-index.html 程序入口文件</li><li>-package.json nodejs 工程配置文件</li></ul><h4 id="3-1-5-Vue单文件介绍"><a href="#3-1-5-Vue单文件介绍" class="headerlink" title="3.1.5 Vue单文件介绍"></a>3.1.5 Vue单文件介绍</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;hello&quot;&gt;</div><div class="line">  &#123;&#123;msg&#125;&#125;</div><div class="line">    &lt;br/&gt;</div><div class="line"></div><div class="line">    &lt;button @click=&quot;userclick&quot;&gt;处理一下事件吧&lt;/button&gt;</div><div class="line">    &lt;hr&gt;</div><div class="line">    UI组件：</div><div class="line">    &lt;el-switch</div><div class="line">      v-model=&quot;isselected&quot;</div><div class="line">      active-color=&quot;#13ce66&quot;</div><div class="line">      inactive-color=&quot;#ff4949&quot;&gt;</div><div class="line">    &lt;/el-switch&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">  import axios from &quot;axios&quot;;</div><div class="line">export default &#123;</div><div class="line">  name: &apos;HelloWorld&apos;,</div><div class="line">  data () &#123;</div><div class="line">    return &#123;</div><div class="line">      msg:&apos;&apos;,</div><div class="line">      isselected:true</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods:&#123;</div><div class="line">    userclick:function () &#123;</div><div class="line">      this.msg = `改变了值...$&#123;new Date().getTime()&#125;`</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  mounted()&#123;</div><div class="line">      let that = this;</div><div class="line">      axios.get(&apos;/api/getmsg&apos;).then(res=&gt;&#123;</div><div class="line">          console.log(res);</div><div class="line">          that.msg = res.data.msg;</div><div class="line">      &#125;);</div><div class="line">    console.log(&apos;hw loadding&apos;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</div><div class="line">&lt;style scoped&gt;</div><div class="line">h1, h2 &#123;</div><div class="line">  font-weight: normal;</div><div class="line">&#125;</div><div class="line">ul &#123;</div><div class="line">  list-style-type: none;</div><div class="line">  padding: 0;</div><div class="line">&#125;</div><div class="line">li &#123;</div><div class="line">  display: inline-block;</div><div class="line">  margin: 0 10px;</div><div class="line">&#125;</div><div class="line">a &#123;</div><div class="line">  color: #42b983;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><ul><li>template.该部分包含我们最终的vue前端模板</li><li>script部分为脚本编写模块 export default 为初始化vue的参数，一般采用了简写最重要的三个部分是 data 函数返回当前对象默认的数据，methods为处理绑定的方法，mounted则为页面加载时执行行回调方法，在这里我们可以向服务器发出请求获取列表，加载数据行装</li><li>stytle 就是样式了没什么好说了。</li></ul><h2 id="3-2-vue-router"><a href="#3-2-vue-router" class="headerlink" title="3.2 vue-router"></a>3.2 vue-router</h2><ul><li>vue-router是vue生态最重要的一部分，简单来说用router后使得我们可以进行单个页面开发，控制页面的路由跳转</li><li>创建一个vue页面src\components\Profile.vue</li><li>在src/router/index.js 脚本中注册路由</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import Router from &apos;vue-router&apos;</div><div class="line">import HelloWorld from &apos;@/components/HelloWorld&apos; </div><div class="line"></div><div class="line">import Profile from &apos;@/components/Profile&apos;</div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line">export default new Router(&#123;</div><div class="line">    routes: [</div><div class="line">        &#123;</div><div class="line">            path: &apos;/&apos;,</div><div class="line">            name: &apos;HelloWorld&apos;,</div><div class="line">            component: HelloWorld</div><div class="line">        &#125;, &#123;</div><div class="line">            path: &apos;/profile&apos;,</div><div class="line">            name: &apos;Profile&apos;,</div><div class="line">            component: Profile</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure><ul><li>使用路由在入口App.Vue中增加代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  &lt;template&gt;</div><div class="line">    &lt;div id=&quot;app&quot;&gt;</div><div class="line">        &lt;img src=&quot;./assets/logo.png&quot;&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">            &lt;router-link to=&quot;/&quot;&gt;首页&lt;/router-link&gt;</div><div class="line">            &lt;router-link to=&quot;/profile&quot;&gt;用户中心&lt;/router-link&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;router-view/&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><h1 id="4-aixos使用和配置代理跨域"><a href="#4-aixos使用和配置代理跨域" class="headerlink" title="4. aixos使用和配置代理跨域"></a>4. aixos使用和配置代理跨域</h1><ul><li><p>安装axios<code>npm install axios -S</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//基本使用</div><div class="line">mounted()&#123;</div><div class="line">    let that = this;</div><div class="line">    axios.get(&apos;/api/getmsg&apos;).then(res=&gt;&#123;</div><div class="line">        console.log(res);</div><div class="line">        that.msg = res.data.msg;</div><div class="line">    &#125;);</div><div class="line">  console.log(&apos;hw loadding&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>配置代理跨域：在config、index.js文件修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">proxyTable: &#123;</div><div class="line">      &apos;/api&apos;: &#123;</div><div class="line">        target: &apos;http://localhost:8839/&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-框架使用前期准备&quot;&gt;&lt;a href=&quot;#1-框架使用前期准备&quot; class=&quot;headerlink&quot; title=&quot;1.框架使用前期准备&quot;&gt;&lt;/a&gt;1.框架使用前期准备&lt;/h1&gt;&lt;h3 id=&quot;1-1-Node-js安装&quot;&gt;&lt;a href=&quot;#1-1-Node-js安装&quot; class=&quot;headerlink&quot; title=&quot;1.1 Node.js安装&quot;&gt;&lt;/a&gt;1.1 Node.js安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;直接去nodejs官网下载最新版本对应操作系统的nodejs进行安装，nodejs安装程序会自己设置环境变量，所以打开命令行输出&lt;code&gt;node -v&lt;/code&gt;就能查看安装信息了，就说明安装成功了&lt;/li&gt;
&lt;li&gt;npm就是nodejs的包管理工具，在安装nodejs的时候我们就会默认把npm安装了,并且已经配置到系统的环境变量Path中去，在控制台输出&lt;code&gt;npm -v&lt;/code&gt;就能看到npm的版本&lt;/li&gt;
&lt;li&gt;由于一些众所周知原因,有时候使用npm下载包的时候会非常慢，可以使用淘宝的镜像安装使用cnpm替代npm&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install -g cnpm --registry=https://registry.npm.taobao.org&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vw适配移动端</title>
    <link href="http://yoursite.com/2018/04/16/vw%E9%80%82%E9%85%8D%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    <id>http://yoursite.com/2018/04/16/vw适配移动端/</id>
    <published>2018-04-16T13:48:48.000Z</published>
    <updated>2018-06-03T07:45:45.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-vw原理解析"><a href="#1-vw原理解析" class="headerlink" title="1.vw原理解析"></a>1.vw原理解析</h1><ul><li>vw是基于Viewport视窗的长度单位，这里的视窗（Viewport）指的就是浏览器可视化的区域，而这个可视区域是window.innerWidth/window.innerHeight的大小。</li><li>Viewport相关的单位有四个，分别为vw、vh、vmin和vmax:<ul><li>vw：是Viewport’s width的简写,1vw等于window.innerWidth的1%</li><li>vh：和vw类似，是Viewport’s height的简写，1vh等于window.innerHeihgt的1%</li><li>vmin：vmin的值是当前vw和vh中较小的值</li><li>vmax：vmax的值是当前vw和vh中较大的值</li><li>vmin和vmax是根据Viewport中长度偏大的那个维度值计算出来的，如果window.innerHeight &gt; window.innerWidth则vmin取百分之一的window.innerWidth，vmax取百分之一的window.innerHeight计算。</li></ul></li><li>如果设计稿的宽度是750px，那么100vw=750px,1vw=7.5px</li></ul><h1 id="2-Vue项目中使用vw实现移动端适配"><a href="#2-Vue项目中使用vw实现移动端适配" class="headerlink" title="2.Vue项目中使用vw实现移动端适配"></a>2.Vue项目中使用vw实现移动端适配</h1><ul><li>安装PostCSS插件<ul><li>在.postcssrc.js使用postcss</li><li>已经装好有postcss-import、postcss-url、autoprefixer</li><li>新增插件：<code>npm i postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext postcss-viewport-units cssnano --S</code><a id="more"></a></li></ul></li><li><p>在.postcssrc.js文件对新安装的PostCSS插件进行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  &quot;plugins&quot;: &#123;</div><div class="line">    &quot;postcss-import&quot;: &#123;&#125;,</div><div class="line">    &quot;postcss-url&quot;: &#123;&#125;,</div><div class="line">    // 使用postcss的插件实现vw适配移动端</div><div class="line">    // 由于cssnext和cssnano都具有autoprefixer,事实上只需要一个，所以把默认的autoprefixer删除掉，然后把cssnano中的autoprefixer设置为false</div><div class="line">    &apos;postcss-aspect-ratio-mini&apos;: &#123;&#125;, // 用来处理元素容器宽高比</div><div class="line">    &apos;postcss-write-svg&apos;: &#123; // 用来处理移动端1px的解决方案</div><div class="line">      uft8:false</div><div class="line">    &#125;,</div><div class="line">    &apos;postcss-cssnext&apos;: &#123;&#125;, // 让项目使用CSS未来特性 并对其做兼容性处理</div><div class="line">    &apos;postcss-px-to-viewport&apos;: &#123;</div><div class="line">      viewportWidth: 750, // 视窗的宽度，对应我们设计稿的宽度，一般是750</div><div class="line">      viewportHeight: 1334, // 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</div><div class="line">      unitPrecision: 3, // 指定&apos;px&apos;转换为视窗单位值得小数位数（很多时候无法整除）</div><div class="line">      viewportUnit:&apos;vw&apos;, // 指定需要转换成的视窗单位,建议使用vw</div><div class="line">      selectorBlackList: [&apos;.ignore&apos;,&apos;.hairliness&apos;], // 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</div><div class="line">      minPixelValue: 1, // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值。</div><div class="line">      mediaQuery: false // 允许在媒体查询中转换`px`</div><div class="line">    &#125;,</div><div class="line">    &apos;postcss-viewport-units&apos;: &#123;&#125;, // 给CSS的属性添加content的属性 配合viewport-units-buggyfill解决个别手机不支持vw</div><div class="line">    &apos;cssnano&apos;: &#123; // 压缩和清理CSS代码</div><div class="line">      preset: &apos;advanced&apos;,</div><div class="line">      autoprefixer: false,</div><div class="line">      &apos;postcss-zindex&apos;: false</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>vw兼容方案: 兼容个别手机</p><ul><li>主要使用viewport-units-buggyfill.js和viewport-units-buggyfill.hacks.js，只需要在你的HTML文件中引入这两个文件。比如在Vue项目中的index.html引入它们</li><li><code>&lt;script src=&quot;//g.alicdn.com/fdilab/lib3rd/viewport-units-buggyfill/0.6.2/??viewport-units-buggyfill.hacks.min.js,viewport-units-buggyfill.min.js&quot;&gt;&lt;/script&gt;</code></li><li><p>在HTML文件中调用<code>viewport-units-buggyfill</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!--使用viewport-units-buggyfill解决个别手机不支持vw--&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  window.onload = function () &#123;</div><div class="line">    window.viewportUnitsBuggyfill.init(&#123;</div><div class="line">      hacks: window.viewportUnitsBuggyfillHacks</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></li><li><p>前面配置的postcss-viewport-units插件。这个插件将让你无需关注content的内容，插件会自动帮你处理。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-vw原理解析&quot;&gt;&lt;a href=&quot;#1-vw原理解析&quot; class=&quot;headerlink&quot; title=&quot;1.vw原理解析&quot;&gt;&lt;/a&gt;1.vw原理解析&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;vw是基于Viewport视窗的长度单位，这里的视窗（Viewport）指的就是浏览器可视化的区域，而这个可视区域是window.innerWidth/window.innerHeight的大小。&lt;/li&gt;
&lt;li&gt;Viewport相关的单位有四个，分别为vw、vh、vmin和vmax:&lt;ul&gt;
&lt;li&gt;vw：是Viewport’s width的简写,1vw等于window.innerWidth的1%&lt;/li&gt;
&lt;li&gt;vh：和vw类似，是Viewport’s height的简写，1vh等于window.innerHeihgt的1%&lt;/li&gt;
&lt;li&gt;vmin：vmin的值是当前vw和vh中较小的值&lt;/li&gt;
&lt;li&gt;vmax：vmax的值是当前vw和vh中较大的值&lt;/li&gt;
&lt;li&gt;vmin和vmax是根据Viewport中长度偏大的那个维度值计算出来的，如果window.innerHeight &amp;gt; window.innerWidth则vmin取百分之一的window.innerWidth，vmax取百分之一的window.innerHeight计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果设计稿的宽度是750px，那么100vw=750px,1vw=7.5px&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-Vue项目中使用vw实现移动端适配&quot;&gt;&lt;a href=&quot;#2-Vue项目中使用vw实现移动端适配&quot; class=&quot;headerlink&quot; title=&quot;2.Vue项目中使用vw实现移动端适配&quot;&gt;&lt;/a&gt;2.Vue项目中使用vw实现移动端适配&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;安装PostCSS插件&lt;ul&gt;
&lt;li&gt;在.postcssrc.js使用postcss&lt;/li&gt;
&lt;li&gt;已经装好有postcss-import、postcss-url、autoprefixer&lt;/li&gt;
&lt;li&gt;新增插件：&lt;code&gt;npm i postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext postcss-viewport-units cssnano --S&lt;/code&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="vw适配" scheme="http://yoursite.com/tags/vw%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>pc端密码控件的使用</title>
    <link href="http://yoursite.com/2018/04/11/pc%E7%AB%AF%E5%AF%86%E7%A0%81%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/11/pc端密码控件的使用/</id>
    <published>2018-04-11T06:28:42.000Z</published>
    <updated>2018-06-03T07:49:34.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="密码控件-PassGuard介绍"><a href="#密码控件-PassGuard介绍" class="headerlink" title="密码控件 PassGuard介绍"></a>密码控件 PassGuard介绍</h1><ul><li>使用的密码控件是北京微通新成的</li><li>控件集成了<code>crypto-js.js</code>、<code>PassGuardCtrl.js</code>、<code>jQuery.js</code>、AESWithJCE.jar(解密jar);</li></ul><h1 id="前端初始化控件"><a href="#前端初始化控件" class="headerlink" title="前端初始化控件"></a>前端初始化控件</h1><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        //第一步 向后台发送ajax请求获取sKey,enStr;</div><div class="line">        //第二步初始化控件</div><div class="line">        //初始化控件时注意 pageEdittype必须设置为0 星号 不然会造成input框输入卡</div><div class="line">        var pgeditor = new $.pge(&#123;</div><div class="line">            pgePath : &quot;./ocx/&quot;,//控件下载目录，可以指定绝对路径，如&quot;http://www.baidu.com/download/&quot;</div><div class="line">            pgeId : &quot;_ocx_password&quot;,//控件id</div><div class="line">            pgeEdittype : 0,//控件显示类型,0(星号),1(明文) </div><div class="line">            pgeEreg1 : &quot;[\\s\\S]*&quot;,//输入过程中字符类型限制，如&quot;[0-9]*&quot;表示只能输入数字</div><div class="line">            pgeEreg2 : &quot;[\\s\\S]&#123;6,12&#125;&quot;,//输入完毕后字符类型判断条件，与pgeditor.pwdValid()方法对应</div><div class="line">            pgeMaxlength : 12,//允许最大输入长度</div><div class="line">            pgeTabindex : 2,//tab键顺序</div><div class="line">            pgeClass : &quot;ocx_style&quot;,//控件css样式</div><div class="line">            pgeInstallClass : &quot;ocx_style&quot;,//针对安装或升级的css样式</div><div class="line">            pgeOnkeydown :&quot;FormSubmit()&quot;,//回车键响应函数，需焦点在控件中才能响应</div><div class="line">            tabCallback : &quot;input2&quot;,//火狐tab键回调函数,设置要跳转到的对象ID</div><div class="line">            pgeOnfocus:&quot;pgeFocus()&quot;,//监控光标切入密码控件框</div><div class="line">            pgeOnblur:&quot;pgeBlur()&quot;,//监控光标切出密码控件框</div><div class="line">            //windows10 edge&amp;Chrome42+相关</div><div class="line">            pgeWindowID:&quot;password&quot;+new Date().getTime()+1, //设置多个密码输入框是时间戳一定要不同</div><div class="line">            pgeRZRandNum:sKey,</div><div class="line">            pgeRZDataB:enStr</div><div class="line">        &#125;);</div><div class="line">        window.pgeCtrl = pgeditor;</div><div class="line">        var i = 0;</div><div class="line">        //密码控件获得焦点时，提示一下</div><div class="line">        function pgeFocus()&#123;</div><div class="line">            $(&quot;#tishi&quot;).html(&quot;获得焦点&quot;+(i++));</div><div class="line">        &#125;</div><div class="line">        //密码控件失去焦点时获得密码强度，并展示出来</div><div class="line">        function pgeBlur()&#123;</div><div class="line">            $(&quot;#tishi&quot;).html(&quot;失去焦点&quot;+(i++));</div><div class="line">            //显示密码强度</div><div class="line">            GetLevel();</div><div class="line">        &#125;</div><div class="line">        window.onload = function()&#123;</div><div class="line">            $(&quot;#login&quot;).focus();</div><div class="line">            pgeditor.pgInitialize();</div><div class="line">            $(&quot;lic&quot;).html(pgeditor.setLicense());</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line"></div><div class="line">    //第三步 点击提交时</div><div class="line">    function FormSubmit() &#123;</div><div class="line">var length = pgeditor.pwdLength();//获得密码长度</div><div class="line">if (length == 0 || length == undefined) &#123;</div><div class="line">setTimeout(function()&#123;</div><div class="line">alert(&quot;密码不能为空&quot;);</div><div class="line">_$(&quot;_ocx_password&quot;).focus();</div><div class="line">&#125;,0);</div><div class="line">return false;</div><div class="line">&#125;</div><div class="line">if (pgeditor.pwdValid() == 1) &#123;//判断密码是否匹配正则表达式二</div><div class="line">setTimeout(function()&#123;</div><div class="line">alert(&quot;密码不符合要求&quot;);</div><div class="line">_$(&quot;_ocx_password&quot;).focus();</div><div class="line">&#125;,0);</div><div class="line">return false;</div><div class="line">&#125;</div><div class="line">    // 一定要再次请求获取随机因子并设置</div><div class="line">    // 后台保存此次的sKey</div><div class="line">    //pgeditor.pwdResult()是提交给后台的 加了AES密文的密码</div><div class="line">$.ajax( &#123;</div><div class="line">url : &quot;./srand_num.jsp?&quot; + get_time(),//get_time()防止缓存</div><div class="line">type : &quot;GET&quot;,</div><div class="line">async : false,</div><div class="line">success : function(srand_num) &#123;</div><div class="line">pgeditor.pwdSetSk(srand_num);//给控件设置随机因子</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">var pwdResult = pgeditor.pwdResult();//获取密码AES密文</div><div class="line">var machineNetwork = pgeditor.machineNetwork();//获取网卡信息密文</div><div class="line">var machineDisk = pgeditor.machineDisk();//获取硬盘信息密文</div><div class="line">var machineCPU = pgeditor.machineCPU();//获取CPU信息密文</div><div class="line">_$(&quot;password&quot;).value = pwdResult;//将密码密文赋值给表单</div><div class="line">_$(&quot;local_network&quot;).value = machineNetwork;//将网卡和MAC信息密文赋值给表单</div><div class="line">_$(&quot;local_disk&quot;).value = machineDisk;//将硬盘信息密文赋值给表单</div><div class="line">_$(&quot;local_cpu&quot;).value = machineCPU;//将CPU信息密文赋值给表单</div><div class="line">document.form1.submit();</div><div class="line">&#125;</div><div class="line">    第四步 服务器端调用安全控件解密接口进行解密</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;密码控件-PassGuard介绍&quot;&gt;&lt;a href=&quot;#密码控件-PassGuard介绍&quot; class=&quot;headerlink&quot; title=&quot;密码控件 PassGuard介绍&quot;&gt;&lt;/a&gt;密码控件 PassGuard介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用的密码控件是北京微通新成的&lt;/li&gt;
&lt;li&gt;控件集成了&lt;code&gt;crypto-js.js&lt;/code&gt;、&lt;code&gt;PassGuardCtrl.js&lt;/code&gt;、&lt;code&gt;jQuery.js&lt;/code&gt;、AESWithJCE.jar(解密jar);&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;前端初始化控件&quot;&gt;&lt;a href=&quot;#前端初始化控件&quot; class=&quot;headerlink&quot; title=&quot;前端初始化控件&quot;&gt;&lt;/a&gt;前端初始化控件&lt;/h1&gt;
    
    </summary>
    
      <category term="应用工具" scheme="http://yoursite.com/categories/%E5%BA%94%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="密码控件" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JS调试的5个debug技巧</title>
    <link href="http://yoursite.com/2018/03/01/JS%E8%B0%83%E8%AF%95%E7%9A%845%E4%B8%AAdebug%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2018/03/01/JS调试的5个debug技巧/</id>
    <published>2018-03-01T09:12:57.000Z</published>
    <updated>2018-06-03T08:06:28.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-debugger"><a href="#1-debugger" class="headerlink" title="1.debugger"></a>1.debugger</h1><ul><li>直接在javaScript代码中加入一句<code>debugger</code>手工造成一个断点效果</li><li>带有条件的断点吗？你只需要用if语句包围它<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if (somethingHappens) &#123;</div><div class="line">  debugger;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="2-设置在DOM-node发生变化时触发断点"><a href="#2-设置在DOM-node发生变化时触发断点" class="headerlink" title="2.设置在DOM node发生变化时触发断点"></a>2.设置在DOM node发生变化时触发断点</h1><ul><li>DOM不受你的控制，自己会发生一些奇怪的变化，让你很难找出问题的根源</li></ul><h1 id="3-Ajax-断点"><a href="#3-Ajax-断点" class="headerlink" title="3.Ajax 断点"></a>3.Ajax 断点</h1><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-debugger&quot;&gt;&lt;a href=&quot;#1-debugger&quot; class=&quot;headerlink&quot; title=&quot;1.debugger&quot;&gt;&lt;/a&gt;1.debugger&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;直接在javaScript代码中加入一句&lt;code&gt;debugger&lt;/code&gt;手工造成一个断点效果&lt;/li&gt;
&lt;li&gt;带有条件的断点吗？你只需要用if语句包围它&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;if (somethingHappens) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  debugger;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-设置在DOM-node发生变化时触发断点&quot;&gt;&lt;a href=&quot;#2-设置在DOM-node发生变化时触发断点&quot; class=&quot;headerlink&quot; title=&quot;2.设置在DOM node发生变化时触发断点&quot;&gt;&lt;/a&gt;2.设置在DOM node发生变化时触发断点&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;DOM不受你的控制，自己会发生一些奇怪的变化，让你很难找出问题的根源&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-Ajax-断点&quot;&gt;&lt;a href=&quot;#3-Ajax-断点&quot; class=&quot;headerlink&quot; title=&quot;3.Ajax 断点&quot;&gt;&lt;/a&gt;3.Ajax 断点&lt;/h1&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="debug" scheme="http://yoursite.com/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>ES6中的类</title>
    <link href="http://yoursite.com/2018/03/01/ES6%E4%B8%AD%E7%9A%84%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/03/01/ES6中的类/</id>
    <published>2018-03-01T01:27:18.000Z</published>
    <updated>2018-03-01T09:13:09.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h1><ul><li><p>基本的类声明语法：要声明一个类，首先编写class关键字，紧跟着的是类的名字，其他部分的语法类似于对象字面量方法的简写形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class PersonClass &#123;</div><div class="line">    //等价于PersonClass构造函数</div><div class="line">    constructor(name) &#123;</div><div class="line">        this.name</div><div class="line">    &#125;</div><div class="line">    //等价于PersonType.prototype.sayName</div><div class="line">    sayName() &#123;</div><div class="line">        console.log(this.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let person = new PersonClass(&apos;tgb&apos;);</div><div class="line">person.sayName(); //outputs &apos;tgb&apos;</div><div class="line"></div><div class="line">console.log(person instanceof PersonClass); //true</div><div class="line">console.log(person instanceof Object);  true</div><div class="line">console.log(typeof PersonClass);    //&apos;function&apos;</div><div class="line">console.log(typeof PersonClass.prototype.sayName); //&apos;function&apos;</div></pre></td></tr></table></figure></li><li><p>提升：类声明不会声明提升，你首先需要声明你的类，然后访问它，否则会抛出一个ReferenceError：</p></li></ul><h1 id="类语法的特性"><a href="#类语法的特性" class="headerlink" title="类语法的特性:"></a>类语法的特性:</h1><ol><li>类声明与let声明类似，不能被提升，真正执行声明语句之前，他们会一直存在于临时死区中</li><li>类声明中的所有代码将自行运行在严格模式下，而且无法强行</li><li>类中所有方法都是不可枚举的</li><li>每个类都有一个名为[[constructor]]的内部方法,通过关键字new调用那些不含[[constructor]]的方法会导致程序抛出错误</li><li>使用除关键字new以外的方式调用类的构造函数会导致程序抛出错误</li><li>在类中修改类名会导致程序报错</li></ol><h1 id="类表达式"><a href="#类表达式" class="headerlink" title="类表达式"></a>类表达式</h1><h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><ul><li>一个 Promise 就是一个代表了异步操作最终完成或者失败的对象.  一个promise可以使用它的constructor创建</li><li>本质上，一个promise是某个函数返回的对象，你可以把回调函数绑定在这个对象上，而不是把回调函数当作参数传进函数</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类的声明&quot;&gt;&lt;a href=&quot;#类的声明&quot; class=&quot;headerlink&quot; title=&quot;类的声明&quot;&gt;&lt;/a&gt;类的声明&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本的类声明语法：要声明一个类，首先编写class关键字，紧跟着的是类的名字，其他部分的语法类似于对象字面
      
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>CSS总结</title>
    <link href="http://yoursite.com/2018/02/02/CSS%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/02/02/CSS总结/</id>
    <published>2018-02-02T01:17:36.000Z</published>
    <updated>2018-02-05T05:28:18.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS介绍"><a href="#CSS介绍" class="headerlink" title="CSS介绍"></a>CSS介绍</h1><ul><li>CSS 指层叠样式表 (Cascading Style Sheets)，是用来定义HTML元素在页面中如何显示。</li><li><p>CSS写法分类</p><ol><li><p>行内样式：通过标签中style属性来设置只能作用在当前标签之中，出了这个标签就没有作用，使用情况少(特定场合，整个页面只有这个标签出现了这个样式)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p style=&apos;font-size:16px;color:#fff&apos;&gt;行内样式&lt;/p&gt;</div></pre></td></tr></table></figure></li><li><p>内嵌样式：把样式写在<code>&lt;head&gt;</code>标签中的<code>&lt;title&gt;</code>标签下，并用<style>标签去声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">    &lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">    &lt;style type=&apos;text/css&apos;&gt;</div><div class="line">        .p1 &#123;</div><div class="line">            color: red;</div><div class="line">        &#125;</div><div class="line">        .p2 &#123;</div><div class="line">            color: yellow;</div><div class="line">        &#125;</div><div class="line">        .p3 &#123;</div><div class="line">            color: green;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;p class=&quot;p1&quot;&gt;内嵌样式第一行&lt;/p&gt;</div><div class="line">    &lt;p class=&quot;p2&quot;&gt;内嵌样式第二行&lt;/p&gt;</div><div class="line">    &lt;p class=&quot;p3&quot;&gt;内嵌样式第三行行&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></li><li><p>外联样式: 在外部定义CSS样式表并形成以.CSS为扩展名文件，然后在页面中通过<link>链接标记链接到页面中，而且该链接语句必须放在页面的<head>标记区。为了结构样式分离，推荐写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">    &lt;link type=&apos;text/css&apos; rel=&apos;stylesheet&apos; href=&apos;./base.css&apos;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;p class=&quot;p1&quot;&gt;内嵌样式第一行&lt;/p&gt;</div><div class="line">    &lt;p class=&quot;p2&quot;&gt;内嵌样式第二行&lt;/p&gt;</div><div class="line">    &lt;p class=&quot;p3&quot;&gt;内嵌样式第三行行&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></li></ol></li></ul><h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><ol><li>基础选择器：<ul><li>E：元素选择器（以DOM元素名称来匹配）</li><li>.classname ：类选择器（以类名来匹配）</li><li>#id ：ID选择器（以唯一标识符id属性匹配）</li><li><code>*</code> ：通配选择器（可匹配任意类型的DOM元素）</li></ul></li><li>组合选择器<ul><li>A B   ：后代选择器（匹配A元素内的B元素，包含所有匹配的子孙后代）</li><li>A &gt; B ：子选择器（匹配A元素内的直接后代B元素，不包含孙辈）</li><li>A,B,C: 群组选择器的使用范畴是，多个选择器使用同一个样式或者同一组样式。这在做CSS样式初始化，CSS框架设计以及后期CSS代码优化时会经常使用。多个选择器之间用逗号（,）隔开，其语法形式为：&lt;选择器1&gt;,&lt;选择器2&gt;，&lt;选择器3&gt; { 定义样式 }；</li><li>A + B ：相邻兄弟选择器（匹配A元素后的兄弟B元素，B元素必须紧跟着A元素）,“+”只能选择该选择器相邻的下一个选择器<ul><li>群组选择器的使用范畴是，多个选择器使用同一个样式或者同一组样式。这在做CSS样式初始化，CSS框架设计以及后期CSS代码优化时会经常使用。多个选择器之间用逗号（,）隔开，其语法形式为：&lt;选择器1&gt;,&lt;选择器2&gt;，&lt;选择器3&gt; { 定义样式 }；</li></ul></li><li>A ~ B ：普通兄弟选择器（匹配A元素后的兄弟B元素，B元素只需在A元素后，不要求紧跟）,能选择该选择器后的所有同级选择器</li></ul></li><li>伪元素选择器<ul><li>E::after / E:after  ：两个等价，用来创建已选中元素的一个虚拟的最后子元素（行内元素），必须设置content属性</li><li>E::before / E:before ：两个等价，用来创建已选中元素的一个虚拟的第一个子元素（行内元素），必须设置content属性</li><li>CSS3新增<ul><li>E::first-letter / E:first-letter ： 匹配已选中元素内的文字的第一行的第一个字母（只作用于块元素）</li><li>E::selection ： 设置文档被选择时的样式</li><li>E::first-line / E:first-line ：设置匹配元素内的第一行文字（只作用于块元素）</li><li>E::placeholder ：设置表单输入框占位符</li></ul></li></ul></li><li>伪类选择器<ul><li>E:focus ： 匹配一个成为焦点的元素（该元素的onfocus事件发生）</li><li>E:link  ： 设置超链接a在未被访问状态的样式</li><li>E:visited：匹配超链接a在其链接地址已被访问过的元素</li><li>E:active ： 匹配被用户激活的元素（在鼠标点击与释放之间发生的事件）</li><li>E:hover ： 匹配鼠标悬停在其上面的元素</li><li>结构伪类选择器(CSS3新增 移动端常用)<ul><li>E:nth-child(n)：选择所有在其父元素中第n个位置的匹配E的子元素，参数n可以是数字（1、2、3）、关键字（odd、even）、公式（2n、2n+3）参数的索引从1开始<ul><li>tr:nth-child(3)匹配所有表格中第3排的tr；</li><li>tr:nth-child(2n+1)匹配所有表格的奇数行；</li><li>tr:nth-child(2n)匹配所有表格的偶数行；</li><li>tr:nth-child(odd)匹配所有表格的奇数行；</li><li>tr:nth-child(even)匹配所有表格的偶数行；</li></ul></li><li>E:last-child: 选择位于其父元素中最后一个位置，且匹配E的子元素。</li><li>E:nth-last-child(n)：选择所有在其父元素中倒数第n个位置的匹配E的子元素</li><li>E:nth-of-type(n):匹配同类型中的第n个兄弟元素E</li><li>E:nth-last-of-type(n):选择父元素中倒数第n个位置，且匹配E的子元素。</li><li>E:first-of-type：选择位于其父元素中且匹配E的第一个同类型的子元素。该选择器的功能类似于 E:nth-of-type(1)</li><li>E:last-of-type：选择位于其父元素中且匹配E的最后第一个同类型的子元素。该选择器的功能类似于 E:nth-last-of-type(1)</li><li>E:only-child：选择其父元素只包含一个子元素，且该子元素匹配E。</li><li>E:only-of-type：选择其父元素只包含一个同类型的子元素，且该子元素匹配E。<br>5.属性选择器</li></ul></li><li>a[href]:a标签中含有href属性的所有标签</li><li>a[href=”1.pm4”]:a标签中含有href=”1.mp4”的标签</li><li>a[href^=”a”]:a标签中有href属性并且以a字母开头的所有标签</li><li>a[href$=”d”]:a标签中有href属性并且以d字母结束的所有标签</li><li>a[href*=”g”]:a标签中有href属性并且g字母的所有标签 </li></ul></li></ol><h1 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h1><ol><li>继承性<ul><li>子元素可以继承父元素的样式，</li><li>(字体)text-，(字体大小)font-，(行高)line-这些开头的属性都可以继承，以及(颜色)color属性</li></ul></li><li>优先级<ul><li>选择器是有优先级，其划分是根据权重来的;</li><li>权重<ul><li>!important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</li><li>算法：（0，0，0，0）==》第一个0对应的是important的个数，第二个0对应的是id选择器的个数，第三个0对应的类选择器的个数，第四个0对应的是标签选择器的个数，</li><li>先从第一个0开始比较，如果第一个0大，那么说明这个选择器的权重高，如果第一个相同，比较第二个，依次类推</li></ul></li></ul></li><li>层叠性<ul><li>如果两个相同的属性作用于同一标签，它们会发生层叠。如果多个复合选择器，同时作用于我们的同一标签，优先级就不好计算了，就要计算权重，通过比较权重，来先出优先级最高的选择器</li><li>浏览器的渲染机制是从上到下的，当有冲突的时候就采用权重最高的,权重相同则后面覆盖前面</li></ul></li></ol><h1 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h1><h2 id="内外边距（margin、padding），边框-border"><a href="#内外边距（margin、padding），边框-border" class="headerlink" title="内外边距（margin、padding），边框(border)"></a>内外边距（margin、padding），边框(border)</h2><ol><li><p>css盒子模型概念</p><ul><li><p>在CSS中，所有的网页元素都被看作一个矩形框，或者是元素框。盒子模型描述了元素在网页布局中所占的空间和位置，盒子模型包含了元素内容（content）、内边距（padding）、边框（border）、外边距（margin）几个要素，在写CSS时可以理解成’万物皆盒子’。</p><p><img src="http://ojvil4eq9.bkt.clouddn.com/18-2-2/74990554.jpg" alt=""></p></li><li>图中最内部的框是元素的实际内容，也就是元素框，紧挨着元素框外部的是内边距padding，其次是边框（border），然后最外层是外边距（margin），整个构成了框模型。通常我们设置的背景显示区域，就是内容、内边距、边框这一块范围。而外边距margin是透明的，不会遮挡周边的其他元素。</li><li>元素框的总宽度 = 元素（element）的width + padding的左边距和右边距的值 + margin的左边距和右边距的值 + border的左右宽度；</li><li>元素框的总高度 = 元素（element）的height + padding的上下边距的值 + margin的上下边距的值 ＋ border的上下宽度</li></ul></li><li><p>css 外边距合并（叠加）</p><ul><li><p>两个上下方向相邻的元素框垂直相遇时，外边距会合并，合并后的外边距的高度等于两个发生合并的外边距中较高的那个边距值，如图：</p><p>  <img src="http://ojvil4eq9.bkt.clouddn.com/18-2-2/90378467.jpg" alt=""></p></li><li>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并</li><li>在CSS重置时,经常用到.</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* &#123;</div><div class="line">margin : 0;</div><div class="line">padding : 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>开发技巧<ul><li><code>margin</code>塌陷<ul><li>当父元素没有边框border时，设置第一个子元素的margin-top值的时候，会出现margin-top值加在父元素上的现象</li><li>解决方法<ul><li>给父元素加边框border （副作用）</li><li>给父元素设置padding值  （副作用）</li><li>父元素添加 overflow：hidden （副作用）</li><li>父元素加前置内容生成(::before)。（推荐）</li></ul></li></ul></li><li>常用：<code>margin: 0 auto</code>实现水平居中</li></ul></li><li><p>box-sizing属性介绍(CSS3新增)</p><ul><li>box-sizing : content-box|border-box|inherit;</li><li>content-box ,默认值，可以使设置的宽度和高度值应用到元素的内容框。盒子的width只包含内容。总宽度=margin+border+padding+width</li><li>border-box , 设置的width值其实是除margin外的border+padding+element的总宽度。盒子的width包含border+padding+内容，即总宽度=margin+width</li><li>inherit , 规定应从父元素继承 box-sizing 属性的值</li><li>border-box的使用<ul><li>一个box宽度为100%，又想要两边有内间距，这时候用就比较好</li><li>全局设置 border-box 更符合我们通常对一个「盒子」尺寸的认知，可以省去一次又一次的加加减减，它还有一个关键作用——让有边框的盒子正常使用百分比宽度，在写移动端重置css时全局写</li></ul></li></ul></li><li><p>边框(border)</p><ul><li>border：设置元素的边框（width style color）</li><li>border-width：设置元素边框的宽度</li><li>border-style：设置元素边框的样式</li><li>border-color：设置元素边框的颜色</li><li>单独设置元素边框<ul><li>border-top|right|bottom|left</li><li>border-top-width</li><li>border-top-style</li><li>border-top-color</li></ul></li><li>使用<code>border</code>画三角形<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.triangle &#123;</div><div class="line">            width : 0;</div><div class="line">            height: 0;</div><div class="line">            border : 100px solid transparent;</div><div class="line">            border-top : 100px solid blue; /*这里可以设置border的top、bottom、left、right四个方向的三角*/</div><div class="line">        &#125;</div></pre></td></tr></table></figure></li></ul></li></ol><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><ul><li>position：设置元素的定位方式<ul><li>static: 没有定位，元素出现在正常的流中</li><li>relative: 生成相对定位的元素，相对于元素本身正常位置进行定位。没有脱离文本流，且会占用该元素在文档中初始的页面空间，即在使用top，bottom，left，right进行移动位置之后依旧不会改变其所占用空间的位置。可以使用z-index进行在z轴方向上的移动</li><li>absolute: 绝对定位方式，脱离文档流，不会占用页面空间。以最近的不是static定位的父级元素作为参考进行定位，如果其所有的父级元素都是static定位，那么此元素最终则是以当前窗口作为参考进行定位(body元素)</li><li>fixed: 固定定位，直接以浏览器窗口作为参考进行定位</li></ul></li><li><p>开发中使用定位实现盒子上下垂直居中,‘父相子绝’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.father &#123;</div><div class="line">    position:relative;</div><div class="line">    width:500px;</div><div class="line">    height:500px;</div><div class="line">&#125;</div><div class="line">.father .son &#123;</div><div class="line">    width:200px;</div><div class="line">    height:200px;</div><div class="line">    position:absolute;</div><div class="line">    top:50%;</div><div class="line">    left:50%;</div><div class="line">    margin-top:-100px;</div><div class="line">    margin-left:-100px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>实现水平垂直居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">            width: 400px;</div><div class="line">            height: 400px;</div><div class="line">            background: #000;</div><div class="line">            position: absolute;</div><div class="line">            top:0;</div><div class="line">            right:0;</div><div class="line">            bottom:0;</div><div class="line">            left:0;</div><div class="line">            margin: auto;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></li><li><p>z-index：设置一个元素的堆叠顺序(Z轴)，可为负数（只作用于定义了position为非static的元素）</p></li></ul><h2 id="浮动布局"><a href="#浮动布局" class="headerlink" title="浮动布局"></a>浮动布局</h2><ul><li>float：设置元素是否及如何浮动</li><li>clear：用来清除浮动</li><li>在页面标准流中，块级元素独占一行,自上而下排列，为了实现在一行中显示多个块计元素，就要用到浮动让某个块级元素脱硫标准流，漂浮在标准流上。</li><li>visibility：hidden设置元素是否显示（占的位置依旧存在）</li><li>overflow：设置元素处理溢出内容的方式</li><li>overflow-x：设置元素处理横向溢出内容的方式</li><li>overflow-y：设置元素处理纵向溢出内容的方式</li><li>overflow-wrap：设置当内容溢出时，是否允许换行（和word-wrap一样）</li><li>清除浮动的几种方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/*单伪元素法*/</div><div class="line">.clearfix:after &#123;</div><div class="line">            content: &apos;&apos;;</div><div class="line">            clear: both;</div><div class="line">            display: block;</div><div class="line">            height: 0;</div><div class="line">        &#125;</div><div class="line">/*双伪元素法*/</div><div class="line">.clearfix:before,.clearfix:after &#123;</div><div class="line">    content:&apos;&apos;;</div><div class="line">    display:table;</div><div class="line">&#125;</div><div class="line">.clearfix:after &#123;</div><div class="line">    clear:both;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="flex布局-弹性布局"><a href="#flex布局-弹性布局" class="headerlink" title="flex布局(弹性布局)"></a>flex布局(弹性布局)</h2><h3 id="flex布局介绍"><a href="#flex布局介绍" class="headerlink" title="flex布局介绍"></a>flex布局介绍</h3><ul><li>为什么使用flex布局：布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</li><li>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。<br><img src="http://ojvil4eq9.bkt.clouddn.com/18-2-5/28568613.jpg" alt=""></li><li>PC端除了要照顾ie9及以前的用户,移动端已经全面支持,是现在的主流布局方式</li><li>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</li><li><p>任何一个容器都可以指定为 Flex 布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>行内元素也可以使用 Flex 布局。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">  display: inline-flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效</p><h3 id="flex布局基本概念"><a href="#flex布局基本概念" class="headerlink" title="flex布局基本概念"></a>flex布局基本概念</h3></li><li>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。<br><img src="http://ojvil4eq9.bkt.clouddn.com/18-2-5/76951602.jpg" alt=""></li><li>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</li><li>主要介绍:<a href="https://saber-tgb.github.io/2017/09/12/flex%E5%B8%83%E5%B1%80%E5%AD%A6%E4%B9%A0/">https://saber-tgb.github.io/2017/09/12/flex%E5%B8%83%E5%B1%80%E5%AD%A6%E4%B9%A0/</a></li></ul><h2 id="网格布局-Grid布局"><a href="#网格布局-Grid布局" class="headerlink" title="网格布局(Grid布局)"></a>网格布局(Grid布局)</h2><ul><li>浏览器兼容性:CSS网格布局从Safari 10.1, Firefox 52, Opera 44, Chrome 57开始收到支持，微软Edge在Edge 15会更新对网格布局的支持。</li></ul><h1 id="字体、文本、文本装饰、书写模式"><a href="#字体、文本、文本装饰、书写模式" class="headerlink" title="字体、文本、文本装饰、书写模式"></a>字体、文本、文本装饰、书写模式</h1><ol><li><p>字体</p><ul><li>font：设置元素的文本特性（style variant weight size lineHeight family）</li><li>font-style：设置文本字体样式</li><li>font-variant：设置文本是否为小型的大写字母</li><li>font-weight：设置文本的字体粗细</li><li>font-size：设置文本的字体大小</li><li>font-family：设置文本的字体名称列表</li><li>font-stretch：设置文字是否横向拉伸变形</li><li>font-size-adjust：设置字体大小取决于小写字母，而不是大写字母</li><li>@font-face：设置自定义字体</li></ul></li><li><p>文本</p><ul><li>text-transform：设置文本的大小写</li><li>white-space：设置元素中的空格的处理方式</li><li>tab-size：设置制表符的长度</li><li>word-break：设置怎样在单词内断行</li><li>word-wrap/overflow-wrap：两者等价，设置内容溢出时是否断行</li><li>text-align：设置行内内容相对它的块父元素的水平对齐方式</li><li>text-align-last：设置内容最后一行的水平对齐方式</li><li>text-justify：设置文本怎样对齐及对齐间距</li><li>word-spacing：设置字与字之间的间距</li><li>letter-spacing：设置字符间的间距</li><li>text-indent：设置文本的缩进</li><li>vertical-align：设置内联元素在行框内的垂直对齐方式</li><li>line-height：设置文本的行高</li><li>text-size-adjust：设移动端页面中元素文本的大小调整</li><li>开发常用：文本超出显示省略号(…)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">width: 300px //要设置宽度</div><div class="line">overflow: hidden;</div><div class="line">white-space: nowrap;</div><div class="line">text-overflow: ellipsis;</div></pre></td></tr></table></figure></li></ul></li><li><p>文本装饰</p><ul><li>text-decoration：设置文本的排版（line style color）</li><li>text-decoration-line：设置文本的排版种类</li><li>text-decoration-color：设置文本的排版颜色</li><li>text-decoration-style：设置文本的排版样式</li><li>text-underline-position：设置文本的下划线的位置（支持度不高）</li></ul></li><li><p>书写模式</p><ul><li>direction：设置文本流的方向</li><li>unicode-bidi：用于同一个页面里存在从不同方向读进的文本显示</li><li>writing-mode：设置内容块固有的书写方向</li></ul></li></ol><h1 id="背景、颜色"><a href="#背景、颜色" class="headerlink" title="背景、颜色"></a>背景、颜色</h1><ol><li>背景<ul><li>background：设置背景（属性：color position size repeat origin clip attachment image）（可设置多个背景，每组属性间用逗号分隔）</li><li>background-color：设置背景色</li><li>background-image：设置背景路径（可设置多个背景，每组属性间用逗号分隔）</li><li>background-repeat：设置背景是否平铺及平铺方式</li></ul></li><li>颜色<ul><li>color：设置文本颜色</li><li>opacity：设置元素的不透明度（0~1）</li><li>颜色值<ul><li>color name：颜色名称</li><li>HEX：十六进制记法</li><li>RGB：rgb记法</li><li>RGBA：rgba记法</li></ul></li></ul></li></ol><h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><ul><li>CSS3介绍： 是CSS的第三套标准,CSS3的标准规范还没有确定下来，W3C 仍然在对 CSS3 规范进行开发。所以在pc端的浏览器支持程度差，需要添加私有前缀,移动端浏览器用的都是最新版本所以不存在兼容性。</li><li>私有前缀<ul><li>更具常用的浏览器内核来划分：chrome firefox IE Safari Opera</li><li>WebKit内核　　 css前缀<code>-webkit-</code></li><li>Mozilla内核　　 css前缀-moz-</li><li>Opera 内核 　　 css前缀 <code>-o-</code></li><li>Trident内核　　 css前缀 <code>-ms-</code></li></ul></li><li>开发中使用PostCSS的Autoprefixer插件自动补充前缀</li></ul><h2 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h2><ul><li><code>text-shadow: h-shadow v-shadow blur color</code><ul><li>h-shadow    必需。水平阴影的位置。允许负值</li><li>v-shadow    必需。垂直阴影的位置。允许负值</li><li>blur    可选。模糊的距离</li><li>color    可选。阴影的颜色</li></ul></li></ul><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><pre><code>- 边框圆角：`border-radius:200px 200px 200px 200px`    - 参数：原点、半径1-4个，可以不一样    - 可分别设置长、短半径，以“/”进行分隔，遵循“1，2，3，4”规则，“/”前面的1~4个用来设置横轴半径（分别对应横轴1、2、3、4位置 ），“/”后面1~4个参数用来设置纵轴半径（分别对应纵轴1、2、3、4位置 ）- 盒阴影：`box-shadow: h-shadow v-shadow blur spread color inset;`    - h-shadow    必需。水平阴影的位置。允许负值。    - v-shadow    必需。垂直阴影的位置。允许负值    - blur    可选。模糊距离    - spread    可选。阴影的尺寸。    - color    可选。阴影的颜色。请参阅 CSS 颜色值。    - inset    可选。将外部阴影 (outset) 改为内部阴影。</code></pre><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><pre><code>- </code></pre><h1 id="CSS实现响应式布局"><a href="#CSS实现响应式布局" class="headerlink" title="CSS实现响应式布局"></a>CSS实现响应式布局</h1><ul><li><p>通过查询screen的宽度来指定某个宽度区间的网页布局。</p><ul><li>超小屏幕（移动设备） 768px以下</li><li>小屏设备 768px-992px</li><li>中等屏幕 992px-1200px</li><li>宽屏设备 1200px以上<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">/*0-768 需要在移动端的时候  显示绿色并且是100%显示*/</div><div class="line"></div><div class="line">/*需要查询当前屏幕下的尺寸 and 之后需要加空格*/</div><div class="line"></div><div class="line">@media screen and (max-width:768px)&#123;</div><div class="line"></div><div class="line">    /*定义我们这个区间内的样式*/</div><div class="line"></div><div class="line">    .container&#123;</div><div class="line"></div><div class="line">        width: 100%;</div><div class="line"></div><div class="line">        background: green;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/*768-992 需要在小屏幕设备下  显示黄色并且宽度750px*/</div><div class="line"></div><div class="line">@media screen and (min-width:768px) and (max-width: 992px)&#123;</div><div class="line"></div><div class="line">    /*定义我们这个区间内的样式*/</div><div class="line"></div><div class="line">    .container&#123;</div><div class="line"></div><div class="line">        width: 750px;</div><div class="line"></div><div class="line">        background: yellow;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/*992-1200 需要在中等屏幕下  显示蓝色并且 宽度是 970px*/</div><div class="line"></div><div class="line">@media screen and (min-width:992px) and (max-width: 1200px)&#123;</div><div class="line"></div><div class="line">    /*定义我们这个区间内的样式*/</div><div class="line"></div><div class="line">    .container&#123;</div><div class="line"></div><div class="line">        width: 970px;</div><div class="line"></div><div class="line">        background: blue;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/*1200 需要在大屏幕下 显示粉红色 宽度1170px*/</div><div class="line"></div><div class="line">@media screen and (min-width:1200px)&#123;</div><div class="line"></div><div class="line">    /*定义我们这个区间内的样式*/</div><div class="line"></div><div class="line">    .container&#123;</div><div class="line"></div><div class="line">        width: 1170px;</div><div class="line"></div><div class="line">        background: pink;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li><li><p><code>bootstrap</code>框架用来开发响应式页面</p></li></ul></style></p></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS介绍&quot;&gt;&lt;a href=&quot;#CSS介绍&quot; class=&quot;headerlink&quot; title=&quot;CSS介绍&quot;&gt;&lt;/a&gt;CSS介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;CSS 指层叠样式表 (Cascading Style Sheets)，是用来定义HTML元素在页面中如
      
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Node.js学习--path模块</title>
    <link href="http://yoursite.com/2018/01/23/Node-js%E5%AD%A6%E4%B9%A0-path%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2018/01/23/Node-js学习-path模块/</id>
    <published>2018-01-23T06:48:07.000Z</published>
    <updated>2018-06-03T08:06:56.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node中的路径分类"><a href="#Node中的路径分类" class="headerlink" title="Node中的路径分类"></a>Node中的路径分类</h1><ul><li>node中的路径大致分5类，dirname,filename,process.cwd(),./,../,其中前三个都是绝对路径。</li><li><p>假设的文件目录结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">path/</div><div class="line">  - dist/</div><div class="line">  - src/</div><div class="line">      - task.js</div></pre></td></tr></table></figure></li><li><p>在task.js文件中写入以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;);</div><div class="line">console.log(__dirname);</div><div class="line">console.log(__filename);</div><div class="line">console.log(prcess.cwd()); //返回Node.js 进程当前工作的目录。</div><div class="line">console.log(path.resolve(&apos;./&apos;));</div></pre></td></tr></table></figure></li><li><p>在editor目录下运行node src/task.js，我们可以看到结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">F:\SelfProject\nodeJS-demo\path\src</div><div class="line">F:\SelfProject\nodeJS-demo\path\src\task.js</div><div class="line">F:\SelfProject\nodeJS-demo\path</div><div class="line">F:\SelfProject\nodeJS-demo\path</div></pre></td></tr></table></figure></li><li><p>在src目录下运行这个文件，node task.js,运行结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/Users/laihuamin/Documents/richEditor/editor/src</div><div class="line">/Users/laihuamin/Documents/richEditor/editor/src/task.js</div><div class="line">/Users/laihuamin/Documents/richEditor/editor/src</div><div class="line">/Users/laihuamin/Documents/richEditor/editor/src</div></pre></td></tr></table></figure></li><li><p>归纳</p><ol><li>__dirname:返回的是这个文件所在文件夹的位置</li><li>__filename:你运行命令代表的是文件所在的位置，不管你运行什么命令，都是指向文件</li><li>process.cwd():你运行node命令所在文件夹的位置，比如你在src目录下运行，那么就是输出到src为止</li></ol></li></ul><h1 id="path的模块"><a href="#path的模块" class="headerlink" title="path的模块"></a>path的模块</h1><h2 id="path-normalize-规范化路径"><a href="#path-normalize-规范化路径" class="headerlink" title="path.normalize(规范化路径)"></a>path.normalize(规范化路径)</h2><ul><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;);</div><div class="line">console.log(path.normalize(&apos;/foo/bar//baz/asdf/quux/..&apos;));</div><div class="line"></div><div class="line">/*  输出结果  */</div><div class="line">/foo/bar/baz/asdf</div></pre></td></tr></table></figure></li></ul><h2 id="path-join"><a href="#path-join" class="headerlink" title="path.join"></a>path.join</h2><ul><li><p>用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;);</div><div class="line"></div><div class="line">console.log(path.join(&apos;src&apos;,&apos;task.js));  //src/task.js</div><div class="line">console.log(path.join(&apos;/foo&apos;,&apos;bar&apos;,&apos;baz/asdf&apos;,&apos;quux&apos;,&apos;..&apos;));   //\foo\bar\baz\asdf</div></pre></td></tr></table></figure></li><li><p>规则:<br>  1.传入的参数是字符串的路径片段，可以是一个，也可以是多个<br>  2.返回的是一个拼接好的路径，但是根据平台的不同，他会对路径进行不同的规范化，举个例子，Unix系统是”/“，Windows系统是”\“，那么你在两个系统下看到的返回结果就不一样。<br>  3.如果返回的路径字符串长度为零，那么他会返回一个’.’，代表当前的文件夹。<br>  4.如果传入的参数中有不是字符串的，那就直接会报错</p><h2 id="path-parse-string"><a href="#path-parse-string" class="headerlink" title="path.parse(string)"></a>path.parse(string)</h2></li><li><p>返回路径字符串的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;);</div><div class="line">console.log(path.parse(&apos;/Users/laihuamin/Documents/richEditor/editor/src/task.js&apos;));</div><div class="line">&#123; </div><div class="line">  root: &apos;/&apos;,</div><div class="line">  dir: &apos;/Users/laihuamin/Documents/richEditor/editor/src&apos;,</div><div class="line">  base: &apos;task.js&apos;,</div><div class="line">  ext: &apos;.js&apos;,</div><div class="line">  name: &apos;task&apos; </div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>对象解析:<br>  1.root：代表根目录<br>  2.dir：代表文件所在的文件夹<br>  3.base：代表整一个文件<br>  4.name：代表文件名<br>  5.ext: 代表文件的后缀名</p><h2 id="path-basename"><a href="#path-basename" class="headerlink" title="path.basename"></a>path.basename</h2></li><li>返回路径中的最后一个部分</li><li>可以接收两个参数，一个是path,还有一个是ext（可选参数）.<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;);</div><div class="line">console.log(path.basename(&apos;/Users/laihuamin/Documents/richEditor/editor/src/task.js&apos;));  //task.js</div><div class="line">console.log(path.basename(&apos;/Users/laihuamin/Documents/richEditor/editor/src/task.js&apos;, &apos;.js&apos;));  //task</div></pre></td></tr></table></figure></li></ul><h2 id="path-dirname"><a href="#path-dirname" class="headerlink" title="path.dirname"></a>path.dirname</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Node中的路径分类&quot;&gt;&lt;a href=&quot;#Node中的路径分类&quot; class=&quot;headerlink&quot; title=&quot;Node中的路径分类&quot;&gt;&lt;/a&gt;Node中的路径分类&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;node中的路径大致分5类，dirname,filename,p
      
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="path模块" scheme="http://yoursite.com/tags/path%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>React项目搭建</title>
    <link href="http://yoursite.com/2018/01/18/react%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/01/18/react项目搭建/</id>
    <published>2018-01-18T05:44:07.000Z</published>
    <updated>2018-06-04T14:55:33.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用create-react-app创建项目"><a href="#使用create-react-app创建项目" class="headerlink" title="使用create-react-app创建项目"></a>使用create-react-app创建项目</h1><ul><li>安装： <code>npm install -g create-react-app</code></li><li>创建项目：<code>creact-react-app my-app</code></li><li><code>cd my-app</code></li><li><code>yarn install</code></li><li><code>yarn start</code></li></ul><h1 id="使用react-app-rewired改写项目有配置"><a href="#使用react-app-rewired改写项目有配置" class="headerlink" title="使用react-app-rewired改写项目有配置"></a>使用<code>react-app-rewired</code>改写项目有配置</h1><ul><li>安装<code>yarn add react-app-rewired --save-dev</code></li><li><p>在项目根目录创建<code>config-overrides.js</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">module.exports = function override(config, env) &#123;</div><div class="line">  //do stuff with the webpack config...</div><div class="line">  return config;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>改写package.json文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  /* package.json */</div><div class="line"></div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">-   &quot;start&quot;: &quot;react-scripts start&quot;,</div><div class="line">+   &quot;start&quot;: &quot;react-app-rewired start&quot;,</div><div class="line">-   &quot;build&quot;: &quot;react-scripts build&quot;,</div><div class="line">+   &quot;build&quot;: &quot;react-app-rewired build&quot;,</div><div class="line">-   &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;,</div><div class="line">+   &quot;test&quot;: &quot;react-app-rewired test --env=jsdom&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="在react-app-rewire改写的项目中配置Sass和Less"><a href="#在react-app-rewire改写的项目中配置Sass和Less" class="headerlink" title="在react-app-rewire改写的项目中配置Sass和Less"></a>在<code>react-app-rewire</code>改写的项目中配置Sass和Less</h2><ol><li><p>Sass使用配置</p><ul><li>安装<code>yarn add react-app-rewire-sass-modules sass-loader node-sass -D</code></li><li>在<code>config-overrides.js</code>文件中添加配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const rewireSass = require(&apos;react-app-rewire-sass-modules&apos;);</div><div class="line">module.exports = function override(config, env) &#123;</div><div class="line">    config = rewireSass(config, env);</div><div class="line">     return config;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li><li><p>Less使用配置</p><ul><li>安装<code>yarn add react-app-rewire-less -D</code></li><li>在<code>config-overrides.js文件中添加配置</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const rewireLess = require(&apos;react-app-rewire-less&apos;);</div><div class="line"></div><div class="line">/* config-overrides.js */</div><div class="line">module.exports = function override(config, env) &#123;</div><div class="line">    config = rewireLess(config, env);</div><div class="line">    // with loaderOptions</div><div class="line">    // config = rewireLess.withLoaderOptions(someLoaderOptions)(config, env);</div><div class="line">    return config;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li></ol><h1 id="create-react-ap创建的项目中配置Sass"><a href="#create-react-ap创建的项目中配置Sass" class="headerlink" title="create-react-ap创建的项目中配置Sass"></a>create-react-ap创建的项目中配置Sass</h1><ul><li><p>安装依赖</p><ul><li>npm install sass-loader node-sass –save-dev</li></ul></li><li><p>在<code>node_modules/react-scripts/config</code>下找到 <code>webpack.config.dev.js</code>和<code>webpack.config.prod.js</code>文件，在 exclude 中添加 <code>/.scss$/</code>,</p></li><li><p>在loaders中添加一项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: /\.scss$/,</div><div class="line">    loaders: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;sass-loader&apos;],</div><div class="line">&#125;,</div></pre></td></tr></table></figure></li></ul><p><img src="http://ojvil4eq9.bkt.clouddn.com/18-1-18/8728998.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用create-react-app创建项目&quot;&gt;&lt;a href=&quot;#使用create-react-app创建项目&quot; class=&quot;headerlink&quot; title=&quot;使用create-react-app创建项目&quot;&gt;&lt;/a&gt;使用create-react-app创建
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Windows下使用命令行查看端口号和关闭进程</title>
    <link href="http://yoursite.com/2018/01/03/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%92%8C%E5%85%B3%E9%97%AD%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/01/03/Windows下使用命令行查看端口号和关闭进程/</id>
    <published>2018-01-03T07:27:06.000Z</published>
    <updated>2018-01-04T05:38:50.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h2><ul><li><code>netstat -nao</code> 查看所有端口</li><li><code>netstat -nao | findstr &quot;9010&quot;</code> 只查看9010端口</li><li>通过PID查找到相应的进程<ul><li><code>tasklist | findstr &quot;3017&quot;</code></li></ul></li><li>通过PID关闭进程<ul><li><code>taskkill /pid 3017</code></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查看端口&quot;&gt;&lt;a href=&quot;#查看端口&quot; class=&quot;headerlink&quot; title=&quot;查看端口&quot;&gt;&lt;/a&gt;查看端口&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;netstat -nao&lt;/code&gt; 查看所有端口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netstat 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack的学习一</title>
    <link href="http://yoursite.com/2017/12/24/webpack%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://yoursite.com/2017/12/24/webpack的学习一/</id>
    <published>2017-12-24T01:25:11.000Z</published>
    <updated>2018-06-03T08:14:41.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li>使用之前确保安装了 Node.js 的最新版本; </li><li>官方推荐本地安装webpack,使我们在引入破坏式变更(breaking change)的依赖时，更容易分别升级项目<ul><li><code>npm install --save-dev webpack</code></li></ul></li><li>npm脚本命令: <code>webpack --config webpack.config.js</code></li></ul><h1 id="webpack概念"><a href="#webpack概念" class="headerlink" title="webpack概念"></a>webpack概念</h1><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><pre><code>- entry属性：指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。- 通过在webpack.config.js配置文件中配置`entry`属性，来指定一个入口起点（或多个入口起点）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> module.exports = &#123;</div><div class="line">    entry: &apos;path/to/my/entry/file.js&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></code></pre><h2 id="出口"><a href="#出口" class="headerlink" title="出口"></a>出口</h2><ul><li>output属性：告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件。你可以通过在配置中指定一个 output 字段，来配置这些处理过程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;);</div><div class="line">    module.exports = &#123;</div><div class="line">        entry: &apos;./path/to/my/entry/file.js&apos;,</div><div class="line">     output: &#123;</div><div class="line">        path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">        filename: &apos;my-first-webpack.bundle.js&apos;</div><div class="line">    &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></li></ul><h2 id="loader-装载"><a href="#loader-装载" class="headerlink" title="loader(装载)"></a>loader(装载)</h2><ul><li>loader:让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理</li><li>weppack的核心思想–“万物皆模块”</li><li>loader的目标</li><li>识别出应该被对应的 loader 进行转换的那些文件。(使用 test 属性)</li><li>转换这些文件，从而使其能够被添加到依赖图中（并且最终添加到 bundle 中）(use 属性)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;);</div><div class="line">const config = &#123;</div><div class="line">    entry: &apos;./path/to/my/entry/file.js&apos;,</div><div class="line">    output: &#123;</div><div class="line">        path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">        filename: &apos;my-first-webpack.bundle.js&apos;</div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        rules: [</div><div class="line">            &#123; test: /\.txt$/, use: &apos;raw-loader&apos; &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = config;</div></pre></td></tr></table></figure></li></ul><h2 id="plugins-插件"><a href="#plugins-插件" class="headerlink" title="plugins(插件)"></a>plugins(插件)</h2><ul><li>plugins概念：插件用于loader不能完成的任务，插件可以执行范围更广的任务，从打包优化和压缩，一直到重新定义环境中的变量</li><li>插件使用：只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">        const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;); // 通过 npm 安装</div><div class="line">        const webpack = require(&apos;webpack&apos;); // 用于访问内置插件</div><div class="line">        const path = require(&apos;path&apos;);</div><div class="line"></div><div class="line">        const config = &#123;</div><div class="line">            entry: &apos;./path/to/my/entry/file.js&apos;,</div><div class="line">            output: &#123;</div><div class="line">                path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">                filename: &apos;my-first-webpack.bundle.js&apos;</div><div class="line">            &#125;,</div><div class="line">            module: &#123;</div><div class="line">                rules: [</div><div class="line">                    &#123; test: /\.txt$/, use: &apos;raw-loader&apos; &#125;</div><div class="line">                ]</div><div class="line">            &#125;,</div><div class="line">            plugins: [</div><div class="line">                new webpack.optimize.UglifyJsPlugin(),</div><div class="line">                new HtmlWebpackPlugin(&#123;template: &apos;./src/index.html&apos;&#125;)</div><div class="line">            ]</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">module.exports = config;</div></pre></td></tr></table></figure></li></ul><h1 id="管理资源"><a href="#管理资源" class="headerlink" title="管理资源"></a>管理资源</h1><h2 id="加载CSS"><a href="#加载CSS" class="headerlink" title="加载CSS"></a>加载CSS</h2><ul><li>为了从 JavaScript 模块中 import 一个 CSS 文件，你需要在 module 配置中 安装并添加 style-loader 和 css-loader</li><li><p><code>npm install --save-dev style-loader css-loader</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    ...</div><div class="line">    module: &#123;</div><div class="line">        rules: [</div><div class="line">            &#123;</div><div class="line">                test: /\.css$/,</div><div class="line">                use: [</div><div class="line">                    &apos;style-loader,</div><div class="line">                    &apos;css-loader&apos;                </div><div class="line">                ]</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>对一个单独的 module 对象定义了 rules 属性，里面包含两个必须属性：<code>test</code> 和 <code>use</code>这告诉 webpack 编译器(compiler) 如下信息</p><ul><li>“嘿，webpack 编译器，当你碰到「在 require()/import 语句中被解析为 ‘.txt’ 的路径」时，在你对它打包之前，先使用 raw-loader 转换一下。”</li></ul></li></ul><h2 id="加载Sass"><a href="#加载Sass" class="headerlink" title="加载Sass"></a>加载Sass</h2><ul><li><code>npm install --save-dev style-loader css-loader node-sass sass-loader</code></li><li>node-sass 和 webpack 是 sass-loader 的 peerDependency，因此能够精确控制它们的版本。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    ...</div><div class="line">    module: &#123;</div><div class="line">        rules: [</div><div class="line">            &#123;</div><div class="line">                test: /\.scss$/,</div><div class="line">                use: [</div><div class="line">                    &apos;style-loader, // 将 JS 字符串生成为 style 节点</div><div class="line">                    &apos;css-loader&apos;,  // 将 CSS 转化成 CommonJS 模块</div><div class="line">                    &apos;sass-loader&apos;  // 将 Sass 编译成 CSS          </div><div class="line">                ]</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="加载less"><a href="#加载less" class="headerlink" title="加载less"></a>加载less</h2><ul><li><code>npm install --save-dev style-loader css-loader less-loader less</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// webpack.config.js</div><div class="line">module.exports = &#123;</div><div class="line">    ...</div><div class="line">    module: &#123;</div><div class="line">        rules: [&#123;</div><div class="line">            test: /\.less$/,</div><div class="line">            use: [&#123;</div><div class="line">                loader: &quot;style-loader&quot; // creates style nodes from JS strings</div><div class="line">            &#125;, </div><div class="line">            &#123;</div><div class="line">                loader: &quot;css-loader&quot; // translates CSS into CommonJS</div><div class="line">            &#125;, </div><div class="line">            &#123;</div><div class="line">                loader: &quot;less-loader&quot; // compiles Less to CSS</div><div class="line">            &#125;]</div><div class="line">        &#125;]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><h2 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h2><ul><li>使用 file-loader，我们可以将图片混合到 CSS 中</li><li><code>npm install --save-dev file-loader</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    ...</div><div class="line">    module: &#123;</div><div class="line">        rules: [</div><div class="line">            &#123;</div><div class="line">                test: /\.(png|svg|jpg|gif)$/,</div><div class="line">                use: [</div><div class="line">                    &apos;file-loader&apos;</div><div class="line">                ]</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="加载字体"><a href="#加载字体" class="headerlink" title="加载字体"></a>加载字体</h2><pre><code>- 使用file-loader 和 url-loader 可以接收并加载任何文件，然后将其输出到构建目录</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    ...</div><div class="line">    module: &#123;</div><div class="line">        rules: [</div><div class="line">            &#123;</div><div class="line">                test: /\.(woff|woff2|eot|ttf|otf)$/,</div><div class="line">                use: [</div><div class="line">                    &apos;file-loader&apos;</div><div class="line">                ]</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h2><ul><li>要导入 CSV、TSV 和 XML，你可以使用 csv-loader 和 xml-loader<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    ...</div><div class="line">    module: &#123;</div><div class="line">        rules: [</div><div class="line">             &#123;</div><div class="line">                test: /\.(csv|tsv)$/,</div><div class="line">                use: [</div><div class="line">                    &apos;csv-loader&apos;</div><div class="line">                ]</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: /\.xml$/,</div><div class="line">                use: [</div><div class="line">                    &apos;xml-loader&apos;</div><div class="line">                ]</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="管理输出"><a href="#管理输出" class="headerlink" title="管理输出"></a>管理输出</h1><h2 id="使用HtmlWebpackPlugin"><a href="#使用HtmlWebpackPlugin" class="headerlink" title="使用HtmlWebpackPlugin"></a>使用HtmlWebpackPlugin</h2><ul><li>在webpack.config.js配置时，当我们更改一个入口起点的名称，甚至添加了一个新的名称，生成的包将重命名，但是html文件还是会引用旧的名字，为了解决这种问题,HtmlWebpackPlugin将生成自动引用js包文件名的html文件</li><li><code>npm install --save-dev html-webpack-plugin</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;);</div><div class="line">  const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</div><div class="line">  module.exports = &#123;</div><div class="line">      entry: &#123;</div><div class="line">          app: &apos;./src/index.js&apos;,</div><div class="line">          print: &apos;./src/print.js&apos;</div><div class="line">      &#125;,</div><div class="line">      plugins: [</div><div class="line">          new HtmlWebpackPlugin(&#123;</div><div class="line">              title: &apos;Output Management&apos;</div><div class="line">          &#125;)</div><div class="line">      ],</div><div class="line">      output: &#123;</div><div class="line">          filename: &apos;[name].bundle.js&apos;,</div><div class="line">          path: path.resolve(__dirname, &apos;dist&apos;)</div><div class="line">      &#125;</div><div class="line">  &#125;;</div></pre></td></tr></table></figure></li></ul><h2 id="清理上次webpack生成的文件夹-dist文件夹"><a href="#清理上次webpack生成的文件夹-dist文件夹" class="headerlink" title="清理上次webpack生成的文件夹(/dist文件夹)"></a>清理上次webpack生成的文件夹(/dist文件夹)</h2><ul><li>由于过去的指南和代码示例遗留下来，导致我们的 /dist 文件夹相当杂乱，在每次构建前清理 /dist 文件夹，是比较推荐的做法，因此只会生成用到的文件,使用<code>clean-webpack-plugin</code>插件</li><li><code>npm install clean-webpack-plugin --save-dev</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;);</div><div class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</div><div class="line">const CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;);</div><div class="line">module.exports = &#123;</div><div class="line">    entry: &#123;</div><div class="line">        app: &apos;./src/index.js&apos;,</div><div class="line">        print: &apos;./src/print.js&apos;</div><div class="line">    &#125;,</div><div class="line">    plugins: [</div><div class="line">        new CleanWebpackPlugin([&apos;dist&apos;]),</div><div class="line">        new HtmlWebpackPlugin(&#123;</div><div class="line">            title: &apos;Output Management&apos;</div><div class="line">        &#125;)</div><div class="line">    ],</div><div class="line">    output: &#123;</div><div class="line">        filename: &apos;[name].bundle.js&apos;,</div><div class="line">        path: path.resolve(__dirname, &apos;dist&apos;)</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用之前确保安装了 Node.js 的最新版本; &lt;/li&gt;
&lt;li&gt;官方推荐本地安装webpack,使我们在引入破坏式变更(b
      
    
    </summary>
    
      <category term="前端构建生态" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E7%94%9F%E6%80%81/"/>
    
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习--重置密码</title>
    <link href="http://yoursite.com/2017/12/22/Mysql%E5%AD%A6%E4%B9%A0-%E9%87%8D%E7%BD%AE%E5%AF%86%E7%A0%81/"/>
    <id>http://yoursite.com/2017/12/22/Mysql学习-重置密码/</id>
    <published>2017-12-22T03:52:19.000Z</published>
    <updated>2018-06-03T07:42:16.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-打开mysql-exe和mysqld-exe所在的文件夹-复制路径地址"><a href="#1-打开mysql-exe和mysqld-exe所在的文件夹-复制路径地址" class="headerlink" title="1.打开mysql.exe和mysqld.exe所在的文件夹,复制路径地址"></a>1.打开mysql.exe和mysqld.exe所在的文件夹,复制路径地址</h2><p><img src="http://ojvil4eq9.bkt.clouddn.com/17-12-22/9315294.jpg" alt=""></p><h2 id="2-通过cmd命令进入mysql-exe所在的文件夹。"><a href="#2-通过cmd命令进入mysql-exe所在的文件夹。" class="headerlink" title="2.通过cmd命令进入mysql.exe所在的文件夹。"></a>2.通过cmd命令进入mysql.exe所在的文件夹。</h2><ul><li><code>cd C:\Program Files\MySQL\MySQL Server 5.5\bin</code></li></ul><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-打开mysql-exe和mysqld-exe所在的文件夹-复制路径地址&quot;&gt;&lt;a href=&quot;#1-打开mysql-exe和mysqld-exe所在的文件夹-复制路径地址&quot; class=&quot;headerlink&quot; title=&quot;1.打开mysql.exe和mysq
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议的学习四</title>
    <link href="http://yoursite.com/2017/12/21/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%9B%9B/"/>
    <id>http://yoursite.com/2017/12/21/HTTP协议的学习四/</id>
    <published>2017-12-21T08:06:27.998Z</published>
    <updated>2018-06-03T08:05:46.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web服务器的主要功能"><a href="#web服务器的主要功能" class="headerlink" title="web服务器的主要功能"></a>web服务器的主要功能</h2><ol><li>建立连接</li><li>接受请求–从网络中读取一条HTTP请求报文</li><li>处理请求–对请求报文进行解释，并采取行动</li><li>构建响应–创建带有正确首部的HTTP响应报文</li><li>发送响应–将响应回送给客服端</li><li>记录事务处理过程–将于已完成事务有关的内容记录在一个日志文件中。</li></ol><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><ul><li>web代理服务器是网络的中间实体，代理位于客服端和服务器之间，扮演‘中间人’的角色，在各端点之间来回传送HTTP报文。<a id="more"></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;web服务器的主要功能&quot;&gt;&lt;a href=&quot;#web服务器的主要功能&quot; class=&quot;headerlink&quot; title=&quot;web服务器的主要功能&quot;&gt;&lt;/a&gt;web服务器的主要功能&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;建立连接&lt;/li&gt;
&lt;li&gt;接受请求–从网络中读取一条HTTP请求报文&lt;/li&gt;
&lt;li&gt;处理请求–对请求报文进行解释，并采取行动&lt;/li&gt;
&lt;li&gt;构建响应–创建带有正确首部的HTTP响应报文&lt;/li&gt;
&lt;li&gt;发送响应–将响应回送给客服端&lt;/li&gt;
&lt;li&gt;记录事务处理过程–将于已完成事务有关的内容记录在一个日志文件中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;代理&quot;&gt;&lt;a href=&quot;#代理&quot; class=&quot;headerlink&quot; title=&quot;代理&quot;&gt;&lt;/a&gt;代理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;web代理服务器是网络的中间实体，代理位于客服端和服务器之间，扮演‘中间人’的角色，在各端点之间来回传送HTTP报文。
    
    </summary>
    
    
      <category term="HTTP协议" scheme="http://yoursite.com/tags/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Node.js学习--module模块</title>
    <link href="http://yoursite.com/2017/12/13/Node-js%E5%AD%A6%E4%B9%A0-module%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2017/12/13/Node-js学习-module模块/</id>
    <published>2017-12-13T06:27:42.000Z</published>
    <updated>2017-12-13T06:51:21.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="exports和module-exports的区别"><a href="#exports和module-exports的区别" class="headerlink" title="exports和module.exports的区别"></a>exports和module.exports的区别</h1><ul><li>模块require方只能看到<code>module.exports</code>这个对象，它是看不到exports对象的，而我们在编写模块时用到的exports对象实际上只是对module.exports的引用。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">exports.name = (x) =&gt; &#123;</div><div class="line">    console.log(x);</div><div class="line">&#125;</div><div class="line">//和下面一样，修改的都是同一内存地址里的东西</div><div class="line">module.exports.name = (x) =&gt; &#123;</div><div class="line">    console.log(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*----------下面这样写就存在区别-------------*/</div><div class="line">//下面的 function是一块新的内存地址，导致exports与module.exports不存在任何关系，而require方能看到的只有module.exports这个对象，看不到exports对象，所以这样写导不出去。</div><div class="line">exports = (x) =&gt; &#123;</div><div class="line">    console.log(x);</div><div class="line">&#125;</div><div class="line">//下面的写法是可以导出,说句题外话，module.exports除了导出对象，函数，还可以导出所有的类型，比如字符串、数值</div><div class="line">module.exports = (x) =&gt; &#123;</div><div class="line">    console.log(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;exports和module-exports的区别&quot;&gt;&lt;a href=&quot;#exports和module-exports的区别&quot; class=&quot;headerlink&quot; title=&quot;exports和module.exports的区别&quot;&gt;&lt;/a&gt;exports和mod
      
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="module模块" scheme="http://yoursite.com/tags/module%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>DOM操作</title>
    <link href="http://yoursite.com/2017/12/08/DOM%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/12/08/DOM操作/</id>
    <published>2017-12-08T06:45:28.000Z</published>
    <updated>2017-12-08T08:25:51.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM的定义"><a href="#DOM的定义" class="headerlink" title="DOM的定义"></a>DOM的定义</h1><ul><li>文档对象模型 (DOM) 是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合</li></ul><h1 id="DOM节点"><a href="#DOM节点" class="headerlink" title="DOM节点"></a>DOM节点</h1><ol><li>根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点：<ul><li>整个文档是一个文档节点</li><li>每个HTML元素是元素节点</li><li>HTML元素内的文本是文本节点</li><li>每个HTML属性是属性节点</li><li>注释是注释节点</li></ul></li><li>DOM节点树</li></ol><ul><li>HTML DOM 将 HTML 文档视作树结构。这种结构被称为节点树：通过 HTML DOM，树中的所有节点均可通过 JavaScript 进行访问。所有 HTML 元素（节点）均可被修改，也可以创建或删除节点。<br><img src="http://ojvil4eq9.bkt.clouddn.com/17-12-8/71429195.jpg" alt=""></li></ul><ol><li>节点的关系</li></ol><ul><li>父（parent）、子（child）和同胞（sibling）等术语用于描述这些关系。父节点拥有子节点。同级的子节点被称为同胞（兄弟或姐妹）<ul><li>在节点树中，顶端节点被称为根（root）</li><li>每个节点都有父节点、除了根（它没有父节点）</li><li>一个节点可拥有任意数量的子</li><li>同胞是拥有相同父节点的节点</li></ul></li></ul><p><img src="http://ojvil4eq9.bkt.clouddn.com/17-12-8/13541114.jpg" alt=""></p><h1 id="HTML-DOM方法-元素节点方法"><a href="#HTML-DOM方法-元素节点方法" class="headerlink" title="HTML DOM方法(元素节点方法)"></a>HTML DOM方法(元素节点方法)</h1><ul><li>方法是我们可以在节点上执行的动作<h2 id="获取DOM元素方法"><a href="#获取DOM元素方法" class="headerlink" title="获取DOM元素方法"></a>获取DOM元素方法</h2></li></ul><ol><li><p><code>getElementById</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.getElementById(&apos;id&apos;);</div></pre></td></tr></table></figure></li><li><p><code>getElementsByTagName</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.getElementsByTagName(&apos;li&apos;) //返回数组</div></pre></td></tr></table></figure></li><li><p><code>getElementsByClassName</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.getElementsByClassName(&apos;class&apos;)</div></pre></td></tr></table></figure></li><li><p><code>querySelector</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.querySelector(&quot;#myid .myclass&quot;); //返回文档中匹配指定的选择器组的第一个元素</div></pre></td></tr></table></figure></li><li><p><code>querySelectorAll</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.querySelectorAll(&apos;#myClass&apos;);  //返回的 NodeList 将包含文档中的所有节点，这些都是由特定选择器匹配的</div></pre></td></tr></table></figure></li></ol><h2 id="获取设置属性接的的方法"><a href="#获取设置属性接的的方法" class="headerlink" title="获取设置属性接的的方法"></a>获取设置属性接的的方法</h2><ol><li><code>getAttribute()</code></li></ol><ul><li>返回元素上一个指定的属性值。如果指定的属性不存在，则返回  null 或 “” （空字符串）<br>let div1 = document.getElementById(“div1”);<br>let align = div1.getAttribute(“align”);<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let dive = document.getElementById(&apos;div1&apos;);</div><div class="line">let align = div.getAttribute(&apos;align&apos;);</div></pre></td></tr></table></figure></li></ul><ol><li><code>setAttribute()</code></li></ol><ul><li>设置指定元素上的一个属性值。如果属性已经存在，则更新该值; 否则将添加一个新的属性用指定的名称和值。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//语法</div><div class="line">element.setAttribute(name, value);</div><div class="line"></div><div class="line">let div1 = document.getElementById(&quot;div1&quot;); </div><div class="line"></div><div class="line">div1.setAttribute(&quot;align&quot;, &quot;center&quot;);</div></pre></td></tr></table></figure></li></ul><ol><li><code>removeAttribute()</code>从指定的元素中删除一个属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let div = document.getElementById(&quot;div1&quot;)</div><div class="line"></div><div class="line">div.removeAttribute(&quot;align&quot;);</div></pre></td></tr></table></figure></li></ol><h1 id="HTML-DOM属性"><a href="#HTML-DOM属性" class="headerlink" title="HTML DOM属性"></a>HTML DOM属性</h1><ul><li>属性是节点（HTML 元素）的值，您能够获取或设置。</li></ul><ol><li><code>Element.innerHTML</code> </li></ol><ul><li>属性设置或获取描述元素后代的HTML语法</li></ul><ol><li><code>Node.nodeName</code></li></ol><ul><li>返回当前节点的节点名称<ul><li>nodeName 是只读的</li><li>元素节点的 nodeName 与标签名相同</li><li>属性节点的 nodeName 与属性名相同</li><li>文本节点的 nodeName 始终是 #text</li><li>文档节点的 nodeName 始终是 #document</li></ul></li></ul><ol><li><code>Node.nodeName</code></li></ol><ul><li>返回或设置当前节点的值<ul><li>元素节点的 nodeValue 是 undefined 或 null</li><li>文本节点的 nodeValue 是文本本身</li><li>属性节点的 nodeValue 是属性值</li></ul></li></ul><ol><li><code>Node.nodeType</code></li></ol><ul><li>只读属性,表示的是该节点的类型。</li></ul><p>元素类型|NodeType<br>元素|1<br>文本|3<br>注释|8<br>文档(Document)|9<br>5.<code>Node.childNodes</code></p><ul><li>返回包含指定节点的子节点的集合(NodeList 类型)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DOM的定义&quot;&gt;&lt;a href=&quot;#DOM的定义&quot; class=&quot;headerlink&quot; title=&quot;DOM的定义&quot;&gt;&lt;/a&gt;DOM的定义&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;文档对象模型 (DOM) 是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义
      
    
    </summary>
    
      <category term="DOM" scheme="http://yoursite.com/categories/DOM/"/>
    
    
      <category term="DOM" scheme="http://yoursite.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>SVG Sprites的使用</title>
    <link href="http://yoursite.com/2017/12/08/SVG%20Sprites%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/12/08/SVG Sprites的使用/</id>
    <published>2017-12-08T02:25:42.000Z</published>
    <updated>2018-06-03T07:44:11.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SVG简介"><a href="#SVG简介" class="headerlink" title="SVG简介"></a>SVG简介</h1><ul><li>SVG是一种开放标准的矢量图形语言，使用svg格式我们可以直接用代码来描绘图像，可以用任何文字处理工具打开svg图像，通过改变部分代码来使图像具有交互功能，并可以随时插入到HTML中通过浏览器来浏览。</li></ul><h1 id="SV优缺点"><a href="#SV优缺点" class="headerlink" title="SV优缺点"></a>SV优缺点</h1><table><thead><tr><th style="text-align:left">优点</th><th style="text-align:left">缺点</th></tr></thead><tbody><tr><td style="text-align:left">1.缩放无损还原，显示清晰</td><td style="text-align:left">1.SVG在绘制的性能上比PNG要差</td></tr><tr><td style="text-align:left">2.语义性良好</td><td style="text-align:left">2.局限性，对应单色或普通渐变没什么问题，但对不规则的渐变以及特效叠加效果显示不全</td></tr><tr><td style="text-align:left">3.可用CSS控制图标样式以及动画</td><td style="text-align:left">3.兼容性稍差，android4.1才开始支持</td></tr><tr><td style="text-align:left">4.减少http请求</td><td style="text-align:left">4.学习应用成本较高</td></tr></tbody></table><h1 id="使用-SVG-中的-symbol，use-元素来制作SVG-Sprite"><a href="#使用-SVG-中的-symbol，use-元素来制作SVG-Sprite" class="headerlink" title="使用 SVG 中的 symbol，use 元素来制作SVG Sprite"></a>使用 SVG 中的 symbol，use 元素来制作SVG Sprite</h1><ul><li>l;]’SVG Symbols的使用，本质上是对Sprite的进一步优化，通过<code>&lt;symbol&gt;</code>元素来对单个SVG元素进行分组，使用<code>&lt;use&gt;</code>元素引用并进行渲染。这种方法的解决了上述三种方式带来的弊端，少量的http请求，图标能被缓存方便复用，每个SVG图标可以更改大小颜色，整合、使用以及管理起来非常简单</li></ul><h1 id="Web应用中SVG的使用方式-了解"><a href="#Web应用中SVG的使用方式-了解" class="headerlink" title="Web应用中SVG的使用方式(了解)"></a>Web应用中SVG的使用方式(了解)</h1><ol><li>使用img、object、embed 标签直接引用svg</li></ol><ul><li>此方法的缺点主要在于每个图标都需单独保存成一个 SVG 文件，使用时单独请求，增加了HTTP请求数量。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;./example.svg&quot; alt=&quot;svg图标&quot;&gt;</div><div class="line">&lt;object class=&quot;example&quot; data=&quot;./example.svg&quot; type=&quot;image/svg+xml&quot;&gt;My Example SVG&lt;/object&gt;</div><div class="line">&lt;iframe src=&quot;example.svg&quot; class=&quot;example&quot;&gt;&lt;/iframe&gt;</div></pre></td></tr></table></figure></li></ul><ol><li>直接把SVG写入 HTML 中</li></ol><ul><li>Inline SVG 作为HTML文档的一部分，不需要单独请求。临时需要修改某个图标的形状也比较方便。但是Inline SVG使用上比较繁琐，需要在页面中插入一大块SVG代码不适合手写，图标复用起来也比较麻烦。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;svg width=&quot;300&quot; height=&quot;200&quot; class=&quot;example&quot;&gt;</div><div class="line">        &lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;green&quot;&gt;&lt;/rect&gt;</div><div class="line">&lt;/svg&gt;</div></pre></td></tr></table></figure></li></ul><ol><li>SVG Sprite</li></ol><ul><li>这里的Sprite技术，类似于CSS中的Sprite技术。图标图形整合在一起，实际呈现的时候准确显示特定图标。其实基础的SVG Sprite也只是将原来的位图改成了SVG而已，控制SVG大小、颜色需要重新合并SVG文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.icon-bg&#123;</div><div class="line">    display: inline-block;</div><div class="line">    width: 30px;</div><div class="line">    height: 30px;</div><div class="line">    background: url(./res/svg-sprite-background.svg);</div><div class="line">    background-size:100% 100%;</div><div class="line">&#125;</div><div class="line">.icon-facebook-logo&#123;</div><div class="line">    background-position: 0 0;</div><div class="line">&#125;</div><div class="line">.icon-earth&#123;</div><div class="line">    background-position: 0 -30px;</div><div class="line">&#125;</div><div class="line">&lt;span class=&quot;icon-bg icon-facebook-logo&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;icon-bg icon-earth&quot;&gt;&lt;/span&gt;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SVG简介&quot;&gt;&lt;a href=&quot;#SVG简介&quot; class=&quot;headerlink&quot; title=&quot;SVG简介&quot;&gt;&lt;/a&gt;SVG简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;SVG是一种开放标准的矢量图形语言，使用svg格式我们可以直接用代码来描绘图像，可以用任何文字处理工具打
      
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="SVG" scheme="http://yoursite.com/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript语句</title>
    <link href="http://yoursite.com/2017/12/04/JavaScript%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2017/12/04/JavaScript语句/</id>
    <published>2017-12-04T11:05:55.000Z</published>
    <updated>2018-06-03T08:06:11.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、条件语句"><a href="#一、条件语句" class="headerlink" title="一、条件语句"></a>一、条件语句</h1><h2 id="1-if"><a href="#1-if" class="headerlink" title="1.if"></a>1.if</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (表达式) &#123;</div><div class="line">    //表达式为真执行</div><div class="line">&#125; else &#123;</div><div class="line">    //否则</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>只有<code>false</code>,<code>null</code>,’undefined’,空字符串,数字0,数字NaN的值为假，其他所有值都是真<h2 id="2-switch语句"><a href="#2-switch语句" class="headerlink" title="2.switch语句"></a>2.switch语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">switch (i) &#123;</div><div class="line">    case 25:</div><div class="line">        alert(25);</div><div class="line">        break;</div><div class="line">    case 36:</div><div class="line">        alert(36);</div><div class="line">        bresk;</div><div class="line">    default:</div><div class="line">        alert(11);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="3-while语句"><a href="#3-while语句" class="headerlink" title="3.while语句"></a>3.while语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var i = 0;</div><div class="line">while(i&lt;10) &#123;</div><div class="line">    alert(i);</div><div class="line">    i+=1;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="二、循环语句"><a href="#二、循环语句" class="headerlink" title="二、循环语句"></a>二、循环语句</h1><h2 id="1-for语句"><a href="#1-for语句" class="headerlink" title="1.for语句"></a>1.for语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (var i = 0;i&lt;10; i++) &#123;</div><div class="line">    console.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-for-in-语句"><a href="#2-for-in-语句" class="headerlink" title="2.for in 语句"></a>2.for in 语句</h2><ul><li>判断对象是否有属性<code>myvar</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for (myvar in obj) &#123;</div><div class="line">    if(obj.hasOwnProperty(myvar)) &#123;</div><div class="line">        console.log(&apos;有&apos;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="三、强制跳转语句"><a href="#三、强制跳转语句" class="headerlink" title="三、强制跳转语句"></a>三、强制跳转语句</h1><h2 id="1-break语句立即退出循环，-循环结束-强制执行循环后的语句"><a href="#1-break语句立即退出循环，-循环结束-强制执行循环后的语句" class="headerlink" title="1.break语句立即退出循环，(循环结束)强制执行循环后的语句"></a>1.<code>break</code>语句立即退出循环，(循环结束)强制执行循环后的语句</h2><h2 id="2-continue语句只退出当前循环，退出循环后会从循环的顶部继续执行。"><a href="#2-continue语句只退出当前循环，退出循环后会从循环的顶部继续执行。" class="headerlink" title="2.continue语句只退出当前循环，退出循环后会从循环的顶部继续执行。"></a>2.<code>continue</code>语句只退出当前循环，退出循环后会从循环的顶部继续执行。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、条件语句&quot;&gt;&lt;a href=&quot;#一、条件语句&quot; class=&quot;headerlink&quot; title=&quot;一、条件语句&quot;&gt;&lt;/a&gt;一、条件语句&lt;/h1&gt;&lt;h2 id=&quot;1-if&quot;&gt;&lt;a href=&quot;#1-if&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="JavaScript语句" scheme="http://yoursite.com/tags/JavaScript%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用命令笔记</title>
    <link href="http://yoursite.com/2017/11/08/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/08/hexo常用命令笔记/</id>
    <published>2017-11-08T07:58:51.000Z</published>
    <updated>2018-06-03T07:49:55.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="书写"><a href="#书写" class="headerlink" title="书写"></a>书写</h1><ul><li><code>hexo n &quot;我的博客&quot;</code> == <code>hexo new &quot;我的博客&quot;</code> #新建文章</li><li><code>hexo p</code> == <code>hexo publish</code></li><li><code>hexo g</code> == <code>hexo generate</code>#生成</li><li><code>hexo s</code> == <code>hexo server</code> #启动服务预览</li><li><code>hexo d</code> == <code>hexo deploy</code>#部署</li></ul><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><ul><li><code>hexo server</code> #Hexo 会监视文件变动并自动更新，您无须重启服务器。</li><li><code>hexo server</code> -s #静态模式</li><li><code>hexo server -p 5000</code> #更改端口</li><li><code>hexo server -i 192.168.1.1</code> #自定义 IP</li><li><code>hexo clean</code> #清除缓存 网页正常情况下可以忽略此条命令</li><li><code>hexo g</code> #生成静态网页</li><li><code>hexo d</code> #开始部署</li><li><code>hexo server -o</code> #开启服务打开页面</li></ul><h1 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h1><ul><li><code>hexo generate</code> #使用 Hexo 生成静态文件快速而且简单</li><li><code>hexo generate --watch</code> #监视文件变动</li></ul><h1 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h1><ul><li><code>hexo deploy -g</code></li><li><code>hexo server -g</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;书写&quot;&gt;&lt;a href=&quot;#书写&quot; class=&quot;headerlink&quot; title=&quot;书写&quot;&gt;&lt;/a&gt;书写&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hexo n &amp;quot;我的博客&amp;quot;&lt;/code&gt; == &lt;code&gt;hexo new &amp;quot;我的博
      
    
    </summary>
    
      <category term="应用工具" scheme="http://yoursite.com/categories/%E5%BA%94%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Node.js--Express框架的学习</title>
    <link href="http://yoursite.com/2017/10/12/Express%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/10/12/Express框架的学习/</id>
    <published>2017-10-12T13:51:30.000Z</published>
    <updated>2018-06-03T07:43:15.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Express框架安装"><a href="#Express框架安装" class="headerlink" title="Express框架安装"></a>Express框架安装</h1><ul><li><code>npm install -g express</code></li><li><code>npm install -g express-generator</code>安装Express项目生成器</li></ul><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><ul><li>创建文件名为demo的项目<ul><li><code>express --view=ejs demo</code></li><li>cd demo</li><li>npm install</li></ul></li></ul><h2 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h2><ul><li><code>npm start</code></li><li>启动文件是/bin/www，默认端口：3000</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Express框架安装&quot;&gt;&lt;a href=&quot;#Express框架安装&quot; class=&quot;headerlink&quot; title=&quot;Express框架安装&quot;&gt;&lt;/a&gt;Express框架安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install -g express
      
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Express" scheme="http://yoursite.com/tags/Express/"/>
    
  </entry>
  
</feed>
