<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汤国斌的博客</title>
  <subtitle>学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-06T03:58:05.656Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>汤国斌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vuex学习</title>
    <link href="http://yoursite.com/2017/06/05/vuex%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/06/05/vuex学习/</id>
    <published>2017-06-05T14:29:17.000Z</published>
    <updated>2017-06-06T03:58:05.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解Vuex"><a href="#理解Vuex" class="headerlink" title="理解Vuex"></a>理解Vuex</h1><ul>
<li>运用Vue进行多组件开发时，多个组件间的数据通信和状态管理很难维护，使用Vuex将状态管理单独拎出来，应用统一的方式进行处理，在后期维护的过程中数据的修改和维护就变得简单而清晰了。<h2 id="状态管理模式"><a href="#状态管理模式" class="headerlink" title="状态管理模式"></a>状态管理模式</h2></li>
<li>vuex的状态自管理应用包含以下几个部分<ul>
<li>state，驱动应用的数据源;</li>
<li>view，以声明方式将state映射到视图； </li>
<li>actions，响应在view上的用户输入导致的状态变化</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;理解Vuex&quot;&gt;&lt;a href=&quot;#理解Vuex&quot; class=&quot;headerlink&quot; title=&quot;理解Vuex&quot;&gt;&lt;/a&gt;理解Vuex&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;运用Vue进行多组件开发时，多个组件间的数据通信和状态管理很难维护，使用Vuex将状态管理单独拎
    
    </summary>
    
      <category term="Vuex" scheme="http://yoursite.com/categories/Vuex/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="Vuex" scheme="http://yoursite.com/tags/Vuex/"/>
    
      <category term="状态管理" scheme="http://yoursite.com/tags/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>扎实基础JS一</title>
    <link href="http://yoursite.com/2017/06/03/%E6%89%8E%E5%AE%9E%E5%9F%BA%E7%A1%80JS%E4%B8%80/"/>
    <id>http://yoursite.com/2017/06/03/扎实基础JS一/</id>
    <published>2017-06-03T08:08:26.000Z</published>
    <updated>2017-06-03T08:08:26.462Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>扎实基础CSS一</title>
    <link href="http://yoursite.com/2017/06/03/%E6%89%8E%E5%AE%9E%E5%9F%BA%E7%A1%80CSS%E4%B8%80/"/>
    <id>http://yoursite.com/2017/06/03/扎实基础CSS一/</id>
    <published>2017-06-03T08:08:12.000Z</published>
    <updated>2017-06-03T08:08:12.916Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>扎实基础HTML一</title>
    <link href="http://yoursite.com/2017/06/03/%E6%89%8E%E5%AE%9E%E5%9F%BA%E7%A1%80HTML%E4%B8%80/"/>
    <id>http://yoursite.com/2017/06/03/扎实基础HTML一/</id>
    <published>2017-06-03T08:07:54.000Z</published>
    <updated>2017-06-03T08:07:54.052Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6的学习一</title>
    <link href="http://yoursite.com/2017/06/03/ES6%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://yoursite.com/2017/06/03/ES6的学习一/</id>
    <published>2017-06-03T07:57:07.000Z</published>
    <updated>2017-06-03T07:57:07.878Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue脚手架vue-cli1的学习一</title>
    <link href="http://yoursite.com/2017/06/03/vue%E8%84%9A%E6%89%8B%E6%9E%B6vue-cli%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://yoursite.com/2017/06/03/vue脚手架vue-cli的学习一/</id>
    <published>2017-06-03T03:56:27.000Z</published>
    <updated>2017-06-03T07:31:26.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-cli的模板"><a href="#vue-cli的模板" class="headerlink" title="vue-cli的模板"></a>vue-cli的模板</h1><ul>
<li>vue-cli的脚手架项目模板有webpack-simple 和 webpack</li>
<li>两种的区别在于webpack-simple 没有包括Eslint 检查功能等等功能</li>
</ul>
<h1 id="vue-cli的项目结构"><a href="#vue-cli的项目结构" class="headerlink" title="vue-cli的项目结构"></a>vue-cli的项目结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">|-- build                            // 项目构建(webpack)相关代码</div><div class="line">|   |-- build.js                     // 生产环境构建代码</div><div class="line">|   |-- check-version.js             // 检查node、npm等版本</div><div class="line">|   |-- dev-client.js                // 热重载相关</div><div class="line">|   |-- dev-server.js                // 构建本地服务器</div><div class="line">|   |-- utils.js                     // 构建工具相关</div><div class="line">|   |-- webpack.base.conf.js         // webpack基础配置</div><div class="line">|   |-- webpack.dev.conf.js          // webpack开发环境配置</div><div class="line">|   |-- webpack.prod.conf.js         // webpack生产环境配置</div><div class="line">|-- config                           // 项目开发环境配置</div><div class="line">|   |-- dev.env.js                   // 开发环境变量</div><div class="line">|   |-- index.js                     // 项目一些配置变量</div><div class="line">|   |-- prod.env.js                  // 生产环境变量</div><div class="line">|   |-- test.env.js                  // 测试环境变量</div><div class="line">|-- src                              // 源码目录</div><div class="line">|   |-- components                     // vue公共组件</div><div class="line">|   |-- store                          // vuex的状态管理</div><div class="line">|   |-- App.vue                        // 页面入口文件</div><div class="line">|   |-- main.js                        // 程序入口文件，加载各种公共组件</div><div class="line">|-- static                           // 静态文件，比如一些图片，json数据等</div><div class="line">|   |-- data                           // 群聊分析得到的数据用于数据可视化</div><div class="line">|-- .babelrc                         // ES6语法编译配置</div><div class="line">|-- .editorconfig                    // 定义代码格式</div><div class="line">|-- .gitignore                       // git上传需要忽略的文件格式</div><div class="line">|-- README.md                        // 项目说明</div><div class="line">|-- favicon.ico </div><div class="line">|-- index.html                       // 入口页面</div><div class="line">|-- package.json                     // 项目基本信息</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h1><ul>
<li>package.json文件是项目根目录下的一个文件，定义该项目开发所需要的各种模块以及一些项目配置信息（如项目名称、版本、描述、作者等）。<h2 id="自定义npm相关命令"><a href="#自定义npm相关命令" class="headerlink" title="自定义npm相关命令"></a>自定义npm相关命令</h2></li>
<li>在package.json文件里有一个scripts字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;dev&quot;: &quot;node build/dev-server.js&quot;,</div><div class="line">    &quot;build&quot;: &quot;node build/build.js&quot;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在开发环境下，在命令行中运行npm run dev就相当于在执行node build/dev-server.js。所以script字段是用来指定npm相关命令的缩写的。</p>
<h2 id="dependencies字段和devDependencies字段"><a href="#dependencies字段和devDependencies字段" class="headerlink" title="dependencies字段和devDependencies字段"></a>dependencies字段和devDependencies字段</h2><ul>
<li>dependencies字段指定了项目运行时所依赖的模块</li>
<li>devDependencies字段指定了项目开发时所依赖的模块(项目环境依赖)</li>
<li>在命令行中运行npm install命令，会自动安装dependencies和devDependencies字段中的模块。<h2 id="webpack配置相关"><a href="#webpack配置相关" class="headerlink" title="webpack配置相关"></a>webpack配置相关</h2></li>
<li>详情在webpack相关博客<h3 id="dev-server-js"><a href="#dev-server-js" class="headerlink" title="dev-server.js"></a>dev-server.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">...</div><div class="line">// http-proxy可以实现转发所有请求代理到后端真实API地址，以实现前后端开发完全分离</div><div class="line">// 在config/index.js中可以对proxyTable想进行配置</div><div class="line">var proxyMiddleware = require(&apos;http-proxy-middleware&apos;)</div><div class="line">...</div><div class="line">...</div><div class="line">// 热加载要使用webpack-dev-middleware在没有webpack-dev-server的时候进行热加载</div><div class="line">var hotMiddleware = require(&apos;webpack-hot-middleware&apos;)(compiler)</div><div class="line">// 当html-webpack-plugin模板改变是强制进行页面重新加载</div><div class="line">compiler.plugin(&apos;compilation&apos;, function (compilation) &#123;</div><div class="line">  compilation.plugin(&apos;html-webpack-plugin-after-emit&apos;, function (data, cb) &#123;</div><div class="line">    hotMiddleware.publish(&#123; action: &apos;reload&apos; &#125;)</div><div class="line">    cb()</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="webpack-base-conf-js"><a href="#webpack-base-conf-js" class="headerlink" title="webpack.base.conf.js"></a>webpack.base.conf.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">...</div><div class="line">module.export = &#123;</div><div class="line">    // 编译入口文件</div><div class="line">    entry: &#123;&#125;,</div><div class="line">    // 编译输出路径</div><div class="line">    output: &#123;&#125;,</div><div class="line">    // 一些解决方案配置</div><div class="line">    resolve: &#123;&#125;,</div><div class="line">    resolveLoader: &#123;&#125;,</div><div class="line">    module: &#123;</div><div class="line">        // 各种不同类型文件加载器配置</div><div class="line">        loaders: &#123;</div><div class="line">        ...</div><div class="line">        ...</div><div class="line">        // js文件用babel转码</div><div class="line">        &#123;</div><div class="line">            test: /\.js$/,</div><div class="line">            loader: &apos;babel&apos;,</div><div class="line">            include: projectRoot,</div><div class="line">            // 哪些文件不需要转码</div><div class="line">            exclude: /node_modules/</div><div class="line">        &#125;,</div><div class="line">        ...</div><div class="line">        ...</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    // vue文件一些相关配置</div><div class="line">    vue: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="check-version-js"><a href="#check-version-js" class="headerlink" title="check-version.js"></a>check-version.js</h3><ul>
<li>这个文件主要是用来检测当前环境中的node和npm版本和我们需要的是否一致的。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">// 加载语义化版本测试库</div><div class="line">var semver = require(&apos;semver&apos;)</div><div class="line">// 定制控制台日志的输入样式</div><div class="line">var chalk = require(&apos;chalk&apos;)</div><div class="line">// 引入package.json文件</div><div class="line">var packageConfig = require(&apos;../package.json&apos;)</div><div class="line">var exec = function (cmd) &#123;</div><div class="line">  return require(&apos;child_process&apos;)</div><div class="line">    .execSync(cmd).toString().trim()</div><div class="line">&#125;</div><div class="line">// 定义node和npm版本需求所组成的数组</div><div class="line">var versionRequirements = [</div><div class="line">  &#123;</div><div class="line">    name: &apos;node&apos;,</div><div class="line">    currentVersion: semver.clean(process.version),</div><div class="line">    versionRequirement: packageConfig.engines.node</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    name: &apos;npm&apos;,</div><div class="line">    currentVersion: exec(&apos;npm --version&apos;),</div><div class="line">    versionRequirement: packageConfig.engines.npm</div><div class="line">  &#125;</div><div class="line">]</div><div class="line">module.exports = function () &#123;</div><div class="line">  var warnings = []</div><div class="line">  // 依次判断版本是否符合要求</div><div class="line">  for (var i = 0; i &lt; versionRequirements.length; i++) &#123;</div><div class="line">    var mod = versionRequirements[i]</div><div class="line">    if (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) &#123;</div><div class="line">      warnings.push(mod.name + &apos;: &apos; +</div><div class="line">        chalk.red(mod.currentVersion) + &apos; should be &apos; +</div><div class="line">        chalk.green(mod.versionRequirement)</div><div class="line">      )</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><ul>
<li>Babel解释器的配置文件，存放在根目录下。Babel是一个转码器，项目里需要用它将ES6代码转为ES5代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 设定转码规则</div><div class="line">&quot;presets&quot;: [&quot;es2015&quot;, &quot;stage-2&quot;],</div><div class="line">// 转码的一些插件</div><div class="line">&quot;plugins&quot;: [&quot;transform-runtime&quot;],</div><div class="line">&quot;comments&quot;: false</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="editorconfig"><a href="#editorconfig" class="headerlink" title=".editorconfig"></a>.editorconfig</h3><ul>
<li>该文件定义项目的编码规范，编辑器的行为会与.editorconfig 文件中定义的一致，并且其优先级比编辑器自身的设置要高，这在多人合作开发项目时十分有用而且必要。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root = true</div><div class="line"></div><div class="line">[*]    // 对所有文件应用下面的规则</div><div class="line">charset = utf-8                    // 编码规则用utf-8</div><div class="line">indent_style = space               // 缩进用空格</div><div class="line">indent_size = 2                    // 缩进数量为2个空格</div><div class="line">end_of_line = lf                   // 换行符格式</div><div class="line">insert_final_newline = true        // 是否在文件的最后插入一个空行</div><div class="line">trim_trailing_whitespace = true    // 是否删除行尾的空格</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vue-cli的模板&quot;&gt;&lt;a href=&quot;#vue-cli的模板&quot; class=&quot;headerlink&quot; title=&quot;vue-cli的模板&quot;&gt;&lt;/a&gt;vue-cli的模板&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;vue-cli的脚手架项目模板有webpack-simple 和 webpack&lt;/li&gt;
&lt;li&gt;两种的区别在于webpack-simple 没有包括Eslint 检查功能等等功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;vue-cli的项目结构&quot;&gt;&lt;a href=&quot;#vue-cli的项目结构&quot; class=&quot;headerlink&quot; title=&quot;vue-cli的项目结构&quot;&gt;&lt;/a&gt;vue-cli的项目结构&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- build                            // 项目构建(webpack)相关代码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- build.js                     // 生产环境构建代码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- check-version.js             // 检查node、npm等版本&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- dev-client.js                // 热重载相关&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- dev-server.js                // 构建本地服务器&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- utils.js                     // 构建工具相关&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- webpack.base.conf.js         // webpack基础配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- webpack.dev.conf.js          // webpack开发环境配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- webpack.prod.conf.js         // webpack生产环境配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- config                           // 项目开发环境配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- dev.env.js                   // 开发环境变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- index.js                     // 项目一些配置变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- prod.env.js                  // 生产环境变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- test.env.js                  // 测试环境变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- src                              // 源码目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- components                     // vue公共组件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- store                          // vuex的状态管理&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- App.vue                        // 页面入口文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- main.js                        // 程序入口文件，加载各种公共组件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- static                           // 静态文件，比如一些图片，json数据等&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   |-- data                           // 群聊分析得到的数据用于数据可视化&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- .babelrc                         // ES6语法编译配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- .editorconfig                    // 定义代码格式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- .gitignore                       // git上传需要忽略的文件格式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- README.md                        // 项目说明&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- favicon.ico &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- index.html                       // 入口页面&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-- package.json                     // 项目基本信息&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="脚手架" scheme="http://yoursite.com/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>webpack的学习一</title>
    <link href="http://yoursite.com/2017/05/24/webpack%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://yoursite.com/2017/05/24/webpack的学习一/</id>
    <published>2017-05-24T13:25:11.000Z</published>
    <updated>2017-05-24T13:25:11.611Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue与后端的交互--axios的使用</title>
    <link href="http://yoursite.com/2017/05/24/Vue%E4%B8%8E%E5%90%8E%E7%AB%AF%E7%9A%84%E4%BA%A4%E4%BA%92-axios%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/05/24/Vue与后端的交互-axios的使用/</id>
    <published>2017-05-24T13:24:29.000Z</published>
    <updated>2017-06-03T08:04:50.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><ul>
<li>基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 node.js 中使用</li>
</ul>
<h1 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h1><ul>
<li>在浏览器中发送 XMLHttpRequests 请求</li>
<li>在 node.js 中发送 http请求</li>
<li>支持 Promise API</li>
<li>拦截请求和响应</li>
<li>转换请求和响应数据</li>
<li>自动转换 JSON 数据</li>
<li>客户端支持保护安全免受 XSRF 攻击 </li>
</ul>
<h1 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h1><ul>
<li><p>可以为每一个请求指定默认配置。</p>
<h2 id="全局-axios-默认配置"><a href="#全局-axios-默认配置" class="headerlink" title="全局 axios 默认配置"></a>全局 axios 默认配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">axios.defaults.baseURL = &apos;https://api.example.com&apos;;</div><div class="line">axios.defaults.headers.common[&apos;Authorization&apos;] = AUTH_TOKEN;</div><div class="line">axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;;</div></pre></td></tr></table></figure>
<h2 id="自定义实例默认配置"><a href="#自定义实例默认配置" class="headerlink" title="自定义实例默认配置"></a>自定义实例默认配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let axiosIns = axios.create(&#123;</div><div class="line">  baseURL: &apos;https://api.example.com&apos;,</div><div class="line">  timeout: 10 * 1000</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="请求方法别名"><a href="#请求方法别名" class="headerlink" title="请求方法别名"></a>请求方法别名</h1><ul>
<li><p>axios.get(url[, config])</p>
</li>
<li><p>axios.delete(url[, config])</p>
</li>
<li><p>axios.head(url[, config])</p>
</li>
<li><p>axios.post(url[, data[, config]])</p>
</li>
<li><p>axios.put(url[, data[, config]])</p>
</li>
<li><p>axios.patch(url[, data[, config]])</p>
<a id="more"></a>
</li>
</ul>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><ul>
<li><p>发送一个 GET 请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// Make a request for a user with a given ID</div><div class="line">axios.get(&apos;/user?ID=12345&apos;)</div><div class="line">  .then(function (response) &#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(function (response) &#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">// Optionally the request above could also be done as</div><div class="line">axios.get(&apos;/user&apos;, &#123;</div><div class="line">    params: &#123;</div><div class="line">      ID: 12345</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  .then(function (response) &#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(function (response) &#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>发送一个 POST 请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">axios.post(&apos;/user&apos;, &#123;</div><div class="line">    firstName: &apos;Fred&apos;,</div><div class="line">    lastName: &apos;Flintstone&apos;</div><div class="line">  &#125;)</div><div class="line">  .then(function (response) &#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(function (response) &#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>发送多个并发请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function getUserAccount() &#123;</div><div class="line">  return axios.get(&apos;/user/12345&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function getUserPermissions() &#123;</div><div class="line">  return axios.get(&apos;/user/12345/permissions&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">axios.all([getUserAccount(), getUserPermissions()])</div><div class="line">  .then(axios.spread(function (acct, perms) &#123;</div><div class="line">    // Both requests are now complete</div><div class="line">  &#125;));</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="axios-API"><a href="#axios-API" class="headerlink" title="axios API"></a>axios API</h1><ul>
<li>可以通过给 axios传递对应的参数来定制请求：axios(config)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">axios(&#123;</div><div class="line">  method: &apos;post&apos;,</div><div class="line">  url: &apos;/user/12345&apos;,</div><div class="line">  data: &#123;</div><div class="line">    firstName: &apos;Fred&apos;,</div><div class="line">    lastName: &apos;Flintstone&apos;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a>请求配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  //用来向服务器发送请求的url地址  </div><div class="line">  url: &apos;/user&apos;, </div><div class="line">  //请求方法，默认是GET方法</div><div class="line">  method: &apos;get&apos;, </div><div class="line">  //基础URL路径，假如url不是绝对路径，如 https://some-domain.com/api/v1/login?name=jack,那么向服务器发送请求的URL将会是baseURL + url</div><div class="line">  baseURL: &apos;https://some-domain.com/api/&apos;, </div><div class="line">  // transformRequest方法允许在请求发送到服务器之前修改该请求，此方法只适用于PUT、POST和PATCH方法中。而且，此方法最后必须返回一个string、ArrayBuffer或者Stream。</div><div class="line">  transformRequest: [function (data) &#123;</div><div class="line">    // Do whatever you want to transform the data</div><div class="line">    return data;</div><div class="line">  &#125;],</div><div class="line">  //transformResponse方法允许在数据传递到then/catch之前修改response数据。此方法最后也要返回数据。</div><div class="line">  transformResponse: [function (data) &#123;</div><div class="line">    // Do whatever you want to transform the data</div><div class="line">    return data;</div><div class="line">  &#125;],</div><div class="line">  // 发送自定义Headers头文件，头文件中包含了http请求的各种信息。</div><div class="line">  headers: &#123;&apos;Content-Type&apos;:&apos;application/json&apos;&#125;,</div><div class="line">  //  params是发送请求的查询参数对象，对象中的数据会被拼接成url?param1=value1&amp;param2=value2。 </div><div class="line">  params: &#123;</div><div class="line">    ID: 12345</div><div class="line">  &#125;,</div><div class="line">  //params参数序列化器</div><div class="line">  paramsSerializer: function(params) &#123;</div><div class="line">    return Qs.stringify(params, &#123;arrayFormat: &apos;brackets&apos;&#125;)</div><div class="line">  &#125;,</div><div class="line">  //data是在发送POST、PUT或者PATCH请求的数据对象。</div><div class="line">  data: &#123;</div><div class="line">    firstName: &apos;Fred&apos;</div><div class="line">  &#125;,</div><div class="line">  //请求超时设置，单位为毫秒</div><div class="line">  timeout: 1000,</div><div class="line">  //表明是否有跨域请求需要用到证书</div><div class="line">  withCredentials: false, // default</div><div class="line">  //adapter允许用户处理更易于测试的请求。返回一个Promise和一个有效的response</div><div class="line">  adapter: function (resolve, reject, config) &#123;</div><div class="line">    /* ... */</div><div class="line">  &#125;,</div><div class="line">  //auth表明提供凭证用于完成http的身份验证。这将会在headers中设置一个Authorization授权信息。自定义Authorization授权要设置在headers中。</div><div class="line">  auth: &#123;</div><div class="line">    username: &apos;janedoe&apos;,</div><div class="line">    password: &apos;s00pers3cret&apos;</div><div class="line">  &#125;</div><div class="line">  //表示服务器将返回响应的数据类型，有arraybuffer、blob、document、json、text、stream这6个类型，默认是json类似数据。</div><div class="line">  responseType: &apos;json&apos;, // default</div><div class="line">  // 用作 xsrf token 值的 cookie 名称</div><div class="line">  xsrfCookieName: &apos;XSRF-TOKEN&apos;, // default</div><div class="line">  // 带有 xsrf token 值 http head 名称</div><div class="line">  xsrfHeaderName: &apos;X-XSRF-TOKEN&apos;, // default</div><div class="line">  // 允许在上传过程中的做一些操作,允许在下载过程中的做一些操作</div><div class="line">  progress: function(progressEvent) &#123;</div><div class="line">    // Do whatever you want with the native progress event</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="响应的数据结构"><a href="#响应的数据结构" class="headerlink" title="响应的数据结构"></a>响应的数据结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  // 服务器返回的数据</div><div class="line">  data: &#123;&#125;,</div><div class="line"></div><div class="line">  // HTTP状态吗</div><div class="line">  status: 200,</div><div class="line"></div><div class="line">  // 服务器返回的消息</div><div class="line">  statusText: &apos;OK&apos;,</div><div class="line"></div><div class="line">  // 返回头</div><div class="line">  headers: &#123;&#125;,</div><div class="line"></div><div class="line">  // 在返回我们的配置</div><div class="line">  config: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;axios&quot;&gt;&lt;a href=&quot;#axios&quot; class=&quot;headerlink&quot; title=&quot;axios&quot;&gt;&lt;/a&gt;axios&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 node.js 中使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;功能特性&quot;&gt;&lt;a href=&quot;#功能特性&quot; class=&quot;headerlink&quot; title=&quot;功能特性&quot;&gt;&lt;/a&gt;功能特性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在浏览器中发送 XMLHttpRequests 请求&lt;/li&gt;
&lt;li&gt;在 node.js 中发送 http请求&lt;/li&gt;
&lt;li&gt;支持 Promise API&lt;/li&gt;
&lt;li&gt;拦截请求和响应&lt;/li&gt;
&lt;li&gt;转换请求和响应数据&lt;/li&gt;
&lt;li&gt;自动转换 JSON 数据&lt;/li&gt;
&lt;li&gt;客户端支持保护安全免受 XSRF 攻击 &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;默认配置&quot;&gt;&lt;a href=&quot;#默认配置&quot; class=&quot;headerlink&quot; title=&quot;默认配置&quot;&gt;&lt;/a&gt;默认配置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以为每一个请求指定默认配置。&lt;/p&gt;
&lt;h2 id=&quot;全局-axios-默认配置&quot;&gt;&lt;a href=&quot;#全局-axios-默认配置&quot; class=&quot;headerlink&quot; title=&quot;全局 axios 默认配置&quot;&gt;&lt;/a&gt;全局 axios 默认配置&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;axios.defaults.baseURL = &amp;apos;https://api.example.com&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;axios.defaults.headers.common[&amp;apos;Authorization&amp;apos;] = AUTH_TOKEN;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;axios.defaults.headers.post[&amp;apos;Content-Type&amp;apos;] = &amp;apos;application/x-www-form-urlencoded&amp;apos;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;自定义实例默认配置&quot;&gt;&lt;a href=&quot;#自定义实例默认配置&quot; class=&quot;headerlink&quot; title=&quot;自定义实例默认配置&quot;&gt;&lt;/a&gt;自定义实例默认配置&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let axiosIns = axios.create(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  baseURL: &amp;apos;https://api.example.com&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  timeout: 10 * 1000&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;请求方法别名&quot;&gt;&lt;a href=&quot;#请求方法别名&quot; class=&quot;headerlink&quot; title=&quot;请求方法别名&quot;&gt;&lt;/a&gt;请求方法别名&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;axios.get(url[, config])&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;axios.delete(url[, config])&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;axios.head(url[, config])&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;axios.post(url[, data[, config]])&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;axios.put(url[, data[, config]])&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;axios.patch(url[, data[, config]])&lt;/p&gt;
    
    </summary>
    
      <category term="axios" scheme="http://yoursite.com/categories/axios/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由vue-route的使用</title>
    <link href="http://yoursite.com/2017/05/24/Vue%E8%B7%AF%E7%94%B1vue-route%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/05/24/Vue路由vue-route的使用/</id>
    <published>2017-05-24T13:22:40.000Z</published>
    <updated>2017-06-03T08:47:27.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-router的使用"><a href="#vue-router的使用" class="headerlink" title="vue-router的使用"></a>vue-router的使用</h1><ul>
<li><p>javascript部分</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">// 0. 使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)</div><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import VueRouter from &apos;vue-router&apos;</div><div class="line"></div><div class="line">Vue.use(VueRouter)</div><div class="line"></div><div class="line">// 1. 定义（路由）组件。</div><div class="line">// 可以从其他文件 import 进来</div><div class="line">import Foo from &apos;@/page/login.vue&apos;</div><div class="line">import Bar from &apos;@/page/login.vue&apos;</div><div class="line"></div><div class="line">// 2. 定义路由</div><div class="line">// 每个路由应该映射一个组件。 其中&quot;component&quot; 可以是</div><div class="line">// 通过 Vue.extend() 创建的组件构造器，</div><div class="line">// 或者，只是一个组件配置对象。</div><div class="line">// 我们晚点再讨论嵌套路由。</div><div class="line">const routes = [</div><div class="line">  &#123; path: &apos;/foo&apos;, component: Foo &#125;,</div><div class="line">  &#123; path: &apos;/bar&apos;, component: Bar &#125;</div><div class="line">]</div><div class="line"></div><div class="line">// 3. 创建 router 实例，然后传 `routes` 配置</div><div class="line">// 你还可以传别的配置参数, 不过先这么简单着吧。</div><div class="line">const router = new VueRouter(&#123;</div><div class="line">  routes // （缩写）相当于 routes: routes</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 4. 创建和挂载根实例。</div><div class="line">// 记得要通过 router 配置参数注入路由，</div><div class="line">// 从而让整个应用都有路由功能</div><div class="line">const app = new Vue(&#123;</div><div class="line">  router</div><div class="line">&#125;).$mount(&apos;#app&apos;)</div><div class="line"></div><div class="line">// 现在，应用已经启动了！</div></pre></td></tr></table></figure>
</li>
<li><p>html部分</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">  &lt;h1&gt;Hello App!&lt;/h1&gt;</div><div class="line">  &lt;p&gt;</div><div class="line">    &lt;!-- 使用 router-link 组件来导航. --&gt;</div><div class="line">    &lt;!-- 通过传入 `to` 属性指定链接. --&gt;</div><div class="line">    &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</div><div class="line">    &lt;router-link to=&quot;/foo&quot;&gt;Go to Foo&lt;/router-link&gt;</div><div class="line">    &lt;router-link to=&quot;/bar&quot;&gt;Go to Bar&lt;/router-link&gt;</div><div class="line">  &lt;/p&gt;</div><div class="line">  &lt;!-- 路由出口 --&gt;</div><div class="line">  &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</div><div class="line">  &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vue-router的使用&quot;&gt;&lt;a href=&quot;#vue-router的使用&quot; class=&quot;headerlink&quot; title=&quot;vue-router的使用&quot;&gt;&lt;/a&gt;vue-router的使用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;javascript部分&lt;/p&gt;

    
    </summary>
    
      <category term="vue-router" scheme="http://yoursite.com/categories/vue-router/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="路由" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
      <category term="vue-router" scheme="http://yoursite.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js学习一</title>
    <link href="http://yoursite.com/2017/05/24/Vue-js%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://yoursite.com/2017/05/24/Vue-js学习一/</id>
    <published>2017-05-24T13:21:33.000Z</published>
    <updated>2017-05-24T14:20:36.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VueJs的单文件组件"><a href="#VueJs的单文件组件" class="headerlink" title="VueJs的单文件组件"></a>VueJs的单文件组件</h1><ul>
<li>vuejs 自定义了一种.vue文件，可以把html, css, js 写到一个文件中，从而实现了对一个组件的封装， 一个.vue 文件就是一个单独的组件。</li>
<li>.vue文件是自定义的，浏览器不认识，所以需要对该文件进行解析，在webpack构建中，需要安装vue-loader 对.vue文件进行解析。</li>
<li>好处：项目更易于维护，代码模块化清晰明了，能够使用构建工具开发更有效率<h1 id="生产环境的部署"><a href="#生产环境的部署" class="headerlink" title="生产环境的部署"></a>生产环境的部署</h1></li>
</ul>
<h1 id="vue基本指令"><a href="#vue基本指令" class="headerlink" title="vue基本指令"></a>vue基本指令</h1><ul>
<li>v-for<ul>
<li>vue的迭代渲染数据必须使用特定语法<code>item in items</code></li>
<li>可以为数组索引指定别名(或者用于对象的键)<code>(item, index) in items</code></li>
<li>vueJs推荐提供一个 key 的特殊属性来做提示,以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，需要为每项提供一个唯一 key 属性<code>v-for=&quot;item in items&quot; :key=&quot;item.id&quot;</code></li>
</ul>
</li>
<li>v-show<ul>
<li>v-show 是简单地切换元素的 CSS 属性 display,用来显示或者隐藏元素</li>
<li>v-show 必须提供布尔值，不支持 <code>&lt;template&gt;</code> 语法，也不支持 <code>v-else</code>。</li>
</ul>
</li>
<li>v-if<ul>
<li>根据表达式的值的真假条件渲染元素</li>
</ul>
</li>
<li>v-else-if<ul>
<li>前一兄弟元素必须有 v-if 或 v-else-if</li>
</ul>
</li>
<li>v-else<ul>
<li>不需要表达式 前一兄弟元素必须有 v-if 或 v-else-if</li>
</ul>
</li>
<li>v-text<ul>
<li>绑定数据，只能渲染成文本格式<code>&lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;</code></li>
</ul>
</li>
<li>v-html<ul>
<li>绑定输出真正的HTML格式<code>&lt;div v-html=&quot;rawHtml&quot;&gt;&lt;/div&gt;</code><a id="more"></a></li>
</ul>
</li>
<li><p>v-bind</p>
<ul>
<li>为元素动态地绑定一个或多个特性，或一个组件 prop 到表达式。</li>
<li><code>v-bind</code>缩写：例<code>&lt;img v-bind:src=&quot;imageSrc&quot;&gt;</code>等同<code>&lt;img :src=&quot;imageSrc&quot;&gt;</code></li>
<li>class和style的动态绑定<ul>
<li><code>&lt;div v-bind:class=&quot;{ active: isActive }&quot;&gt;&lt;/div&gt;</code>类active是否起作用取决于属性<code>isActive</code> 是否为真值,<code>isActive</code>必须是布尔值</li>
<li>可以在对象中传入更多属性用来动态切换多个 class <code>v-bind:class=&quot;{ active: isActive, &#39;text-danger&#39;: hasError }</code></li>
<li>数组语法<code>v-bind:class=&quot;[{ active: isActive }, errorClass]</code></li>
<li>绑定内联样式：<code>&lt;div v-bind:style=&quot;{ color: activeColor, fontSize: fontSize + &#39;px&#39; }&quot;&gt;&lt;/div&gt;</code></li>
<li>绑定到一个样式对象：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;</div><div class="line">data: &#123;</div><div class="line">    styleObject: &#123;</div><div class="line">    color: &apos;red&apos;,</div><div class="line">    fontSize: &apos;13px&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>v-once </p>
<ul>
<li>只渲染元素和组件一次。随后的重新渲染,元素/组件及其所有的子节点将被视为静态内容并跳过。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;VueJs的单文件组件&quot;&gt;&lt;a href=&quot;#VueJs的单文件组件&quot; class=&quot;headerlink&quot; title=&quot;VueJs的单文件组件&quot;&gt;&lt;/a&gt;VueJs的单文件组件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;vuejs 自定义了一种.vue文件，可以把html, css, js 写到一个文件中，从而实现了对一个组件的封装， 一个.vue 文件就是一个单独的组件。&lt;/li&gt;
&lt;li&gt;.vue文件是自定义的，浏览器不认识，所以需要对该文件进行解析，在webpack构建中，需要安装vue-loader 对.vue文件进行解析。&lt;/li&gt;
&lt;li&gt;好处：项目更易于维护，代码模块化清晰明了，能够使用构建工具开发更有效率&lt;h1 id=&quot;生产环境的部署&quot;&gt;&lt;a href=&quot;#生产环境的部署&quot; class=&quot;headerlink&quot; title=&quot;生产环境的部署&quot;&gt;&lt;/a&gt;生产环境的部署&lt;/h1&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;vue基本指令&quot;&gt;&lt;a href=&quot;#vue基本指令&quot; class=&quot;headerlink&quot; title=&quot;vue基本指令&quot;&gt;&lt;/a&gt;vue基本指令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;v-for&lt;ul&gt;
&lt;li&gt;vue的迭代渲染数据必须使用特定语法&lt;code&gt;item in items&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以为数组索引指定别名(或者用于对象的键)&lt;code&gt;(item, index) in items&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;vueJs推荐提供一个 key 的特殊属性来做提示,以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，需要为每项提供一个唯一 key 属性&lt;code&gt;v-for=&amp;quot;item in items&amp;quot; :key=&amp;quot;item.id&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;v-show&lt;ul&gt;
&lt;li&gt;v-show 是简单地切换元素的 CSS 属性 display,用来显示或者隐藏元素&lt;/li&gt;
&lt;li&gt;v-show 必须提供布尔值，不支持 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 语法，也不支持 &lt;code&gt;v-else&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;v-if&lt;ul&gt;
&lt;li&gt;根据表达式的值的真假条件渲染元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;v-else-if&lt;ul&gt;
&lt;li&gt;前一兄弟元素必须有 v-if 或 v-else-if&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;v-else&lt;ul&gt;
&lt;li&gt;不需要表达式 前一兄弟元素必须有 v-if 或 v-else-if&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;v-text&lt;ul&gt;
&lt;li&gt;绑定数据，只能渲染成文本格式&lt;code&gt;&amp;lt;span v-text=&amp;quot;msg&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;v-html&lt;ul&gt;
&lt;li&gt;绑定输出真正的HTML格式&lt;code&gt;&amp;lt;div v-html=&amp;quot;rawHtml&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0——从环境搭建到发布</title>
    <link href="http://yoursite.com/2017/05/23/Vue2-0%E2%80%94%E2%80%94%E4%BB%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%88%B0%E5%8F%91%E5%B8%83/"/>
    <id>http://yoursite.com/2017/05/23/Vue2-0——从环境搭建到发布/</id>
    <published>2017-05-23T11:54:15.000Z</published>
    <updated>2017-06-03T05:35:36.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue开发环境的配置"><a href="#Vue开发环境的配置" class="headerlink" title="Vue开发环境的配置"></a>Vue开发环境的配置</h1><ol>
<li>安装Nodejs<code>npm install nodejs</code></li>
<li>安装webpack<code>npm install webpack</code></li>
<li>安装vue脚手架<code>npm install vue-cli -g</code></li>
</ol>
<h1 id="用vue-cli创建模板"><a href="#用vue-cli创建模板" class="headerlink" title="用vue-cli创建模板"></a>用vue-cli创建模板</h1><ul>
<li>vue-cli的模板分为两套<ul>
<li>精简版：vue init webpack-simple 工程名字</li>
<li>常规版：vue init webpack 工程名字</li>
</ul>
</li>
<li>初始化设置根据需求来设定，多人开发时开启Project name (vue-test)(语法检测)<h1 id="安装项目依赖"><a href="#安装项目依赖" class="headerlink" title="安装项目依赖"></a>安装项目依赖</h1></li>
<li>npm install 有可能安装速度会很慢可以使用cnpm 安装淘宝镜像<code>npm install -g cnpm</code><h1 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h1></li>
<li>cd进入项目中<code>npm run dev</code><h1 id="Vue项目组件的使用"><a href="#Vue项目组件的使用" class="headerlink" title="Vue项目组件的使用"></a>Vue项目组件的使用</h1></li>
<li>组件放在工程目录/src下创建component文件夹,组件都在这个目录下创建使用</li>
<li>组件的使用<ol>
<li>引入：<code>import firstcomponent from &#39;./component/firstcomponent.vue</code></li>
<li>注册：data 代码块后面加上<code>components: { firstcomponent }</code></li>
<li>使用：在<code>&lt;template&gt;&lt;/template&gt;</code>内加上<code>&lt;firstcomponent&gt;&lt;/firstcomponent&gt;</code><a id="more"></a>
<h1 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h1></li>
</ol>
</li>
<li>安装vue-router<code>npm install vue-router --save</code></li>
<li>在man.js中导入路由模块<code>import VueRouter from &#39;vue-router&#39;</code></li>
<li>使用：<code>Vue.use(VueRouter)</code></li>
<li>挂载：<code>new Vue({
el: &#39;#app&#39;,
router,
template: &#39;&lt;App/&gt;&#39;,
components: { App }
})</code></li>
<li>配置项目路由<ol>
<li>在router文件夹的index.js文件中配置</li>
<li>导入路由模块<code>import Router from &#39;vue-router&#39;</code></li>
<li>引入页面模块:<code>import login from &#39;@/page/login.vue&#39;</code></li>
<li>路由的配置：export default new Router({<br> routes: [<pre><code>{path: &apos;/login&apos;,name:&apos;登录&apos;,component:login}
</code></pre> ]<br>})</li>
<li>路由的使用：在视图<template></template>标签中<router-link to="/advert"></router-link><h1 id="webpack的配置"><a href="#webpack的配置" class="headerlink" title="webpack的配置"></a>webpack的配置</h1></li>
</ol>
</li>
<li>在config文件夹下的index.js中改变文件打包后指定到的文件夹<br>  <code>index: path.resolve(__dirname, &#39;../../webapp/index.html&#39;),
  assetsRoot: path.resolve(__dirname, &#39;../../webapp&#39;),
  assetsSubDirectory: &#39;static&#39;,
  assetsPublicPath: &#39;/&#39;,</code><br>-dev: {<br>  port:8888<br>}改变文件的端口号<br>#文件打包</li>
<li>npm run build</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue开发环境的配置&quot;&gt;&lt;a href=&quot;#Vue开发环境的配置&quot; class=&quot;headerlink&quot; title=&quot;Vue开发环境的配置&quot;&gt;&lt;/a&gt;Vue开发环境的配置&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;安装Nodejs&lt;code&gt;npm install nodejs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装webpack&lt;code&gt;npm install webpack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装vue脚手架&lt;code&gt;npm install vue-cli -g&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;用vue-cli创建模板&quot;&gt;&lt;a href=&quot;#用vue-cli创建模板&quot; class=&quot;headerlink&quot; title=&quot;用vue-cli创建模板&quot;&gt;&lt;/a&gt;用vue-cli创建模板&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;vue-cli的模板分为两套&lt;ul&gt;
&lt;li&gt;精简版：vue init webpack-simple 工程名字&lt;/li&gt;
&lt;li&gt;常规版：vue init webpack 工程名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始化设置根据需求来设定，多人开发时开启Project name (vue-test)(语法检测)&lt;h1 id=&quot;安装项目依赖&quot;&gt;&lt;a href=&quot;#安装项目依赖&quot; class=&quot;headerlink&quot; title=&quot;安装项目依赖&quot;&gt;&lt;/a&gt;安装项目依赖&lt;/h1&gt;&lt;/li&gt;
&lt;li&gt;npm install 有可能安装速度会很慢可以使用cnpm 安装淘宝镜像&lt;code&gt;npm install -g cnpm&lt;/code&gt;&lt;h1 id=&quot;项目启动&quot;&gt;&lt;a href=&quot;#项目启动&quot; class=&quot;headerlink&quot; title=&quot;项目启动&quot;&gt;&lt;/a&gt;项目启动&lt;/h1&gt;&lt;/li&gt;
&lt;li&gt;cd进入项目中&lt;code&gt;npm run dev&lt;/code&gt;&lt;h1 id=&quot;Vue项目组件的使用&quot;&gt;&lt;a href=&quot;#Vue项目组件的使用&quot; class=&quot;headerlink&quot; title=&quot;Vue项目组件的使用&quot;&gt;&lt;/a&gt;Vue项目组件的使用&lt;/h1&gt;&lt;/li&gt;
&lt;li&gt;组件放在工程目录/src下创建component文件夹,组件都在这个目录下创建使用&lt;/li&gt;
&lt;li&gt;组件的使用&lt;ol&gt;
&lt;li&gt;引入：&lt;code&gt;import firstcomponent from &amp;#39;./component/firstcomponent.vue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注册：data 代码块后面加上&lt;code&gt;components: { firstcomponent }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用：在&lt;code&gt;&amp;lt;template&amp;gt;&amp;lt;/template&amp;gt;&lt;/code&gt;内加上&lt;code&gt;&amp;lt;firstcomponent&amp;gt;&amp;lt;/firstcomponent&amp;gt;&lt;/code&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="vue-cli" scheme="http://yoursite.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建博客</title>
    <link href="http://yoursite.com/2017/05/23/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/05/23/hexo搭建博客/</id>
    <published>2017-05-23T06:09:22.000Z</published>
    <updated>2017-05-23T11:56:02.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ul>
<li>第一步、执行npm install hexo-cli -g 安装hexo</li>
<li>第二部、找到你想写博客的文件夹，执行hexo init blog生成文件</li>
<li>第三步、在生成的文件blog中执行hexo server，访问<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a><h2 id="安装和配置Next主题"><a href="#安装和配置Next主题" class="headerlink" title="安装和配置Next主题"></a>安装和配置Next主题</h2></li>
<li>在hexo目录下右键Git bash通过命令<code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code><br>next主题自动下载到themes目录下</li>
<li>在blog文件下的站点配置文件_config.yml,找到 theme 字段，并将其值更改为 next<code>theme:next</code></li>
<li><code>hexo s</code>验证主题配置是否成功，浏览器输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a><h2 id="hexo书写博客"><a href="#hexo书写博客" class="headerlink" title="hexo书写博客"></a>hexo书写博客</h2></li>
<li>在source文件夹的_posts里面,通过<code>hexo new 博客标题</code>命令生成markdown文件</li>
<li>文章写好后，执行<code>hexo generate</code>命令生成静态的html文件<h2 id="发送博客到github上"><a href="#发送博客到github上" class="headerlink" title="发送博客到github上"></a>发送博客到github上</h2></li>
<li>我们之哟啊把public里面的文件发布到github上面</li>
<li>在创建github仓库是取名一定要去[github用户名].github.io 例子:saber-tgb.github.io</li>
<li>用git发送到githoub是一定要发送到master分支</li>
<li>不用更改生成的博客html文件的css，js的路径 传上去后路径就会正确<a id="more"></a>
<h2 id="next主题的配置和优化"><a href="#next主题的配置和优化" class="headerlink" title="next主题的配置和优化"></a>next主题的配置和优化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------------------------------------</div><div class="line"># Site Information Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Place your favicon.ico to /source directory.</div><div class="line">favicon: /favicon.ico   #站标  可以放在hexo文件夹下的/source里</div><div class="line"></div><div class="line"># Set default keywords (Use a comma to separate)</div><div class="line">keywords: &quot;为学,willxue,willxue.top&quot;  #网站关键字</div><div class="line"></div><div class="line"># Set rss to false to disable feed link.</div><div class="line"># Leave rss as empty to use site&apos;s feed link.</div><div class="line"># Set rss to specific value if you have burned your feed already.</div><div class="line">rss:  #rss这里不设置 引文站点配置文件已经配置了 需要安装插件</div><div class="line"></div><div class="line"># Specify the date when the site was setup</div><div class="line">since: 1990  #网站时间 从xx开始 类似 1990-2016</div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Menu Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># When running hexo in a subdirectory (e.g. domain.tld/blog)</div><div class="line"># Remove leading slashes ( &quot;/archives&quot; -&gt; &quot;archives&quot; )</div><div class="line">menu: #菜单路径设置 如果hexo在二级目录放置要去掉/</div><div class="line">  home: /</div><div class="line">  archives: /archives #归档</div><div class="line">  tags: /tags #标签</div><div class="line">  categories: /categories  #分类</div><div class="line">  about: /about #关于我</div><div class="line">  commonweal: /404.html  #公益404</div><div class="line"></div><div class="line"></div><div class="line"># Enable/Disable menu icons.</div><div class="line"># Icon Mapping:</div><div class="line">#   Map a menu item to a specific FontAwesome icon name.</div><div class="line">#   Key is the name of menu item and value is the name of FontAwsome icon.</div><div class="line">#   When an question mask icon presenting up means that the item has no mapping icon.</div><div class="line">menu_icons:  #icon图标</div><div class="line">  enable: true</div><div class="line">  # Icon Mapping.</div><div class="line">  home: home</div><div class="line">  about: user</div><div class="line">  categories: th</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  commonweal: heartbeat</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Scheme Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Schemes  #next的三个scheme</div><div class="line">#scheme: Muse</div><div class="line">#scheme: Mist</div><div class="line">scheme: Pisces</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Sidebar Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"></div><div class="line"># Social links   #社交链接</div><div class="line">social:</div><div class="line">  GitHub:</div><div class="line">  Weibo:</div><div class="line">  Others:</div><div class="line"></div><div class="line"># Social Icons  #社交的图标</div><div class="line">social_icons:</div><div class="line">  enable: true</div><div class="line">  # Icon Mappings</div><div class="line">  GitHub: github</div><div class="line">  Twitter: twitter</div><div class="line">  Weibo: weibo</div><div class="line"></div><div class="line"></div><div class="line"># Sidebar Avatar</div><div class="line"># in theme directory(source/images): /images/avatar.jpg</div><div class="line"># in site  directory(source/uploads): /uploads/avatar.jpg</div><div class="line"># default : /images/default_avatar.jpg</div><div class="line">avatar: http://7xrz9n.com1.z0.glb.clouddn.com/logo.png #头像</div><div class="line"></div><div class="line"></div><div class="line"># TOC in the Sidebar  #文章自动显示目录</div><div class="line">toc:</div><div class="line">  enable: true</div><div class="line"></div><div class="line">  # Automatically add list number to toc.  #目录是否自动显示数字序号</div><div class="line">  number: false</div><div class="line"></div><div class="line"></div><div class="line"># Creative Commons 4.0 International License.</div><div class="line"># http://creativecommons.org/  #自由协议</div><div class="line"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</div><div class="line">#creative_commons: by-nc-sa</div><div class="line">#creative_commons:</div><div class="line"></div><div class="line">sidebar:</div><div class="line">  # Sidebar Position, available value: left | right</div><div class="line">  position: left</div><div class="line">  #position: right</div><div class="line"></div><div class="line">  # Sidebar Display, available value:</div><div class="line">  #  - post    expand on posts automatically. Default.</div><div class="line">  #  - always  expand for all pages automatically</div><div class="line">  #  - hide    expand only when click on the sidebar toggle icon.</div><div class="line">  #  - remove  Totally remove sidebar including sidebar toggle icon.</div><div class="line">  display: post</div><div class="line">  #display: always</div><div class="line">  #display: hide</div><div class="line">  #display: remove</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Misc Theme Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Custom Logo.</div><div class="line"># !!Only available for Default Scheme currently.</div><div class="line"># Options:</div><div class="line">#   enabled: [true/false] - Replace with specific image</div><div class="line">#   image: url-of-image   - Images&apos;s url</div><div class="line">custom_logo:</div><div class="line">  enabled: false</div><div class="line">  image:</div><div class="line"></div><div class="line"></div><div class="line"># Code Highlight theme</div><div class="line"># Available value:</div><div class="line">#    normal | night | night eighties | night blue | night bright</div><div class="line"># https://github.com/chriskempson/tomorrow-theme</div><div class="line">highlight_theme: night</div><div class="line"></div><div class="line"># Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</div><div class="line">scroll_to_more: true</div><div class="line"></div><div class="line"># Automatically Excerpt</div><div class="line">auto_excerpt:</div><div class="line">  enable: false</div><div class="line">  length: 150</div><div class="line"></div><div class="line"># Use Lato font</div><div class="line">use_font_lato: true</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Third Party Services Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># MathJax Support</div><div class="line">mathjax:</div><div class="line"></div><div class="line"></div><div class="line"># Swiftype Search API Key</div><div class="line">#swiftype_key:</div><div class="line"></div><div class="line"># Baidu Analytics ID</div><div class="line">#baidu_analytics:</div><div class="line"></div><div class="line"># Duoshuo ShortName</div><div class="line">duoshuo_shortname: imwillxue</div><div class="line"></div><div class="line"># Disqus</div><div class="line">#disqus_shortname:</div><div class="line"></div><div class="line"># Baidu Share</div><div class="line"># Available value:</div><div class="line">#    button | slide</div><div class="line">#baidushare:</div><div class="line">##  type: button</div><div class="line"></div><div class="line"># Share</div><div class="line">#jiathis:</div><div class="line">#add_this_id:</div><div class="line"></div><div class="line"># Share</div><div class="line">duoshuo_share: true</div><div class="line"></div><div class="line"># Google Webmaster tools verification setting</div><div class="line"># See: https://www.google.com/webmasters/</div><div class="line">#google_site_verification:</div><div class="line"></div><div class="line"></div><div class="line"># Google Analytics</div><div class="line">#google_analytics:</div><div class="line"></div><div class="line"># CNZZ count</div><div class="line">#cnzz_siteid:</div><div class="line"></div><div class="line"></div><div class="line"># Make duoshuo show UA</div><div class="line"># user_id must NOT be null when admin_enable is true!</div><div class="line"># you can visit http://dev.duoshuo.com get duoshuo user id.</div><div class="line">duoshuo_info:</div><div class="line">  ua_enable: true</div><div class="line">  admin_enable: true</div><div class="line">  user_id: 6262178932196377345</div><div class="line">  admin_nickname: 神</div><div class="line"></div><div class="line"></div><div class="line"># Facebook SDK Support.</div><div class="line"># https://github.com/iissnan/hexo-theme-next/pull/410</div><div class="line">facebook_sdk:</div><div class="line">  enable: false</div><div class="line">  app_id:       #&lt;app_id&gt;</div><div class="line">  fb_admin:     #&lt;user_id&gt;</div><div class="line">  like_button:  #true</div><div class="line">  webmaster:    #true</div><div class="line"></div><div class="line"></div><div class="line"># Show number of visitors to each article.</div><div class="line"># You can visit https://leancloud.cn get AppID and AppKey.</div><div class="line">leancloud_visitors:</div><div class="line">  enable: true</div><div class="line">  app_id: QImiFijLSOHYufsazlBVlwLg-gzGzoHsz</div><div class="line">  app_key: AMcYaNHy9Y5OdH42k0d4uSED</div><div class="line"></div><div class="line"></div><div class="line"># Tencent analytics ID</div><div class="line"># tencent_analytics:</div><div class="line"></div><div class="line"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</div><div class="line">baidu_push: true</div><div class="line"></div><div class="line">## 文章末尾是否显示打赏按钮</div><div class="line">donate:</div><div class="line">  enable: true</div><div class="line">  text: Enjoy it ? Donate me !  欣赏此文？求鼓励，求支持！</div><div class="line">  alipay:</div><div class="line">  wechat:</div><div class="line"></div><div class="line"></div><div class="line">#! ---------------------------------------------------------------</div><div class="line">#! DO NOT EDIT THE FOLLOWING SETTINGS</div><div class="line">#! UNLESS YOU KNOW WHAT YOU ARE DOING</div><div class="line">#! ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Motion</div><div class="line">use_motion: true</div><div class="line"></div><div class="line"># Fancybox</div><div class="line">fancybox: true</div><div class="line"></div><div class="line"># Static files</div><div class="line">vendors: vendors</div><div class="line">css: css</div><div class="line">js: js</div><div class="line">images: images</div><div class="line"></div><div class="line"># Theme version</div><div class="line">version: 0.5.0</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装hexo&quot;&gt;&lt;a href=&quot;#安装hexo&quot; class=&quot;headerlink&quot; title=&quot;安装hexo&quot;&gt;&lt;/a&gt;安装hexo&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;第一步、执行npm install hexo-cli -g 安装hexo&lt;/li&gt;
&lt;li&gt;第二部、找到你想写博客的文件夹，执行hexo init blog生成文件&lt;/li&gt;
&lt;li&gt;第三步、在生成的文件blog中执行hexo server，访问&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/&lt;/a&gt;&lt;h2 id=&quot;安装和配置Next主题&quot;&gt;&lt;a href=&quot;#安装和配置Next主题&quot; class=&quot;headerlink&quot; title=&quot;安装和配置Next主题&quot;&gt;&lt;/a&gt;安装和配置Next主题&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;在hexo目录下右键Git bash通过命令&lt;code&gt;git clone https://github.com/iissnan/hexo-theme-next themes/next&lt;/code&gt;&lt;br&gt;next主题自动下载到themes目录下&lt;/li&gt;
&lt;li&gt;在blog文件下的站点配置文件_config.yml,找到 theme 字段，并将其值更改为 next&lt;code&gt;theme:next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo s&lt;/code&gt;验证主题配置是否成功，浏览器输入 &lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000&lt;/a&gt;&lt;h2 id=&quot;hexo书写博客&quot;&gt;&lt;a href=&quot;#hexo书写博客&quot; class=&quot;headerlink&quot; title=&quot;hexo书写博客&quot;&gt;&lt;/a&gt;hexo书写博客&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;在source文件夹的_posts里面,通过&lt;code&gt;hexo new 博客标题&lt;/code&gt;命令生成markdown文件&lt;/li&gt;
&lt;li&gt;文章写好后，执行&lt;code&gt;hexo generate&lt;/code&gt;命令生成静态的html文件&lt;h2 id=&quot;发送博客到github上&quot;&gt;&lt;a href=&quot;#发送博客到github上&quot; class=&quot;headerlink&quot; title=&quot;发送博客到github上&quot;&gt;&lt;/a&gt;发送博客到github上&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;我们之哟啊把public里面的文件发布到github上面&lt;/li&gt;
&lt;li&gt;在创建github仓库是取名一定要去[github用户名].github.io 例子:saber-tgb.github.io&lt;/li&gt;
&lt;li&gt;用git发送到githoub是一定要发送到master分支&lt;/li&gt;
&lt;li&gt;不用更改生成的博客html文件的css，js的路径 传上去后路径就会正确
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
</feed>
