<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汤国斌的博客</title>
  
  <subtitle>学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-19T15:23:43.189Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>汤国斌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>grid布局--网格模板区域</title>
    <link href="http://yoursite.com/2018/07/19/grid%E5%B8%83%E5%B1%80-%E7%BD%91%E6%A0%BC%E6%A8%A1%E6%9D%BF%E5%8C%BA%E5%9F%9F/"/>
    <id>http://yoursite.com/2018/07/19/grid布局-网格模板区域/</id>
    <published>2018-07-19T15:23:08.000Z</published>
    <updated>2018-07-19T15:23:43.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="grid布局–网格模板区域"><a href="#grid布局–网格模板区域" class="headerlink" title="grid布局–网格模板区域"></a>grid布局–网格模板区域</h1><h2 id="命名网格区域"><a href="#命名网格区域" class="headerlink" title="命名网格区域"></a>命名网格区域</h2><ul><li>通过<code>grid-area</code>属性为这些区域各分配一个名字,可以随意为区域命名；然后在 grid-template-areas 属性值中指定这个区域的位置。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;header&quot;&gt;Header&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;sidebar&quot;&gt;Sidebar&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;Content&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;Footer&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">//-----------css-----------</span><br><span class="line">.header &#123;</span><br><span class="line">    grid-area: hd;</span><br><span class="line">&#125;</span><br><span class="line">.footer &#123;</span><br><span class="line">    grid-area: ft;</span><br><span class="line">&#125;</span><br><span class="line">.content &#123;</span><br><span class="line">    grid-area: main;</span><br><span class="line">&#125;</span><br><span class="line">.sidebar &#123;</span><br><span class="line">    grid-area: sd;</span><br><span class="line">&#125;</span><br><span class="line">.wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: repeat(9, 1fr);</span><br><span class="line">    grid-auto-rows: minmax(100px, auto);</span><br><span class="line">    grid-template-areas: </span><br><span class="line">      &quot;hd hd hd hd   hd   hd   hd   hd   hd&quot;</span><br><span class="line">      &quot;sd sd sd main main main main main main&quot;</span><br><span class="line">      &quot;ft ft ft ft   ft   ft   ft   ft   ft&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://ojvil4eq9.bkt.clouddn.com/18-7-16/29508708.jpg" alt=""></p><h4 id="留出空白的网格单元"><a href="#留出空白的网格单元" class="headerlink" title="留出空白的网格单元"></a>留出空白的网格单元</h4><ul><li>留出空单元的方法是使用句点符，“.”;</li><li>为了让布局更整齐，可以使用多个 “.” 符号，如果在多个句点符号之间没有空格，那它们就会被计为一个单元格。用多个句点表示一个单元格的好处是对于复杂的布局来说很容易让行列对齐，这意味着你在 CSS 中看到的，就像是实际布局看起来那样<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: repeat(9, 1fr);</span><br><span class="line">    grid-auto-rows: minmax(100px, auto);</span><br><span class="line">    grid-template-areas: </span><br><span class="line">      &quot;hd hd hd hd   hd   hd   hd   hd   hd&quot;</span><br><span class="line">      &quot;sd sd sd main main main main main main&quot;</span><br><span class="line">      &quot;.  .  .  ft   ft   ft   ft   ft   ft&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="跨越多个网格单元"><a href="#跨越多个网格单元" class="headerlink" title="跨越多个网格单元"></a>跨越多个网格单元</h4><ul><li>在上面的例子中，每个区域都跨越了多个网格单元，为了实现这个效果，要把区域名字在它的区域内重复写多次，中间用空格分隔。你也可以在 grid-template-areas 中添加额外的空格以便让列对齐;</li><li>用区域名连接起来的区域必须是矩形的，目前还不能创建 L 形的区域;</li><li><code>grid-template-areas</code>的值必须是一个完整的网格，否则无效（即这个属性会被忽略掉），这意味着你应该让每一行都有相同数量的单元格，如果出现句点符就表示这个单元格将被留空。如果创建的区域不是矩形，也是无效的网格;</li></ul><h4 id="用媒体查询重新定义网格"><a href="#用媒体查询重新定义网格" class="headerlink" title="用媒体查询重新定义网格"></a>用媒体查询重新定义网格</h4><ul><li>若要（通过媒体查询）重新定义网格，应该把区域名称定义在媒体查询之外，在这种情况下，主要内容区域就总是会被称为 main，不管它被（媒体查询语句）定位在网格中的什么位置。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">.header &#123;</span><br><span class="line">    grid-area: hd;</span><br><span class="line">&#125;</span><br><span class="line">.footer &#123;</span><br><span class="line">    grid-area: ft;</span><br><span class="line">&#125;</span><br><span class="line">.content &#123;</span><br><span class="line">    grid-area: main;</span><br><span class="line">&#125;</span><br><span class="line">.sidebar &#123;</span><br><span class="line">    grid-area: sd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-auto-rows: minmax(100px, auto);</span><br><span class="line">    grid-template-columns: 1fr;</span><br><span class="line">    grid-template-areas: </span><br><span class="line">      &quot;hd&quot;</span><br><span class="line">      &quot;main&quot;</span><br><span class="line">      &quot;sd&quot;</span><br><span class="line">      &quot;ft&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@media (min-width: 500px) &#123;</span><br><span class="line">    .wrapper &#123;</span><br><span class="line">        grid-template-columns: repeat(9, 1fr);</span><br><span class="line">        grid-template-areas: </span><br><span class="line">          &quot;hd hd hd hd   hd   hd   hd   hd   hd&quot;</span><br><span class="line">          &quot;sd sd sd main main main main main main&quot;</span><br><span class="line">          &quot;sd sd sd  ft  ft   ft   ft   ft   ft&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media (min-width: 700px) &#123;</span><br><span class="line">    .wrapper &#123;</span><br><span class="line">        grid-template-areas: </span><br><span class="line">          &quot;hd hd hd   hd   hd   hd   hd   hd hd&quot;</span><br><span class="line">          &quot;sd sd main main main main main ft ft&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="网格定义的简写规则"><a href="#网格定义的简写规则" class="headerlink" title="网格定义的简写规则"></a>网格定义的简写规则</h2><ul><li>简写方式不仅能够一口气把多个属性缩写成一行，它们还会把一些你没有设置过的值、或不能在简写中设置的值重置成初始值。所以如果要用简写方式，一定要意识到它可能会把你在别处已经设置过的值给重置了。<h4 id="grid-template"><a href="#grid-template" class="headerlink" title="grid-template"></a><code>grid-template</code></h4></li><li><code>grid-template</code>属性可同时设置以下属性:<ul><li><code>grid-template-rows</code></li><li><code>grid-template-columns</code></li><li><code>grid-template-areas</code></li></ul></li><li>这个属性之所以被称为显式网格简写，是因为它设置的都是在定义显式网格时要用到的属性，而不是那些与创建隐式的行或列轨道相关的属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template: </span><br><span class="line">      &quot;hd hd hd hd   hd   hd   hd   hd   hd&quot; minmax(100px, auto)</span><br><span class="line">      &quot;sd sd sd main main main main main main&quot; minmax(100px, auto)</span><br><span class="line">      &quot;ft ft ft ft   ft   ft   ft   ft   ft&quot; minmax(100px, auto)</span><br><span class="line">             / 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr ;           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="grid"><a href="#grid" class="headerlink" title="grid"></a><code>grid</code></h4><ul><li>grid 简写方式更进一步，它包含了与隐式网格相关的属性，所以通过它可以同时设置以下属性：<ul><li><code>grid-template-rows</code></li><li><code>grid-template-columns</code></li><li><code>grid-template-areas</code></li><li><code>grid-auto-rows</code></li><li><code>grid-auto-columns</code></li><li><code>grid-auto-flow</code></li></ul></li><li>这个属性会把 grid-gap 属性的值重置为 0，而且你还不能在简写中设置间距值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid: &quot;hd hd hd hd   hd   hd   hd   hd   hd&quot; minmax(100px, auto)</span><br><span class="line">    &quot;sd sd sd main main main main main main&quot; minmax(100px, auto)</span><br><span class="line">    &quot;ft ft ft ft   ft   ft   ft   ft   ft&quot; minmax(100px, auto)</span><br><span class="line">    / 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr ;           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;grid布局–网格模板区域&quot;&gt;&lt;a href=&quot;#grid布局–网格模板区域&quot; class=&quot;headerlink&quot; title=&quot;grid布局–网格模板区域&quot;&gt;&lt;/a&gt;grid布局–网格模板区域&lt;/h1&gt;&lt;h2 id=&quot;命名网格区域&quot;&gt;&lt;a href=&quot;#命名网
      
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="grid布局" scheme="http://yoursite.com/tags/grid%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>grid布局--基于线的定位</title>
    <link href="http://yoursite.com/2018/07/19/grid%E5%B8%83%E5%B1%80-%E5%9F%BA%E4%BA%8E%E7%BA%BF%E7%9A%84%E5%AE%9A%E4%BD%8D/"/>
    <id>http://yoursite.com/2018/07/19/grid布局-基于线的定位/</id>
    <published>2018-07-19T15:22:28.000Z</published>
    <updated>2018-07-19T15:22:53.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="grid布局–基于线的定位"><a href="#grid布局–基于线的定位" class="headerlink" title="grid布局–基于线的定位"></a>grid布局–基于线的定位</h1><h2 id="按线编号为元素定位"><a href="#按线编号为元素定位" class="headerlink" title="按线编号为元素定位"></a>按线编号为元素定位</h2><ul><li><p>我们可以使用基于线的定位控制这些元素在网格上的位置。比如我想要第一个元素从网格的最左开始，占1个列导轨;它还应该从第1行线开始，延伸至第4行线：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">   &lt;div class=&quot;box1&quot;&gt;One&lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;box2&quot;&gt;Two&lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;box3&quot;&gt;Three&lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;box4&quot;&gt;Four&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//---------------css---------------</span><br><span class="line">.box2 &#123;</span><br><span class="line">   grid-column-start: 3;</span><br><span class="line">   grid-column-end: 4;</span><br><span class="line">   grid-row-start: 1;</span><br><span class="line">   grid-row-end: 3;</span><br><span class="line">&#125;</span><br><span class="line">.box3 &#123;</span><br><span class="line">   grid-column-start: 2;</span><br><span class="line">   grid-column-end: 3;</span><br><span class="line">   grid-row-start: 1;</span><br><span class="line">   grid-row-end: 2;</span><br><span class="line">&#125;</span><br><span class="line">.box4 &#123;</span><br><span class="line">   grid-column-start: 2;</span><br><span class="line">   grid-column-end: 4;</span><br><span class="line">   grid-row-start: 3;</span><br><span class="line">   grid-row-end: 4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当你为某些元素定位，剩下的元素会继续按照自动定位规则定位</p></li><li>网格布局的一个优势是：无需给元素周围加上margin来阻止文档流自动填补空白，就能实现设计中的留白区域</li></ul><h4 id="grid-column-和-grid-row-缩写"><a href="#grid-column-和-grid-row-缩写" class="headerlink" title="grid-column 和 grid-row 缩写"></a>grid-column 和 grid-row 缩写</h4><ul><li><code>grid-column-start</code>和<code>grid-column-end</code>属性可以合并为<code>grid-column</code>;</li><li><code>grid-row-start</code>和<code>grid-row-end</code>则合并为<code>grid-row</code>;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box1 &#123;</span><br><span class="line">   grid-column: 1 / 2;</span><br><span class="line">   grid-row: 1 / 4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="默认跨度"><a href="#默认跨度" class="headerlink" title="默认跨度"></a>默认跨度</h2><ul><li>如果一个元素只延伸一个轨道的话，可以省略 grid-column-end 或 grid-row-end 值</li><li>当省略了跨越一个轨道的元素的／和第二个值，我们的缩写则会是这样<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.box1 &#123;</span><br><span class="line">    grid-column-start: 1;</span><br><span class="line">    grid-row-start: 1;</span><br><span class="line">    grid-row-end: 4;</span><br><span class="line">&#125;</span><br><span class="line">.box2 &#123;</span><br><span class="line">    grid-column-start: 3;</span><br><span class="line">    grid-row-start: 1;</span><br><span class="line">    grid-row-end: 3</span><br><span class="line">&#125;</span><br><span class="line">//缩写省略跨域一个轨道的元素</span><br><span class="line">.box1 &#123;</span><br><span class="line">    grid-column: 1;</span><br><span class="line">    grid-row: 1/4</span><br><span class="line">&#125;</span><br><span class="line">.box2 &#123;</span><br><span class="line">    grid-column: 3;</span><br><span class="line">    grid-row: 1/3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="grid-area属性"><a href="#grid-area属性" class="headerlink" title="grid-area属性"></a><code>grid-area</code>属性</h4><ul><li>给每个元素只定义一个属性<code>grid-area</code>，值的顺序如下<ul><li><code>grid-row-start</code></li><li><code>grid-column-start</code></li><li><code>grid-row-end</code></li><li><code>grid-column-end</code></li></ul></li><li>用<code>grid-area</code>属性来定义网格区域时我们先定义 块起始（block-start） 和 行起始（inline-start）, 然后再定义 块结束（block-end） 和 行结束（inline-end）</li></ul><h2 id="反向计数"><a href="#反向计数" class="headerlink" title="反向计数"></a>反向计数</h2><ul><li>我们也可以从行和块结束线开始反方向计数，对于英语来说就是右端的列线和底端的行线。这些线会被记为 -1，然后你可以从这往前数，所以倒数第2条线会被记为 -2。值得注意的是最后一条线是指显式定义网格的最后一条线，即由 grid-template-columns 和 grid-template-rows 定义的网格，并不把隐式定义网格的加入的行和列纳入考虑</li></ul><h4 id="使元素跨越整个网格"><a href="#使元素跨越整个网格" class="headerlink" title="使元素跨越整个网格"></a>使元素跨越整个网格</h4><ul><li>拥有从开始计数和从末尾计数这两种定位方法使得使一个元素跨越整个网格变得很方便:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  grid-column: 1 / -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用-span-关键字"><a href="#使用-span-关键字" class="headerlink" title="使用 span 关键字"></a>使用 span 关键字</h2><ul><li><p>除了”起始线与结束线”的定位方法，你还可以使用”起始线与跨越轨道数量”的定位方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.box1 &#123;</span><br><span class="line">    grid-column: 1;</span><br><span class="line">    grid-row: 1 / span 3;</span><br><span class="line">&#125;</span><br><span class="line">.box2 &#123;</span><br><span class="line">    grid-column: 3;</span><br><span class="line">    grid-row: 1/ span 2;</span><br><span class="line">&#125;</span><br><span class="line">.box3 &#123;</span><br><span class="line">    grid-column: 2;</span><br><span class="line">    grid-row: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box4 &#123;</span><br><span class="line">    grid-column: 2 / span 2;</span><br><span class="line">    grid-row: 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例1：我们设定了起始行，然后说我们想结束线在跨越3个线之后。那这个元素就会从1号线开始，跨越3个线，到4号线结束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box1 &#123;</span><br><span class="line">    grid-column: 1;</span><br><span class="line">    grid-row: 1 / span 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例2：我们定义了结束行线，然后设置起始线为跨越3个线。意味着这个元素会从指定的线往上跨越3个线。这个元素会从4号线开始，跨越3个线到1号线。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box1 &#123;</span><br><span class="line">    grid-column: 1;</span><br><span class="line">    grid-row: span 3 / 4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;grid布局–基于线的定位&quot;&gt;&lt;a href=&quot;#grid布局–基于线的定位&quot; class=&quot;headerlink&quot; title=&quot;grid布局–基于线的定位&quot;&gt;&lt;/a&gt;grid布局–基于线的定位&lt;/h1&gt;&lt;h2 id=&quot;按线编号为元素定位&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="grid布局" scheme="http://yoursite.com/tags/grid%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>grid布局基本概念</title>
    <link href="http://yoursite.com/2018/07/19/grid%E5%B8%83%E5%B1%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2018/07/19/grid布局基本概念/</id>
    <published>2018-07-19T15:21:29.000Z</published>
    <updated>2018-07-19T15:22:14.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="grid布局"><a href="#grid布局" class="headerlink" title="grid布局"></a>grid布局</h1><h2 id="网格容器"><a href="#网格容器" class="headerlink" title="网格容器"></a>网格容器</h2><ul><li>通过在元素上声明<code>display:grid</code>或<code>display: inline-grid</code>来创建一个网格容器，设定后该元素的所有直系子元素将成为网格元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">   &lt;div&gt;One&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;Two&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;Three&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;Four&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;Five&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;Six&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="网格轨道"><a href="#网格轨道" class="headerlink" title="网格轨道"></a>网格轨道</h2><ul><li>我们通过<code>grid-template-columns</code>和<code>grid-template-rows</code>属性来定义网格中的列和行；一个网格轨道就是网格中任意两条线之间的空间。</li><li><code>grid-template-columns</code>: 定义网格中的列</li><li><code>grid-template-rows</code>: 定义网格中行</li></ul><h4 id="fr单位"><a href="#fr单位" class="headerlink" title="fr单位"></a>fr单位</h4><ul><li>网格引入了新的长度单位<code>fr</code>; <code>fr</code>单位代表网格容器中可用空间的一部分，轨道会随着可用空间增长和收缩。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">   &lt;div&gt;One&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;Two&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;Three&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;Four&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;Five&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;Six&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: 1fr 1fr 1fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用repeat"><a href="#使用repeat" class="headerlink" title="使用repeat()"></a>使用<code>repeat()</code></h4><ul><li><p>有着多轨道的大型网格可使用<code>repeat()</code> 标记来重复部分或整个轨道列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: 1fr 1fr 1fr;</span><br><span class="line">&#125;</span><br><span class="line">//也可写成</span><br><span class="line">.wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: repeat(3, 1fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>repeat</code>语句可以用于重复轨道列表中的一部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//起始轨道为100像素，接着重复了4个1fr的轨道，最后再添加了一个100像素的轨道</span><br><span class="line">.wraper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: 100px repeat(4, 1fr) 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>repeat</code>语句可以传入一个轨道列表，因此你可以用它来创建一个多轨道模式的重复轨道列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//网格将有共计10个轨道，为1个1fr轨道后面跟着1个2fr轨道，该模式重复5次。</span><br><span class="line">.wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: repeat(5,1fr,2fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="隐式和显式网格"><a href="#隐式和显式网格" class="headerlink" title="隐式和显式网格"></a>隐式和显式网格</h4><ul><li>使用<code>grid-template-columns</code>和<code>grid-template-rows</code>属于定义的是显示网格的行和列；</li><li>如果你在网格定义之外又放了一些东西，或者因为内容的数量而需要的更多网格轨道的时候，网格将会在隐式网格中创建行和列。按照默认，这些轨道将自动定义尺寸，所以会根据它里面的内容改变尺寸。</li><li><p>在隐式网格中用 grid-auto-rows 和 grid-auto-columns 属性来定义一个设置大小尺寸的轨道。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//用 grid-auto-rows 属性来确保在隐式网格中创建的轨道是200像素高</span><br><span class="line">.wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: repeat(3, 1fr);</span><br><span class="line">    grid-auto-rows: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义的显示网格尺寸优先级大于定义的隐式网格尺寸</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//轨道高250px</span><br><span class="line">.wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: repeat(3,1fr);</span><br><span class="line">    grid-template-rows: repeat(4, 250px); //优先级更高</span><br><span class="line">    grid-auto-rows: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="轨道大小和minmax"><a href="#轨道大小和minmax" class="headerlink" title="轨道大小和minmax()"></a>轨道大小和minmax()</h4><ul><li>用minmax()函数可以给网格一个最小的尺寸，确保他们能扩大到容纳他里面添加的内容，同时也不限定死最大高度，网格可以随着内容延伸。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//自动创建的行高将会是最小100像素，最大为auto。用auto意味着行的尺寸将会根据内容的大小来自动变换：根据本行中最高的单元，把空间扩展到足够容纳该单元。</span><br><span class="line">.wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: repeat(3, 1fr);</span><br><span class="line">    grid-auto-rows: minmax(100px,auto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="网格线"><a href="#网格线" class="headerlink" title="网格线"></a>网格线</h2><ul><li>当我们定义网格时，我们定义的是网格轨道，而不是网格线；grid会为我们创建编号的网格线来让我们定位每一个网格元素，例如下面这个三列两行网格中就拥有四条纵向的网格线<br><img src="http://ojvil4eq9.bkt.clouddn.com/18-7-12/17853921.jpg" alt=""></li><li>网格线的编号顺序取决于文章的书写模式，在从左至右书写的语言中，编号为 1 的网格线位于最左边。</li></ul><h4 id="跨轨道放置网格元素"><a href="#跨轨道放置网格元素" class="headerlink" title="跨轨道放置网格元素"></a>跨轨道放置网格元素</h4><ul><li><code>grid-column-start</code>: 网格列线开始编号</li><li><code>grid-column-end</code>: 网格列线结束编号</li><li><code>grid-row-start</code>: 网格行线开始编号</li><li><code>grid-row-end</code>: 网格行线结束编号</li></ul><h2 id="网格单元"><a href="#网格单元" class="headerlink" title="网格单元"></a>网格单元</h2><ul><li>一个网格单元是在一个网格元素中最小的单位， 从概念上来讲其实它和表格的一个单元格很像</li></ul><h2 id="网格区域"><a href="#网格区域" class="headerlink" title="网格区域"></a>网格区域</h2><ul><li>网格元素可以向行或者列的方向扩展一个或多个单元，并且会创建一个网格区域；网格区域的形状应该是一个矩形，也就是说你不可能创建出一个类似于“L”形的网格区域</li></ul><h2 id="网格间距"><a href="#网格间距" class="headerlink" title="网格间距"></a>网格间距</h2><ul><li>在两个网格单元之间的 网格横向间距 或 网格纵向间距 可使用<code>grid-column-gap</code>和<code>grid-row-gap</code>属性来创建;</li><li>间距只出现在网格轨道与轨道之间，它们并不会出现在网格容器的四周;</li><li>间距使用的空间会在 使用弹性长度fr的轨道的空间计算前就被留出来，间距的尺寸定义行为和普通轨道一致，但不同的是你不能向其中插入任何内容。从以基线定位的角度来说，间距就像一条很宽的基线。</li></ul><h4 id="网格间距缩写"><a href="#网格间距缩写" class="headerlink" title="网格间距缩写"></a>网格间距缩写</h4><ul><li>这两个属性可以用grid-gap简写。如果你只给出一个值，那这个值会同时应用于行间距和列间距。如果你给了两个值，第一个会被用于grid-row-gap，第二个则会被用于grid-column-gap</li><li><code>grid-gap: 10px 20px</code>:先是行间距后是列间距 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">     display: grid;</span><br><span class="line">     grid-template-columns: repeat(3, 1fr);</span><br><span class="line">     grid-template-rows: repeat(3, 100px);</span><br><span class="line">     grid-gap: 1em 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="嵌套网格"><a href="#嵌套网格" class="headerlink" title="嵌套网格"></a>嵌套网格</h2><ul><li>一个网格元素可以也成为一个网格容器，嵌套网格和他的父级并没有关系</li><li>当元素不是网格容器的直接子级元素时，它们不会参与到网格布局中，并显示为正常的文档流</li></ul><h2 id="使用z-index控制层级"><a href="#使用z-index控制层级" class="headerlink" title="使用z-index控制层级"></a>使用<code>z-index</code>控制层级</h2><ul><li>多个网格项目可以占用同一个网格单位，使用<code>z-index</code>属性控制重叠的顺序,<code>z-index</code>越大层级越高</li></ul><h2 id="网格布局结合弹性布局"><a href="#网格布局结合弹性布局" class="headerlink" title="网格布局结合弹性布局"></a>网格布局结合弹性布局</h2><ul><li>当抉择该用网格还是弹性盒时，你可以问自己一个简单的问题<ul><li>我只需要按行或者列控制布局？那就用弹性盒子</li><li>我需要同时按行和列控制布局？那就用网格</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;grid布局&quot;&gt;&lt;a href=&quot;#grid布局&quot; class=&quot;headerlink&quot; title=&quot;grid布局&quot;&gt;&lt;/a&gt;grid布局&lt;/h1&gt;&lt;h2 id=&quot;网格容器&quot;&gt;&lt;a href=&quot;#网格容器&quot; class=&quot;headerlink&quot; title=&quot;网
      
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="grid布局" scheme="http://yoursite.com/tags/grid%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>CSS固定底部的方法</title>
    <link href="http://yoursite.com/2018/07/19/CSS%E5%9B%BA%E5%AE%9A%E5%BA%95%E9%83%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/07/19/CSS固定底部的方法/</id>
    <published>2018-07-19T15:17:36.000Z</published>
    <updated>2018-07-19T15:20:59.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS粘住固定底部的方法"><a href="#CSS粘住固定底部的方法" class="headerlink" title="CSS粘住固定底部的方法"></a>CSS粘住固定底部的方法</h1><hr><h2 id="1-使用flexbox布局实现"><a href="#1-使用flexbox布局实现" class="headerlink" title="1. 使用flexbox布局实现"></a>1. 使用flexbox布局实现</h2><ul><li><p>HTML:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;wraper&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            content</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">            footer</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li><li><p>CSS:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">html,body &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.wraper &#123;</span><br><span class="line">    min-height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line">.wraper .content &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">&#125;</span><br><span class="line">.wraper .footer &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    border:1px solid #000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="全局增加一个负值下边距等于底部高度"><a href="#全局增加一个负值下边距等于底部高度" class="headerlink" title="全局增加一个负值下边距等于底部高度"></a>全局增加一个负值下边距等于底部高度</h2><ul><li><p>html:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            content</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">            footer</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li><li><p>CSS:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">html,body &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.wrapper &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.wrapper .content &#123;</span><br><span class="line">    min-height: 100%;</span><br><span class="line">    margin-bottom: -50px;</span><br><span class="line">&#125;</span><br><span class="line">.wrapper .footer &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    background: #000;</span><br><span class="line">    color:#fff;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS粘住固定底部的方法&quot;&gt;&lt;a href=&quot;#CSS粘住固定底部的方法&quot; class=&quot;headerlink&quot; title=&quot;CSS粘住固定底部的方法&quot;&gt;&lt;/a&gt;CSS粘住固定底部的方法&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-使用flexbox布局实现&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS的长度单位</title>
    <link href="http://yoursite.com/2018/07/19/CSS%E7%9A%84%E9%95%BF%E5%BA%A6%E5%8D%95%E4%BD%8D/"/>
    <id>http://yoursite.com/2018/07/19/CSS的长度单位/</id>
    <published>2018-07-19T15:16:25.000Z</published>
    <updated>2018-07-19T15:17:19.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS的长度单位"><a href="#CSS的长度单位" class="headerlink" title="CSS的长度单位"></a>CSS的长度单位</h1><h2 id="绝对长度单位"><a href="#绝对长度单位" class="headerlink" title="绝对长度单位"></a>绝对长度单位</h2><h4 id="px"><a href="#px" class="headerlink" title="px"></a>px</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相对字体长度"><a href="#相对字体长度" class="headerlink" title="相对字体长度"></a>相对字体长度</h2><h4 id="em"><a href="#em" class="headerlink" title="em"></a>em</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    width: 40em</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在没有任何CSS规则的前提下，1em的长度是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1em == 16px == 0.17in == 12pt == 1pc == 4.2mm == 0.42cm著作权归作者所有。</span><br></pre></td></tr></table></figure></li><li><p>如果有任何CSS规则改变了字体大小（不管在文档的什么位置），1em的长度会变成相对于新的font-size的大小。</p></li><li>em单位有点古怪，当设置了font-size属性后，它会逐级向上相乘，所以如果一个设置了font-size:1.1em的元素在另一个设置了font-size:1.1em的元素里，而这个元素又在另一个设置了font-size:1.1em的元素里，那么最后计算的结果是1.1X1.1X1.1=1.331rem（根em）。这意味着即使一个元素设置为10em，这个元素也不会在他出现的每个地方都是10em。如果font-size变化了，它可能会宽点，也可能会窄点。</li></ul><h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    width: 40rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>rem总是相对于根元素(html)的字体大小；如果设置html<code>font-size : 14px</code>，则<code>1rem = 14px</code></li></ul><h2 id="可视区百分比长度单位"><a href="#可视区百分比长度单位" class="headerlink" title="可视区百分比长度单位"></a>可视区百分比长度单位</h2><h4 id="vw"><a href="#vw" class="headerlink" title="vw"></a>vw</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    width: 10vw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>vw是可视区宽度单位。1vw等于可视区宽度的百分之一。vw单位跟百分比很相似，不同的是vw的值对所有的元素都一样，与他们父元素或父元素的宽度无关。有点像rem单位那样总是相对于根元素。</li></ul><h4 id="vh"><a href="#vh" class="headerlink" title="vh"></a>vh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    width: 10vh</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>vh和vw（viewport widht）单位一样，不同的是vh是相对于可视区的高度。</li></ul><h4 id="vmin"><a href="#vmin" class="headerlink" title="vmin"></a>vmin</h4><ul><li>vmin的值是当前vw和vh中较小的值。在标准尺寸类型的使用实例中，和由自己确定屏幕大小的vw、vh单位相比，vmin是一个更有用的度量标准</li></ul><h4 id="vmax"><a href="#vmax" class="headerlink" title="vmax"></a>vmax</h4><ul><li>Vmax的值是vw和vh中的较大的值</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS的长度单位&quot;&gt;&lt;a href=&quot;#CSS的长度单位&quot; class=&quot;headerlink&quot; title=&quot;CSS的长度单位&quot;&gt;&lt;/a&gt;CSS的长度单位&lt;/h1&gt;&lt;h2 id=&quot;绝对长度单位&quot;&gt;&lt;a href=&quot;#绝对长度单位&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS长度单位" scheme="http://yoursite.com/tags/CSS%E9%95%BF%E5%BA%A6%E5%8D%95%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>React项目使用vw适配移动端</title>
    <link href="http://yoursite.com/2018/07/19/React%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8vw%E9%80%82%E9%85%8D%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    <id>http://yoursite.com/2018/07/19/React项目使用vw适配移动端/</id>
    <published>2018-07-19T15:14:06.000Z</published>
    <updated>2018-07-19T15:14:59.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React项目使用vw适配移动端"><a href="#React项目使用vw适配移动端" class="headerlink" title="React项目使用vw适配移动端"></a>React项目使用vw适配移动端</h1><h2 id="打开自定义配置选项"><a href="#打开自定义配置选项" class="headerlink" title="打开自定义配置选项"></a>打开自定义配置选项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn eject</span><br><span class="line">//Are you sure you want to eject? This action is permanent. (y/N) </span><br><span class="line">y</span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><h4 id="配置使用scss"><a href="#配置使用scss" class="headerlink" title="配置使用scss"></a>配置使用scss</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 第一处是：  （大约167行左右）</span><br><span class="line">test: /\.css$/ 变成 test: /\.s?css$/  </span><br><span class="line"># 第二处是： （大约217行左右）</span><br><span class="line">&#123;loader: require.resolve(&apos;sass-loader&apos;)&#125;</span><br></pre></td></tr></table></figure><h4 id="安装postCss插件"><a href="#安装postCss插件" class="headerlink" title="安装postCss插件"></a>安装postCss插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext postcss-viewport-units cssnano -D</span><br></pre></td></tr></table></figure><h4 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h4><ul><li><p>在<code>config/webpack.config.dev.js</code>文件中进行如下修改</p><ol><li><p>引入postCss插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const postcssAspectRatioMini = require(&apos;postcss-aspect-ratio-mini&apos;);</span><br><span class="line">const postcssPxToViewport = require(&apos;postcss-px-to-viewport&apos;);</span><br><span class="line">const postcssWriteSvg = require(&apos;postcss-write-svg&apos;);</span><br><span class="line">const postcssCssnext = require(&apos;postcss-cssnext&apos;);</span><br><span class="line">const postcssViewportUnits = require(&apos;postcss-viewport-units&apos;);</span><br><span class="line">const cssnano = require(&apos;cssnano&apos;);</span><br></pre></td></tr></table></figure></li><li><p>加入postCss配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: /\.s?css$/,</span><br><span class="line">        use: [</span><br><span class="line">          require.resolve(&apos;style-loader&apos;),</span><br><span class="line">          &#123;</span><br><span class="line">            loader: require.resolve(&apos;css-loader&apos;),</span><br><span class="line">            options: &#123;</span><br><span class="line">              importLoaders: 1,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: require.resolve(&apos;postcss-loader&apos;),</span><br><span class="line">            options: &#123;</span><br><span class="line">              // Necessary for external CSS imports to work</span><br><span class="line">              // https://github.com/facebookincubator/create-react-app/issues/2677</span><br><span class="line">              ident: &apos;postcss&apos;,</span><br><span class="line">              plugins: () =&gt; [</span><br><span class="line">                require(&apos;postcss-flexbugs-fixes&apos;),</span><br><span class="line">                autoprefixer(&#123;</span><br><span class="line">                  browsers: [</span><br><span class="line">                    &apos;&gt;1%&apos;,</span><br><span class="line">                    &apos;last 4 versions&apos;,</span><br><span class="line">                    &apos;Firefox ESR&apos;,</span><br><span class="line">                    &apos;not ie &lt; 9&apos;, // React doesn&apos;t support IE8 anyway</span><br><span class="line">                  ],</span><br><span class="line">                  flexbox: &apos;no-2009&apos;,</span><br><span class="line">                &#125;),</span><br><span class="line">                  postcssAspectRatioMini(&#123;&#125;), // 用来处理元素容器宽高比</span><br><span class="line">                  postcssWriteSvg(&#123; // 用来处理移动端1px的解决方案</span><br><span class="line">                      utf8: false</span><br><span class="line">                  &#125;),</span><br><span class="line">                  postcssCssnext(&#123;&#125;), // 让项目使用CSS未来特性 并对其做兼容性处理</span><br><span class="line">                  postcssPxToViewport(&#123;</span><br><span class="line">                      viewportWidth: 375, // 视窗的宽度，对应我们设计稿的宽度，一般是750</span><br><span class="line">                      viewportHeight: 667, // 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</span><br><span class="line">                      unitPrecision: 3, // 指定&apos;px&apos;转换为视窗单位值得小数位数（很多时候无法整除）</span><br><span class="line">                      viewportUnit: &apos;vw&apos;, // 指定需要转换成的视窗单位,建议使用vw</span><br><span class="line">                      selectorBlackList: [&apos;.ignore&apos;, &apos;.hairlines&apos;], // 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span><br><span class="line">                      minPixelValue: 1, // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值。</span><br><span class="line">                      mediaQuery: false // 允许在媒体查询中转换`px`</span><br><span class="line">                  &#125;),</span><br><span class="line">                  postcssViewportUnits(&#123;&#125;), // 给CSS的属性添加content的属性 配合viewport-units-buggyfill解决个别手机不支持vw</span><br><span class="line">                  cssnano(&#123; // 压缩和清理CSS代码</span><br><span class="line">                      preset: &quot;advanced&quot;,</span><br><span class="line">                      autoprefixer: false,</span><br><span class="line">                      &quot;postcss-zindex&quot;: false</span><br><span class="line">                  &#125;)</span><br><span class="line">              ],</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">             loader: require.resolve(&apos;sass-loader&apos;)</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="配置生产环境"><a href="#配置生产环境" class="headerlink" title="配置生产环境"></a>配置生产环境</h4><ul><li>操作与配置测试环境文件相同，先引入插件在相同的位置配置postCss插件；</li></ul><h2 id="VW兼容方案"><a href="#VW兼容方案" class="headerlink" title="VW兼容方案"></a>VW兼容方案</h2><ul><li><ul><li><p>主要使用<code>viewport-units-buggyfill.j</code>s和<code>viewport-units-buggyfill.hacks.js</code>，只需要在<code>public/index.html</code>引入它们</p><ul><li>在<code>&lt;head&gt;&lt;/head&gt;</code>中引入阿里cdn:<code>&lt;script src=&quot;//g.alicdn.com/fdilab/lib3rd/viewport-units-buggyfill/0.6.2/??viewport-units-buggyfill.hacks.min.js,viewport-units-buggyfill.min.js&quot;&gt;&lt;/script&gt;</code></li><li><p>在HTML文件中调用<code>viewport-units-buggyfill</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用viewport-units-buggyfill解决个别手机不支持vw--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  window.onload = function () &#123;</span><br><span class="line">    window.viewportUnitsBuggyfill.init(&#123;</span><br><span class="line">      hacks: window.viewportUnitsBuggyfillHacks</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>前面配置的postcss-viewport-units插件。这个插件将让你无需关注content的内容，插件会自动帮你处理。</p></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React项目使用vw适配移动端&quot;&gt;&lt;a href=&quot;#React项目使用vw适配移动端&quot; class=&quot;headerlink&quot; title=&quot;React项目使用vw适配移动端&quot;&gt;&lt;/a&gt;React项目使用vw适配移动端&lt;/h1&gt;&lt;h2 id=&quot;打开自定义配置选项
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目使用vw适配移动端</title>
    <link href="http://yoursite.com/2018/07/19/Vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8vw%E9%80%82%E9%85%8D%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    <id>http://yoursite.com/2018/07/19/Vue项目使用vw适配移动端/</id>
    <published>2018-07-19T15:12:59.000Z</published>
    <updated>2018-07-19T15:13:52.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue项目使用vw适配移动端"><a href="#Vue项目使用vw适配移动端" class="headerlink" title="Vue项目使用vw适配移动端"></a>Vue项目使用vw适配移动端</h1><h2 id="1-vw原理解析"><a href="#1-vw原理解析" class="headerlink" title="1.vw原理解析"></a>1.vw原理解析</h2><ul><li>vw是基于Viewport视窗的长度单位，这里的视窗（Viewport）指的就是浏览器可视化的区域，而这个可视区域是window.innerWidth/window.innerHeight的大小。</li><li>Viewport相关的单位有四个，分别为vw、vh、vmin和vmax:<ul><li>vw：是Viewport’s width的简写,1vw等于window.innerWidth的1%</li><li>vh：和vw类似，是Viewport’s height的简写，1vh等于window.innerHeihgt的1%</li><li>vmin：vmin的值是当前vw和vh中较小的值</li><li>vmax：vmax的值是当前vw和vh中较大的值</li><li>vmin和vmax是根据Viewport中长度偏大的那个维度值计算出来的，如果window.innerHeight &gt; window.innerWidth则vmin取百分之一的window.innerWidth，vmax取百分之一的window.innerHeight计算。</li></ul></li><li>如果设计稿的宽度是750px，那么100vw=750px,1vw=7.5px</li></ul><h2 id="2-Vue项目中使用vw实现移动端适配"><a href="#2-Vue项目中使用vw实现移动端适配" class="headerlink" title="2.Vue项目中使用vw实现移动端适配"></a>2.Vue项目中使用vw实现移动端适配</h2><ul><li>安装PostCSS插件<ul><li>在.postcssrc.js使用postcss</li><li>已经装好有postcss-import、postcss-url、autoprefixer</li><li>新增插件：<code>npm i postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext postcss-viewport-units cssnano -D</code></li></ul></li><li><p>在.postcssrc.js文件对新安装的PostCSS插件进行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  &quot;plugins&quot;: &#123;</span><br><span class="line">    &quot;postcss-import&quot;: &#123;&#125;,</span><br><span class="line">    &quot;postcss-url&quot;: &#123;&#125;,</span><br><span class="line">    // 使用postcss的插件实现vw适配移动端</span><br><span class="line">    // 由于cssnext和cssnano都具有autoprefixer,事实上只需要一个，所以把默认的autoprefixer删除掉，然后把cssnano中的autoprefixer设置为false</span><br><span class="line">    &apos;postcss-aspect-ratio-mini&apos;: &#123;&#125;, // 用来处理元素容器宽高比</span><br><span class="line">    &apos;postcss-write-svg&apos;: &#123; // 用来处理移动端1px的解决方案</span><br><span class="line">      uft8:false</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;postcss-cssnext&apos;: &#123;&#125;, // 让项目使用CSS未来特性 并对其做兼容性处理</span><br><span class="line">    &apos;postcss-px-to-viewport&apos;: &#123;</span><br><span class="line">      viewportWidth: 750, // 视窗的宽度，对应我们设计稿的宽度，一般是750</span><br><span class="line">      viewportHeight: 1334, // 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</span><br><span class="line">      unitPrecision: 3, // 指定&apos;px&apos;转换为视窗单位值得小数位数（很多时候无法整除）</span><br><span class="line">      viewportUnit:&apos;vw&apos;, // 指定需要转换成的视窗单位,建议使用vw</span><br><span class="line">      selectorBlackList: [&apos;.ignore&apos;,&apos;.hairliness&apos;], // 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span><br><span class="line">      minPixelValue: 1, // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值。</span><br><span class="line">      mediaQuery: false // 允许在媒体查询中转换`px`</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;postcss-viewport-units&apos;: &#123;&#125;, // 给CSS的属性添加content的属性 配合viewport-units-buggyfill解决个别手机不支持vw</span><br><span class="line">    &apos;cssnano&apos;: &#123; // 压缩和清理CSS代码</span><br><span class="line">      preset: &apos;advanced&apos;,</span><br><span class="line">      autoprefixer: false,</span><br><span class="line">      &apos;postcss-zindex&apos;: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vw兼容方案: 兼容个别手机</p><ul><li>主要使用viewport-units-buggyfill.js和viewport-units-buggyfill.hacks.js，只需要在你的HTML文件中引入这两个文件。比如在Vue项目中的index.html引入它们</li><li><code>&lt;script src=&quot;//g.alicdn.com/fdilab/lib3rd/viewport-units-buggyfill/0.6.2/??viewport-units-buggyfill.hacks.min.js,viewport-units-buggyfill.min.js&quot;&gt;&lt;/script&gt;</code></li><li><p>在HTML文件中调用<code>viewport-units-buggyfill</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用viewport-units-buggyfill解决个别手机不支持vw--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  window.onload = function () &#123;</span><br><span class="line">    window.viewportUnitsBuggyfill.init(&#123;</span><br><span class="line">      hacks: window.viewportUnitsBuggyfillHacks</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>前面配置的postcss-viewport-units插件。这个插件将让你无需关注content的内容，插件会自动帮你处理。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue项目使用vw适配移动端&quot;&gt;&lt;a href=&quot;#Vue项目使用vw适配移动端&quot; class=&quot;headerlink&quot; title=&quot;Vue项目使用vw适配移动端&quot;&gt;&lt;/a&gt;Vue项目使用vw适配移动端&lt;/h1&gt;&lt;h2 id=&quot;1-vw原理解析&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>React生命周期</title>
    <link href="http://yoursite.com/2018/07/19/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2018/07/19/React生命周期/</id>
    <published>2018-07-19T15:09:51.000Z</published>
    <updated>2018-07-19T15:10:33.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React生命周期"><a href="#React生命周期" class="headerlink" title="React生命周期"></a>React生命周期</h1><h2 id="组件的生命周期可分成三个状态"><a href="#组件的生命周期可分成三个状态" class="headerlink" title="组件的生命周期可分成三个状态"></a>组件的生命周期可分成三个状态</h2><ul><li>挂载：组件被实例化并挂载在到dom树这一过程称为挂载</li><li>更新：当组件的属性或者状态改变时会重新渲染</li><li>卸载：当一个组件被移出Dom树时，组件就会被卸载</li></ul><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p><img src="http://ojvil4eq9.bkt.clouddn.com/18-7-2/46955621.jpg" alt=""></p><ul><li>首次渲染执行的顺序如图上<ul><li><code>getDefaultProps</code>相当于ES6中<code>staticdefaultProps = {}</code></li><li><code>getInitialState</code>相当于<code>constructor中的 this.state = {}</code></li></ul></li><li><code>componentWillMount()</code><ul><li>在<code>render()</code>之前调用被调用，因此在这方法里设置this.setState是不会触发不会触发重渲</li><li>这是唯一会在服务端渲染调起的生命周期钩子函数，在服务端渲染的场景中可以在这发送AJAX请求</li></ul></li><li><code>componentDidMount()</code><ul><li>该方法在组件挂载完成后立即调用，并且只会调用一次</li><li>通常在这个方法中发送AJAX请求</li></ul></li></ul><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h4 id="Props改变"><a href="#Props改变" class="headerlink" title="Props改变"></a>Props改变</h4><p><img src="http://ojvil4eq9.bkt.clouddn.com/18-7-2/32281555.jpg" alt=""></p><h4 id="State改变"><a href="#State改变" class="headerlink" title="State改变"></a>State改变</h4><p><img src="http://ojvil4eq9.bkt.clouddn.com/18-7-2/6072673.jpg" alt=""></p><ul><li><p><code>componentWillReceiveProps</code></p><ul><li>方法在已挂载的组件接收到新属性前调用</li><li>要合理使用<code>componentWillReceiveProps</code>需做好条件判断<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    if(nextProps.myProp !== this.props.myProps) &#123;</span><br><span class="line">        // nextProps.myProp has a different value than our current prop</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>shouldComponentUpdate</code></p></li><li><code>componentWillUpdate</code></li><li><code>componentDidUpdate</code></li></ul><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p><img src="http://ojvil4eq9.bkt.clouddn.com/18-7-2/59578019.jpg" alt=""></p><ul><li><code>componentWillUnmount</code><ul><li>当组件被卸载之前立刻调用；可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理任何在componentDidMount环节创建的DOM元素。</li></ul></li></ul><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ul><li><code>componentDidCatch()</code><ul><li>在渲染过程中发生错误时会被调用;只可以处理子组件中产生的、未处理的错误，能够捕获的错误类型有子组件render函数中产生的错误及生命周期函数中产生的非异步错误<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//父组件或祖宗组件中实现</span><br><span class="line">componentDidCatch(errorString, errorInfo) &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        error: errorString</span><br><span class="line">    &#125;);</span><br><span class="line">    ErrorLoggingTool.log(errorInfo);</span><br><span class="line">&#125;</span><br><span class="line">render() &#123;</span><br><span class="line">    if(this.state.error) return &lt;ShowErrorMessage error=&#123;this.state.error&#125; /&gt;</span><br><span class="line">    return (</span><br><span class="line">        // render normal component output</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React生命周期&quot;&gt;&lt;a href=&quot;#React生命周期&quot; class=&quot;headerlink&quot; title=&quot;React生命周期&quot;&gt;&lt;/a&gt;React生命周期&lt;/h1&gt;&lt;h2 id=&quot;组件的生命周期可分成三个状态&quot;&gt;&lt;a href=&quot;#组件的生命周期可分成三
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="React生命周期" scheme="http://yoursite.com/tags/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>React-router-dom学习</title>
    <link href="http://yoursite.com/2018/07/19/React-router-dom%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/07/19/React-router-dom学习/</id>
    <published>2018-07-19T15:08:04.000Z</published>
    <updated>2018-07-19T15:09:37.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-router-dom"><a href="#React-router-dom" class="headerlink" title="React-router-dom"></a>React-router-dom</h1><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id=""><a href="#" class="headerlink" title=""></a><browserroute></browserroute></h3><p><router> 使用 HTML5 提供的 history API (pushState, replaceState 和 popstate 事件) 来保持 UI 和 URL 的同步。</router></p><ul><li>basename: string<ul><li>当前位置的基准URL。如果你的页面部署在服务器的二级（子）目录，你需要将 basename 设置到此子目录。 正确的 URL 格式是前面有一个前导斜杠，但不能有尾部斜杠。</li></ul></li></ul><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><hashrouter></hashrouter></h3><p> HashRouter 使用 URL 的 hash (例如：window.location.hash) 来保持 UI 和 URL 的同步。</p><h3 id="-2"><a href="#-2" class="headerlink" title=""></a><router></router></h3><ul><li>当存在服务区来管理动态请求时，需要使用<code>&lt;BrowserRouter&gt;</code>组件，而<code>&lt;HashRouter&gt;</code>被用于静态网站</li><li>所有路由器组件的通用接口，使用时<code>&lt;Router&gt;</code>标签只能包含一个子标签，一般<code>Router</code>放在元素标签最顶部，只需使用包括<ul><li><browserrouter></browserrouter></li><li><hashrouter><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&apos;/roster&apos;/&gt;</span><br><span class="line">// 当路径名为&apos;/&apos;时, path不匹配</span><br><span class="line">// 当路径名为&apos;/roster&apos;或&apos;/roster/2&apos;时, path匹配</span><br><span class="line">// 当你只想匹配&apos;/roster&apos;时，你需要使用&quot;exact&quot;参数</span><br><span class="line">// 则路由仅匹配&apos;/roster&apos;而不会匹配&apos;/roster/2&apos;</span><br><span class="line">&lt;Route exact path=&apos;/roster&apos;/&gt;</span><br></pre></td></tr></table></figure></hashrouter></li></ul></li></ul><h3 id="-3"><a href="#-3" class="headerlink" title=""></a><route></route></h3><h4 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h4><p>当匹配到对应的路径时，呈现相应的页面</p><ul><li><p><code>Route</code>渲染页面的三种方法</p><ul><li><p>component ：一个React组件。当带有component参数的route匹配成功后，route会返回一个新的元素，其为component参数所对应的React组件（使用React.createElement创建）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&apos;/page&apos; component=&#123;Page&#125; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>render ： 一个返回React element的函数。当匹配成功后调用该函数。该过程与传入component参数类似，并且对于行级渲染与需要向元素传入额外参数的操作会更有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&apos;/page&apos; render=&#123;(props) =&gt; (</span><br><span class="line">    &lt;Page &#123;...props&#125; data=&#123;extraProps&#125;/&gt;</span><br><span class="line">)&#125;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>children ： 一个返回React element的函数。与上述两个参数不同，无论route是否匹配当前location，其都会被渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&apos;/page&apos; children=&#123;(props) =&gt; (</span><br><span class="line">    props.match</span><br><span class="line">        ? &lt;Page &#123;...props&#125;/&gt;</span><br><span class="line">        : &lt;EmptyPage &#123;...props&#125;/&gt;</span><br><span class="line">)&#125;/&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><ul><li><p>/roster ：对应路径名仅仅是/roster时，因此需要在exact元素上添加exact参数。</p></li><li><p>/roster/:number ： 该路由使用一个路由参数来获取/roster后的路径名。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">      &lt;Route exact path=&apos;/roster&apos; component=&#123;FullRoster&#125;/&gt;</span><br><span class="line">      &lt;Route path=&apos;/roster/:number&apos; component=&#123;Player&#125;/&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure><h4 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h4><ul><li>如’/roster/:number’中:number这种写法意味着/roster/后的路径名将会被获取并存在<code>match.params.number</code>中。例如，路径名’/roster/6’会获取到一个对象：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Player = (props) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  const number = props.match.params.number;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;参数：&#123;number&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h3 id="-4"><a href="#-4" class="headerlink" title=""></a><link></h3><p>提供路由跳转和导航，显示在html中就是a标签</p><ul><li>to: string<ul><li>需要跳转到的路径(pathname)或地址（location）</li></ul></li><li>to: object<ul><li>需要跳转到的地址（location）</li></ul></li><li>replace: bool<ul><li>默认为false</li><li>当设置为 true 时，点击链接后将使用新地址替换掉访问历史记录里面的原地址</li><li>当设置为 false 时，点击链接后将在原有访问历史记录的基础上添加一个新的纪录。</li></ul></li></ul><h3 id="-5"><a href="#-5" class="headerlink" title=""></a><navlink></navlink></h3><p>特殊版本的<code>&lt;Link&gt;</code>,当需要设置导航点击，匹配当前路由样式时，使用该组件</p><ul><li>activeClassName：string<ul><li>设置匹配当前路由时的a标签类名，默认类名是<code>class=&#39;active&#39;</code></li></ul></li><li>activeStyle: object<ul><li>设置匹配当前路由时的a标签样式</li></ul></li><li>exact: bool<ul><li>默认是<code>false</code>,设置为<code>true</code>则只有完全匹配时才能应用<code>activeClassName</code>和<code>activeStyle</code></li></ul></li></ul><h3 id="-6"><a href="#-6" class="headerlink" title=""></a><switch></switch></h3><h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><h2 id="JS控制路由跳转及传参"><a href="#JS控制路由跳转及传参" class="headerlink" title="JS控制路由跳转及传参"></a>JS控制路由跳转及传参</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">this.props.history.push(&#123;</span><br><span class="line">            pathname: &apos;/order-detail&apos;,//路由</span><br><span class="line">            state: &#123;</span><br><span class="line">                orderNo: params //传参</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">//接受参数</span><br><span class="line">let orderNo = this.props.location.state.orderNo</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React-router-dom&quot;&gt;&lt;a href=&quot;#React-router-dom&quot; class=&quot;headerlink&quot; title=&quot;React-router-dom&quot;&gt;&lt;/a&gt;React-router-dom&lt;/h1&gt;&lt;h2 id=&quot;API&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="React-Router-dom" scheme="http://yoursite.com/tags/React-Router-dom/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由组件按需加载的几种方法</title>
    <link href="http://yoursite.com/2018/07/19/Vue%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/07/19/Vue路由组件按需加载的几种方法/</id>
    <published>2018-07-19T15:05:45.000Z</published>
    <updated>2018-07-19T15:07:23.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue路由组件按需加载的几种方法"><a href="#Vue路由组件按需加载的几种方法" class="headerlink" title="Vue路由组件按需加载的几种方法"></a>Vue路由组件按需加载的几种方法</h1><hr><h2 id="1-普通加载"><a href="#1-普通加载" class="headerlink" title="1. 普通加载"></a>1. 普通加载</h2><ul><li><p>使用vue-cli构建项目后，我们会在Router文件夹下面的index.js里面引入相关的路由组件,如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Hello from &apos;@/components/Hello&apos;</span><br><span class="line">import Boy from &apos;@/components/Boy&apos;</span><br><span class="line">import Girl from &apos;@/components/Girl&apos;</span><br></pre></td></tr></table></figure></li><li><p>这样做的结果就是webpack在npm run build的时候会打包成一个整个的js文件，如果页面一多，会导致这个文件非常大，加载缓慢，为了解决这个问题，需要将他分成多个小文件，而且还要实现异步按需加载，即用到了再加载，而不用一股脑全部加载</p></li></ul><h2 id="2-webpack的require-ensure-实现按需加载"><a href="#2-webpack的require-ensure-实现按需加载" class="headerlink" title="2. webpack的require.ensure()实现按需加载"></a>2. <code>webpack</code>的<code>require.ensure()</code>实现按需加载</h2><ul><li>语法：<code>require.ensure(dependencies: String[], callback: function(require), errorCallback: function(error), chunkName: String)</code><ul><li>dependencies：字符串构成的数组，声明 callback 回调函数中所需的所有模块,模块作为依赖被加载</li><li>callback：只要加载好全部依赖，webpack 就会执行此函数。require 函数的实现，作为参数传入此函数。当程序运行需要依赖时，可以使用 require() 来加载依赖。函数体可以使用此参数，来进一步执行 require() 模块。</li><li>errorCallback：当 webpack 加载依赖失败时，会执行此函数。</li><li>chunkName：由 require.ensure() 创建出的 chunk 的名字。通过将同一个 chunkName 传递给不同的 require.ensure() 调用，我们可以将它们的代码合并到一个单独的 chunk 中，从而只产生一个浏览器必须加载的 bundle。</li></ul></li><li><p>使用方法一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require.ensure([], function(require)&#123;</span><br><span class="line">    require(&apos;./a.js&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">// 此时会单独打包出一个js文件，没有自定义名称的话，会被命名为1.js(有hash时候会带上md5)</span><br></pre></td></tr></table></figure></li><li><p>使用方法二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">require.ensure([&apos;./a.js&apos;], function(require) &#123;</span><br><span class="line">    require(&apos;./b.js&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">1、此时a.js作为依赖被加载，但是没有被执行（官方文档说的only loads the modules）</span><br><span class="line">2、a.js和b.js会被打包成一个文件。</span><br><span class="line">3、回调函数里只require了b.js，只有b.js的内容会被执行。</span><br><span class="line">4、如果你需要使用a.js的内容，需要再加上require(&apos;./a.js&apos;)</span><br><span class="line"></span><br><span class="line">require.ensure([&apos;./list&apos;], function(require)&#123;</span><br><span class="line">    var list = require(&apos;./list&apos;);</span><br><span class="line">    list.show();</span><br><span class="line">&#125;);</span><br><span class="line">给require.ensure的第一个参数传了[&apos;./list&apos;]，执行到这里的时候list.js会被浏览器下载下来，但是并不会执行list.js模块中的代码，也就是webpack官网说的，不会进行evaluate。真正进行evaluate的时候是到了后面这句var list = require(&apos;./list&apos;);这就是所谓的懒执行。</span><br><span class="line">写在函数中的多个模块会被打包在一起，这一点和上面没有区别。另外，写在数组中的模块也会跟他们打包在一起，不管你有没有手动执行。</span><br></pre></td></tr></table></figure></li><li><p>vue中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">comst List = resolve =&gt; &#123;</span><br><span class="line">    require.ensure([],() =&gt; &#123;</span><br><span class="line">        resolve(require(&apos;./list&apos;))</span><br><span class="line">    &#125;,&apos;list&apos;)</span><br><span class="line">&#125;</span><br><span class="line">其实resolve的作用就是Promise里面那个resolve，在这里就是定义一个异步的组件</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用动态-import语法"><a href="#使用动态-import语法" class="headerlink" title="使用动态 import语法"></a>使用动态 import语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const Foo = () =&gt; import(/* webpackChunkName: &quot;foo&quot; */ &apos;./Foo.vue&apos;);</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &apos;/foo&apos;, component: Foo &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">// /* webpackChunkName: &quot;foo&quot; */使用命名chunk，一个特殊的注释语法来提供 chunk name (需要 Webpack &gt; 2.4)</span><br><span class="line">// webpack要加配置 output需要加个chunkFilename</span><br><span class="line">chunkFilename: &apos;[name].js&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue路由组件按需加载的几种方法&quot;&gt;&lt;a href=&quot;#Vue路由组件按需加载的几种方法&quot; class=&quot;headerlink&quot; title=&quot;Vue路由组件按需加载的几种方法&quot;&gt;&lt;/a&gt;Vue路由组件按需加载的几种方法&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-普通
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Vue-router" scheme="http://yoursite.com/tags/Vue-router/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli 根据不同的环境打包</title>
    <link href="http://yoursite.com/2018/07/19/Vue-cli-%E6%A0%B9%E6%8D%AE%E4%B8%8D%E5%90%8C%E7%9A%84%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85/"/>
    <id>http://yoursite.com/2018/07/19/Vue-cli-根据不同的环境打包/</id>
    <published>2018-07-19T15:01:41.000Z</published>
    <updated>2018-07-19T15:07:04.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-cli-根据不同的环境打包"><a href="#vue-cli-根据不同的环境打包" class="headerlink" title="vue-cli 根据不同的环境打包"></a>vue-cli 根据不同的环境打包</h1><hr><h3 id="vue-cli-中build中build-js部分代码做如下修改"><a href="#vue-cli-中build中build-js部分代码做如下修改" class="headerlink" title="vue-cli 中build中build.js部分代码做如下修改"></a>vue-cli 中build中build.js部分代码做如下修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">require(&apos;./check-versions&apos;)()</span><br><span class="line"></span><br><span class="line">// process.env.NODE_ENV = &apos;production&apos;</span><br><span class="line"></span><br><span class="line">var ora = require(&apos;ora&apos;)</span><br><span class="line">var rm = require(&apos;rimraf&apos;)</span><br><span class="line">var path = require(&apos;path&apos;)</span><br><span class="line">var chalk = require(&apos;chalk&apos;)</span><br><span class="line">var webpack = require(&apos;webpack&apos;)</span><br><span class="line">var config = require(&apos;../config&apos;)</span><br><span class="line">var webpackConfig = require(&apos;./webpack.prod.conf&apos;)</span><br><span class="line"></span><br><span class="line">var spinner = ora(&apos;building for &apos; + process.env.NODE_ENV + &apos; of &apos; + process.env.env_config+ &apos; mode...&apos; )</span><br><span class="line">spinner.start()</span><br><span class="line">// var spinner = ora(&apos;building for production...&apos;)</span><br><span class="line">// spinner.start()</span><br><span class="line">。。。。</span><br></pre></td></tr></table></figure><h3 id="build中webpack-prod-conf-js做如下修改"><a href="#build中webpack-prod-conf-js做如下修改" class="headerlink" title="build中webpack.prod.conf.js做如下修改"></a>build中webpack.prod.conf.js做如下修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// const env = require(&apos;../config/prod.env&apos;);</span><br><span class="line">const env = config.build[process.env.env_config+&apos;Env&apos;]</span><br></pre></td></tr></table></figure><h3 id="config中的index-js-部分代码修改如下"><a href="#config中的index-js-部分代码修改如下" class="headerlink" title="config中的index.js 部分代码修改如下"></a>config中的index.js 部分代码修改如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    build: &#123;</span><br><span class="line">        prodEnv: require(&apos;./prod.env&apos;),</span><br><span class="line">        testEnv: require(&apos;./test.env&apos;),</span><br><span class="line">        ppeEnv: require(&apos;./ppe.env&apos;),</span><br><span class="line">        index: path.resolve(__dirname, &apos;../dist/&apos; + new Date().getTime() + &apos;/index.html&apos;),</span><br><span class="line">        。。。。。</span><br></pre></td></tr></table></figure><h3 id="config中的index-js-配置代理跨域"><a href="#config中的index-js-配置代理跨域" class="headerlink" title="config中的index.js 配置代理跨域"></a>config中的index.js 配置代理跨域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 配置代理跨域</span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">      &apos;/api&apos;: &#123;</span><br><span class="line">        target: &apos;http://xxxxxxxxxxxx/&apos;, // 开发接口域名</span><br><span class="line">        changeOrigin: true, // 如果接口跨域，需要进行这个参数配置</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &apos;^/api&apos;: &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="在config中新建test-env-js"><a href="#在config中新建test-env-js" class="headerlink" title="在config中新建test.env.js"></a>在config中新建test.env.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//测试环境</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  NODE_ENV: &apos;&quot;testEnvironment&quot;&apos;,</span><br><span class="line">  ENV_CONFIG: &apos;&quot;test&quot;&apos;,</span><br><span class="line">。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在config中新建ppe-env-js"><a href="#在config中新建ppe-env-js" class="headerlink" title="在config中新建ppe.env.js"></a>在config中新建ppe.env.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//预生产</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  NODE_ENV: &apos;&quot;ppeEnvironment&quot;&apos;,</span><br><span class="line">  ENV_CONFIG: &apos;&quot;ppe&quot;&apos;,</span><br><span class="line">hosturl: &apos;&quot;https://ppexxx&quot;&apos;</span><br><span class="line">。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安装cross-env-npm-i-cross-env-S"><a href="#安装cross-env-npm-i-cross-env-S" class="headerlink" title="安装cross-env npm i cross-env -S"></a>安装cross-env <code>npm i cross-env -S</code></h3><h3 id="接口调用-src文件夹中新建api文件；文件夹中新建api-js和baseURL-js"><a href="#接口调用-src文件夹中新建api文件；文件夹中新建api-js和baseURL-js" class="headerlink" title="接口调用 src文件夹中新建api文件；文件夹中新建api.js和baseURL.js"></a>接口调用 src文件夹中新建api文件；文件夹中新建api.js和baseURL.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//--------------baseURL.js----------------</span><br><span class="line">let baseURL = &apos;/api&apos;;</span><br><span class="line"></span><br><span class="line">// 判断开发环境 设置不同的请求域名</span><br><span class="line">if(process.env.NODE_ENV === &apos;development&apos;) &#123;</span><br><span class="line">  baseURL = &apos;/api&apos;; // 开发环境使用代理域名</span><br><span class="line">&#125; else if (process.env.NODE_ENV === &apos;testEnvironment&apos;) &#123;</span><br><span class="line">  baseURL = &apos;http://xxxxxxxxxxxx&apos;; // 测试环境</span><br><span class="line">&#125; else if (process.env.NODE_ENV === &apos;ppeEnvironment&apos;) &#123;</span><br><span class="line">  baseURL = &apos;http://ppe&apos;; // 演练环境</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  baseURL = &apos;&apos;; // 生产环境</span><br><span class="line">&#125;</span><br><span class="line">export default baseURL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//--------------api.js----------------</span><br><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line">import baseURL from &apos;./baseURL.js&apos;</span><br><span class="line"></span><br><span class="line">// 创建axios实例</span><br><span class="line">const Request = axios.create(&#123;</span><br><span class="line">  baseURL: baseURL,</span><br><span class="line">&#125;)</span><br><span class="line">// 初始化默认post header</span><br><span class="line">axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;;</span><br><span class="line"></span><br><span class="line">// 接口调用</span><br><span class="line">export const queryAllRecord = params =&gt; &#123;</span><br><span class="line">  return Request.post(`app/xxx/xxxxxx`,params).then(res =&gt; res.data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="package-json-修改"><a href="#package-json-修改" class="headerlink" title="package.json 修改"></a>package.json 修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;npm run dev&quot;,</span><br><span class="line">    &quot;build:test&quot;: &quot;cross-env NODE_ENV=testEnvironment env_config=test node build/build.js&quot;,</span><br><span class="line">    &quot;build:ppe&quot;: &quot;cross-env NODE_ENV=ppeEnvironment env_config=ppe node build/build.js&quot;,</span><br><span class="line">    &quot;build:prod&quot;: &quot;cross-env NODE_ENV=production env_config=prod node build/build.js&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="输入指令"><a href="#输入指令" class="headerlink" title="输入指令"></a>输入指令</h3><ul><li><code>npm run dev</code> 开发环境</li><li><code>npm run build:test</code> 打包测试环境</li><li><code>npm run build:ppe</code>  打包演练环境</li><li><code>npm run build</code> 打包生产环境</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-cli-根据不同的环境打包&quot;&gt;&lt;a href=&quot;#vue-cli-根据不同的环境打包&quot; class=&quot;headerlink&quot; title=&quot;vue-cli 根据不同的环境打包&quot;&gt;&lt;/a&gt;vue-cli 根据不同的环境打包&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Vue-cli" scheme="http://yoursite.com/tags/Vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>Git的使用</title>
    <link href="http://yoursite.com/2018/06/16/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/06/16/Git基本操作/</id>
    <published>2018-06-16T13:48:27.000Z</published>
    <updated>2018-07-19T15:00:49.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h1><hr><h2 id="1-git简介"><a href="#1-git简介" class="headerlink" title="1. git简介"></a>1. git简介</h2><ul><li>工作区：本地电脑存放项目文件的地方；</li><li>暂存区：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</li><li>本地仓库：使用commit命令可以将暂存区中的文件添加到本地仓库中；</li><li>远程仓库：项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可</li></ul><h2 id="2-git配置"><a href="#2-git配置" class="headerlink" title="2. git配置"></a>2. git配置</h2><ol><li>配置用户名：<code>git config --global user.name &quot;your name&quot;</code>;</li><li>配置用户邮箱：<code>git config --global user.email &quot;youremail@github.com&quot;</code>;</li></ol><h2 id="3-工作区操作"><a href="#3-工作区操作" class="headerlink" title="3. 工作区操作"></a>3. 工作区操作</h2><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><ul><li>创建新的本地仓库：<code>git init</code></li><li>从远处仓库复制项目：<code>git clone</code></li></ul><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><ul><li>提交工作区所有文件到暂存区: <code>git add .</code></li><li>提交工作区中指定文件到暂存区: <code>git add [文件名]</code></li></ul><h4 id="撤销删除"><a href="#撤销删除" class="headerlink" title="撤销删除"></a>撤销删除</h4><ul><li>删除工作区文件，并且也从暂存区删除对应文件的记录：<code>git rm -f [文件名]</code></li><li>从暂存区中删除文件，但是工作区依然还有该文件:<code>git rm --cached [文件名]</code></li><li>拉取暂存区的文件，并将其替换成工作区文件：<code>git checkout -- [文件名]</code>，简单的说 就是当我们把工作区弄乱了,可以帮我们 拉取暂存区 恢复工作区</li></ul><h4 id="查询信息"><a href="#查询信息" class="headerlink" title="查询信息"></a>查询信息</h4><ul><li>查询当前工作区所有文件的状态：<code>git status</code></li><li>对比工作区和暂存区之间的差异，即修改后还没有暂存的内容：<code>git diff</code></li></ul><h2 id="4-暂存区操作"><a href="#4-暂存区操作" class="headerlink" title="4. 暂存区操作"></a>4. 暂存区操作</h2><h4 id="提交文件到本地仓库"><a href="#提交文件到本地仓库" class="headerlink" title="提交文件到本地仓库"></a>提交文件到本地仓库</h4><ul><li>将暂存区中的文件提交到本地仓库：<code>git commit -m &quot;commit_info&quot;</code></li><li>将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程：<code>git commit -a -m &quot;commit_info&quot;</code></li><li>提交文件时，发现漏掉几个文件，或者注释写错了，可以修改上一次提交：<code>git commit -- amend</code><ul><li>输入指令后会进入git vim 编辑器</li><li>按<code>a</code>,<code>i</code>或<code>o</code>进入编辑模式</li><li>按<code>ESC</code>进入操作模式</li><li>在操作模式下，<code>:wq</code>为写入退出,<code>:q!</code>不保存退出</li></ul></li></ul><h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><ul><li>比较暂存区和本地仓库的差异：<code>git diff --cached</code></li><li>指定文件在暂存区和本地仓库的不同：<code>git diff [文件名] --cached</code>;</li><li>查看提交历史：<code>git log</code><ul><li>参数-p展开每次提交的内容差异<code>git log -p</code></li><li>用-2显示最近的两次更新<code>git log -p -2</code></li></ul></li></ul><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><ul><li>将代码回退到上一次提交时的状态：<code>git reset --hard Head</code></li><li>将代码回退到上上一次提交时的状态: <code>git reset --hard Head~1</code></li><li>将代码回退到上上上一次提交时的状态: <code>git reset --hard Head~2</code></li><li>查看之前所有版本切换的操作记录，可以通过这个命令得到的版本号回退到指定的版本：<code>git reflog</code></li><li>将代码回退到指定版本：<code>git reset --hard [版本号]</code></li></ul><h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><ol><li>显示本地仓库的所有分支：<code>git branch</code>;</li><li>创建分支：<code>git branch [分支名]</code></li><li>从当前所处的分支切换到其他分支：<code>git checkout [分支名]</code></li><li>新建并切换到新建分支上：<code>git checkout -b [分支名]</code></li><li>删除分支：<code>git branch -d [分支名]</code></li><li>将当前分支与指定分支进行合并：<code>git merge [分支名]</code>;</li><li>查看各个分支最后一个提交对象的信息：<code>git branch -v</code>;</li><li>在远程分支的基础上创建新的本地分支：<code>git checkout -b &lt;branch-name&gt; &lt;remote-name&gt;/&lt;branch-name&gt;</code><ul><li>即：<code>git checkout -b [本地分支名] origin/[远程分支名]</code></li><li>使用例子：<code>git checkout -b branch-dev origin/branch-dev</code>;</li></ul></li></ol><h2 id="5-本地仓库操作"><a href="#5-本地仓库操作" class="headerlink" title="5. 本地仓库操作"></a>5. 本地仓库操作</h2><ul><li>添加远程仓库，取一个变量名代替地址：<code>git remote add [变量名] [远程服务器地址]</code><ul><li>示例：<code>git remote add origin https://github.com/Saber-tgb/test-git.git</code></li></ul></li><li>指定默认上传服务器地址并推送分支：<code>git push -u origin master</code><ul><li>将本地的master分支推送到origin服务器 同时指定origin为默认上传服务器地址，后面就可以不加任何参数使用git push了</li></ul></li><li>将本地仓库某分支推送到远程仓库：<code>git push origin [分支名]</code> <ul><li>将<code>dev</code>分支推送到远程仓库<code>git push origin dev</code></li></ul></li><li>拉取远程仓库：<code>git pull</code></li></ul><h2 id="6-忽略文件-gitignore"><a href="#6-忽略文件-gitignore" class="headerlink" title="6. 忽略文件.gitignore"></a>6. 忽略文件.gitignore</h2><ul><li>我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 此为注释 – 将被 Git 忽略</span><br><span class="line"># 忽略所有 .a 结尾的文件</span><br><span class="line">*.a</span><br><span class="line"># 但 lib.a 除外</span><br><span class="line">!lib.a</span><br><span class="line"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"># 忽略 build/ 目录下的所有文件</span><br><span class="line">build/</span><br><span class="line"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"># 忽略 doc/ 目录下所有扩展名为 txt 的文件</span><br><span class="line">doc/**/*.txt</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git基本操作&quot;&gt;&lt;a href=&quot;#Git基本操作&quot; class=&quot;headerlink&quot; title=&quot;Git基本操作&quot;&gt;&lt;/a&gt;Git基本操作&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-git简介&quot;&gt;&lt;a href=&quot;#1-git简介&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>React-Router学习</title>
    <link href="http://yoursite.com/2018/06/06/React-router%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/06/06/React-router学习/</id>
    <published>2018-06-06T13:54:28.000Z</published>
    <updated>2018-07-19T15:09:08.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-router介绍"><a href="#React-router介绍" class="headerlink" title="React-router介绍"></a>React-router介绍</h1><ul><li>React Router 是一个基于 React 之上的强大路由库</li><li>react-router、react-router-dom、react-router-native的区别<ul><li>react-router: 实现了路由的核心功能</li><li>react-router-dom: 基于react-router，加入了在浏览器运行环境下的一些功能，例如：Link组件，会渲染一个a标签，Link组件源码a标签行; BrowserRouter和HashRouter组件，前者使用pushState和popState事件构建路由，后者使用window.location.hash和hashchange事件构建路由。</li><li>react-router-native: 基于react-router，类似react-router-dom，加入了react-native运行环境下的一些功能。</li></ul></li><li>开发使用：<ul><li>react-router-dom依赖react-router，所以我们使用npm安装依赖的时候，只需要安装相应环境下的库即可，不用再显式安装react-router。基于浏览器环境的开发，只需要安装react-router-dom；</li><li>基于react-native环境的开发，只需要安装react-router-native。npm会自动解析react-router-dom包中package.json的依赖并安装。</li></ul></li></ul><h1 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a>react-router-dom</h1><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="1-BrowserRouter"><a href="#1-BrowserRouter" class="headerlink" title="1.BrowserRouter"></a>1.BrowserRouter</h3><ul><li><router> 使用 HTML5 提供的 history API (pushState, replaceState 和 popstate 事件) 来保持 UI 和 URL 的同步。</router></li></ul><h3 id="2-HashRouter"><a href="#2-HashRouter" class="headerlink" title="2.HashRouter"></a>2.HashRouter</h3><ul><li>HashRouter 使用 URL 的 hash (例如：window.location.hash) 来保持 UI 和 URL 的同步。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React-router介绍&quot;&gt;&lt;a href=&quot;#React-router介绍&quot; class=&quot;headerlink&quot; title=&quot;React-router介绍&quot;&gt;&lt;/a&gt;React-router介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;React Router 是一个
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="React-Router-dom" scheme="http://yoursite.com/tags/React-Router-dom/"/>
    
  </entry>
  
  <entry>
    <title>Cookie和Session</title>
    <link href="http://yoursite.com/2018/06/03/Cookie%E5%92%8CSession/"/>
    <id>http://yoursite.com/2018/06/03/Cookie和Session/</id>
    <published>2018-06-03T07:34:59.000Z</published>
    <updated>2018-06-04T15:20:38.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ul><li>Cookie是什么<ul><li>用户端保存请求信息的机制，在HTTP请求头中带上Cookie,用来让服务器识别请求.</li><li>格式：分号分隔的多个key-value字段</li><li>存储在本地的加密文件中</li><li>有域名和路径的限制</li></ul></li><li><p>JavaScript中的Cookie</p><ul><li>通过<code>document.cookie</code>来读取写入Cookie</li><li>Cookie的属性<ul><li>name: Cookie名称</li><li>domain: Cookie生效的域名</li><li>path: Cookie生效的路径</li><li>expires: Cookie过期时间</li><li>HttpOnly: 用户端不可更改</li></ul></li><li><p>删除Cookie的方法：设置expires(过期时间)为失效时间或为0;</p><a id="more"></a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Cookie是什么&lt;ul&gt;
&lt;li&gt;用户端保存请求信息的机制，在HTTP请求头中带上Cookie,用来让服务器识别请求.&lt;/li&gt;
&lt;li&gt;格式：分号分隔的多个key-value字段&lt;/li&gt;
&lt;li&gt;存储在本地的加密文件中&lt;/li&gt;
&lt;li&gt;有域名和路径的限制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript中的Cookie&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;document.cookie&lt;/code&gt;来读取写入Cookie&lt;/li&gt;
&lt;li&gt;Cookie的属性&lt;ul&gt;
&lt;li&gt;name: Cookie名称&lt;/li&gt;
&lt;li&gt;domain: Cookie生效的域名&lt;/li&gt;
&lt;li&gt;path: Cookie生效的路径&lt;/li&gt;
&lt;li&gt;expires: Cookie过期时间&lt;/li&gt;
&lt;li&gt;HttpOnly: 用户端不可更改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除Cookie的方法：设置expires(过期时间)为失效时间或为0;&lt;/p&gt;
    
    </summary>
    
      <category term="本地存储" scheme="http://yoursite.com/categories/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="Cookie" scheme="http://yoursite.com/tags/Cookie/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript风格规范</title>
    <link href="http://yoursite.com/2018/04/18/JavaScript%E9%A3%8E%E6%A0%BC%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/04/18/JavaScript风格规范/</id>
    <published>2018-04-18T05:44:07.000Z</published>
    <updated>2018-06-04T15:20:40.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编程风格"><a href="#编程风格" class="headerlink" title="编程风格"></a>编程风格</h1><h2 id="1-声明-块级作用域"><a href="#1-声明-块级作用域" class="headerlink" title="1. 声明(块级作用域)"></a>1. 声明(块级作用域)</h2><h3 id="（1）let取代var"><a href="#（1）let取代var" class="headerlink" title="（1）let取代var"></a>（1）let取代var</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">if (true) &#123;</span><br><span class="line">  let x = &apos;hello&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面代码如果用var替代let，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，var命令做不到这一点；var命令存在变量提升效用，let命令没有这个问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">if (true) &#123;</span><br><span class="line">  console.log(x); // ReferenceError</span><br><span class="line">  let x = &apos;hello&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。</li><li>建议不再使用var命令，而是使用let命令取代</li></ul><h3 id="（2）全局常量和线程安全"><a href="#（2）全局常量和线程安全" class="headerlink" title="（2）全局常量和线程安全"></a>（2）全局常量和线程安全</h3><ul><li>const优于let有几个原因:<ul><li>const可以提醒阅读程序的人，这个变量不应该改变</li><li>const比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算</li><li>JavaScript 编译器会对const进行优化，所以多使用const，有利于提高程序的运行效率，也就是说let和const的本质区别，其实是编译器内部的处理不同</li></ul></li><li>所有的函数都应该设置为常量</li></ul><h2 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2. 字符串"></a>2. 字符串</h2><ul><li>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const a = &apos;foobar&apos;;</span><br><span class="line">const b = &apos;foo&apos; + a + &apos;bar&apos;;</span><br><span class="line"></span><br><span class="line">// acceptable</span><br><span class="line">const c = `foobar`</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const a = &apos;foobar&apos;;</span><br><span class="line">const b = `foo$&#123;a&#125;bar`;</span><br><span class="line">const c = `foobar`;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="3-结构赋值"><a href="#3-结构赋值" class="headerlink" title="3. 结构赋值"></a>3. 结构赋值</h2><ul><li><p>使用数组成员对变量赋值时，优先使用解构赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const arr = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">const first = arr[0];</span><br><span class="line">const second = arr[1];</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const [first, second] = arr;</span><br></pre></td></tr></table></figure></li><li><p>函数的参数如果是对象的成员，优先使用解构赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// bad </span><br><span class="line">function getFullName(user) &#123;</span><br><span class="line">    const firstName = user.firstName;</span><br><span class="line">    const lastName = user.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">function getFullName(obj) &#123;</span><br><span class="line">    const &#123; firstName, lastName &#125; = obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// best</span><br><span class="line">function getFullName(&#123;firstName,lastName&#125;) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-对象"><a href="#4-对象" class="headerlink" title="4. 对象"></a>4. 对象</h2><ul><li><p>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// bed</span><br><span class="line">const a = &#123; k1: v1, k2: v2,&#125;;</span><br><span class="line">const b = &#123;</span><br><span class="line">    k1: v1,</span><br><span class="line">    k2:v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const a = &#123; k1: v1, k2: v2 &#125;;</span><br><span class="line">const b = &#123;</span><br><span class="line">    k1: v1,</span><br><span class="line">    k2: v2,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const a = &#123;&#125;;</span><br><span class="line">a.x = 3;</span><br><span class="line"></span><br><span class="line">// if reshape unavoidable</span><br><span class="line">const a = &#123;&#125;;</span><br><span class="line">Object.assign(a, &#123;x: 2&#125;);</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const a = &#123;x: null&#125;;</span><br><span class="line">a.x = 3;</span><br></pre></td></tr></table></figure></li><li><p>对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">let ref = &apos;some value&apos;;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">const atom = &#123;</span><br><span class="line">    ref: ref,</span><br><span class="line">    value: 1,</span><br><span class="line">    addValue: function (value) &#123;</span><br><span class="line">        return atom.value + vlaue</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const atom = &#123;</span><br><span class="line">    ref,</span><br><span class="line">    </span><br><span class="line">    value: 1,</span><br><span class="line">    </span><br><span class="line">    addValue(value) &#123;</span><br><span class="line">        return atom.value + value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5. 数组"></a>5. 数组</h2><ul><li><p>使用扩展运算符（…）拷贝数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const len = items.length;</span><br><span class="line">const itemsCopy = [];</span><br><span class="line">let i;</span><br><span class="line"></span><br><span class="line">for (i = 0; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const itemsCopy = [...items];</span><br></pre></td></tr></table></figure></li><li><p>使用 Array.from 方法，将类似数组的对象转为数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const foo = document.querySelectorAll(&apos;.foo&apos;);</span><br><span class="line">const nodes = Array.from(foo);</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h2><ul><li><p>立即执行函数可以写成箭头函数的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;Welcome to the Internet.&apos;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了 this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">[1, 2, 3].map(function (x) &#123;</span><br><span class="line">  return x * x;  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">[1, 2, 3].map((x) =&gt; &#123;</span><br><span class="line">    return x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// best</span><br><span class="line">[1, 2, 3].map(x =&gt; x*x);</span><br></pre></td></tr></table></figure></li><li><p>箭头函数取代Function.prototype.bind，不应再用 self/_this/that 绑定 this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const self = this;</span><br><span class="line">const boundMethod = function(..params) &#123;</span><br><span class="line">    return method.apply(self,params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// acceptable</span><br><span class="line">const boundMethod = method.bind(this);</span><br><span class="line"></span><br><span class="line">// best</span><br><span class="line">const boundMethod = (...params) =&gt; method.apply(this, params);</span><br></pre></td></tr></table></figure></li><li><p>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">function divide(a, b, option = false ) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">function divide(a, b, &#123; option = false &#125; = &#123;&#125;) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不要在函数体内使用 arguments 变量，使用 rest 运算符（…）代替。因为 rest 运算符显式表明你想要获取参数，而且 arguments 是一个类似数组的对象，而 rest 运算符可以提供一个真正的数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">function concatenateAll() &#123;</span><br><span class="line">  const args = Array.prototype.slice.call(arguments);</span><br><span class="line">  return args.join(&apos;&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">function concatenateAll(...args) &#123;</span><br><span class="line">  return args.join(&apos;&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用默认值语法设置函数参数的默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">function handleThings(opts) &#123;</span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">function handleThings(opts = &#123;&#125;) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-Map-结构"><a href="#7-Map-结构" class="headerlink" title="7. Map 结构"></a>7. Map 结构</h2><ul><li>注意区分 Object 和 Map，只有模拟现实世界的实体对象时，才使用 Object。如果只是需要key: value的数据结构，使用 Map 结构。因为 Map 有内建的遍历机制。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let map = new Map(arr);</span><br><span class="line">for (let key of map.keys()) &#123;</span><br><span class="line">    console.log(key);</span><br><span class="line">&#125;</span><br><span class="line">for (let value of map.values()) &#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">for (let item of map.entries()) &#123;</span><br><span class="line">    console.log(item[0],itme[1])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-Class"><a href="#8-Class" class="headerlink" title="8. Class"></a>8. Class</h2><ul><li><p>总是用 Class，取代需要 prototype 的操作。因为 Class 的写法更简洁，更易于理解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">function Queue(contents = []) &#123;</span><br><span class="line">  this._queue = [...contents];</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.pop = function() &#123;</span><br><span class="line">  const value = this._queue[0];</span><br><span class="line">  this._queue.splice(0, 1);</span><br><span class="line">  return value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">class Queue &#123;</span><br><span class="line">  constructor(contents = []) &#123;</span><br><span class="line">    this._queue = [...contents];</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    const value = this._queue[0];</span><br><span class="line">    this._queue.splice(0, 1);</span><br><span class="line">    return value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const inherits = require(&apos;inherits&apos;);</span><br><span class="line">function PeekableQueue(contents) &#123;</span><br><span class="line">  Queue.apply(this, contents);</span><br><span class="line">&#125;</span><br><span class="line">inherits(PeekableQueue, Queue);</span><br><span class="line">PeekableQueue.prototype.peek = function() &#123;</span><br><span class="line">  return this._queue[0];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">class PeekableQueue extends Queue &#123;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    return this._queue[0];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="9-模块"><a href="#9-模块" class="headerlink" title="9. 模块"></a>9. 模块</h2><ul><li><p>首先，Module 语法是 JavaScript模块的标准写法，坚持使用这种写法。使用import取代require。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const moduleA = require(&apos;moduleA&apos;);</span><br><span class="line">const func1 = moduleA.func1;</span><br><span class="line">const func2 = moduleA.func2;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">import &#123; func1, func2 &#125; from &apos;moduleA&apos;;</span><br></pre></td></tr></table></figure></li><li><p>使用export取代module.exports。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// commonJS的写法</span><br><span class="line">var React = require(&apos;react&apos;);</span><br><span class="line"></span><br><span class="line">var Breadcrumbs = React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;nav /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = Breadcrumbs;</span><br><span class="line"></span><br><span class="line">// ES6的写法</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">class Breadcrumbs extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;nav /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Breadcrumbs;</span><br></pre></td></tr></table></figure></li><li><p>如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，export default与普通的export不要同时使用。</p></li><li><p>不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">import * as myObject from &apos;./importModule&apos;;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">import myObject from &apos;./importModule&apos;;</span><br></pre></td></tr></table></figure></li><li><p>如果模块默认输出一个函数，函数名的首字母应该小写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function makeStyleGuide() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default makeStyleGuide;- ESLint 是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。</span><br></pre></td></tr></table></figure></li><li><p>如果模块默认输出一个对象，对象名的首字母应该大写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const StyleGuide = &#123;</span><br><span class="line">  es6: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default StyleGuide;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;编程风格&quot;&gt;&lt;a href=&quot;#编程风格&quot; class=&quot;headerlink&quot; title=&quot;编程风格&quot;&gt;&lt;/a&gt;编程风格&lt;/h1&gt;&lt;h2 id=&quot;1-声明-块级作用域&quot;&gt;&lt;a href=&quot;#1-声明-块级作用域&quot; class=&quot;headerlink&quot; title=&quot;1. 声明(块级作用域)&quot;&gt;&lt;/a&gt;1. 声明(块级作用域)&lt;/h2&gt;&lt;h3 id=&quot;（1）let取代var&quot;&gt;&lt;a href=&quot;#（1）let取代var&quot; class=&quot;headerlink&quot; title=&quot;（1）let取代var&quot;&gt;&lt;/a&gt;（1）let取代var&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;use strict&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (true) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  let x = &amp;apos;hello&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for (let i = 0; i &amp;lt; 10; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;上面代码如果用var替代let，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，var命令做不到这一点；var命令存在变量提升效用，let命令没有这个问题&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;use strict&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (true) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(x); // ReferenceError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  let x = &amp;apos;hello&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。&lt;/li&gt;
&lt;li&gt;建议不再使用var命令，而是使用let命令取代&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;（2）全局常量和线程安全&quot;&gt;&lt;a href=&quot;#（2）全局常量和线程安全&quot; class=&quot;headerlink&quot; title=&quot;（2）全局常量和线程安全&quot;&gt;&lt;/a&gt;（2）全局常量和线程安全&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;const优于let有几个原因:&lt;ul&gt;
&lt;li&gt;const可以提醒阅读程序的人，这个变量不应该改变&lt;/li&gt;
&lt;li&gt;const比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算&lt;/li&gt;
&lt;li&gt;JavaScript 编译器会对const进行优化，所以多使用const，有利于提高程序的运行效率，也就是说let和const的本质区别，其实是编译器内部的处理不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所有的函数都应该设置为常量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-字符串&quot;&gt;&lt;a href=&quot;#2-字符串&quot; class=&quot;headerlink&quot; title=&quot;2. 字符串&quot;&gt;&lt;/a&gt;2. 字符串&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// bad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const a = &amp;apos;foobar&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const b = &amp;apos;foo&amp;apos; + a + &amp;apos;bar&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// acceptable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const c = `foobar`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const a = &amp;apos;foobar&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const b = `foo$&amp;#123;a&amp;#125;bar`;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const c = `foobar`;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="ECMAScript规范" scheme="http://yoursite.com/tags/ECMAScript%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js讲解</title>
    <link href="http://yoursite.com/2018/04/16/Vue.js%E8%AE%B2%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/04/16/Vue.js讲解/</id>
    <published>2018-04-16T13:50:10.000Z</published>
    <updated>2018-06-03T08:13:49.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-框架使用前期准备"><a href="#1-框架使用前期准备" class="headerlink" title="1.框架使用前期准备"></a>1.框架使用前期准备</h1><h3 id="1-1-Node-js安装"><a href="#1-1-Node-js安装" class="headerlink" title="1.1 Node.js安装"></a>1.1 Node.js安装</h3><ul><li>直接去nodejs官网下载最新版本对应操作系统的nodejs进行安装，nodejs安装程序会自己设置环境变量，所以打开命令行输出<code>node -v</code>就能查看安装信息了，就说明安装成功了</li><li>npm就是nodejs的包管理工具，在安装nodejs的时候我们就会默认把npm安装了,并且已经配置到系统的环境变量Path中去，在控制台输出<code>npm -v</code>就能看到npm的版本</li><li>由于一些众所周知原因,有时候使用npm下载包的时候会非常慢，可以使用淘宝的镜像安装使用cnpm替代npm<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="1-2-ES6的使用"><a href="#1-2-ES6的使用" class="headerlink" title="1.2 ES6的使用"></a>1.2 ES6的使用</h3><ul><li>ECMAScript 2015（以下简称 ES6）是 JavaScript 语言的新标准，使用babel可以将es6语法转换成浏览器可以识别的es5语法，在<code>vue-cli</code>脚手架搭建的项目中已集成bable,所以在vue项目我们可以使用ES6进行开发。</li><li><p>ES6常用的语法</p><ul><li>新增let、const声明</li><li><p>解构赋值 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;name: &apos;alex&apos;, age: 20&#125;;</span><br><span class="line">let &#123;name, age&#125; = obj;</span><br><span class="line">console.log(name);</span><br><span class="line">console.log(age);</span><br></pre></td></tr></table></figure></li><li><p>模版字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;name: &apos;alex&apos;, age: 20&#125;;</span><br><span class="line">let str = `用户名：$&#123;obj.name&#125;，年龄:$&#123;obj.age&#125;`;</span><br><span class="line">console.log(str);</span><br></pre></td></tr></table></figure></li><li><p>模块化：模块是js能规模化、工程化最大的基础，但之前js对定一块的支持有限，所以当前端使用多个框架或类库时很容易出现冲突等问题。当然了出了一大堆AMD解决方案如seajs,commonjs.reqiruejs…现在在ES6中，已经增加了对模块的支持。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123;ajaxreq&#125; from &quot;./ajax&quot;</span><br><span class="line"></span><br><span class="line">function httpget(url, pars) &#123;</span><br><span class="line">    console.log(&apos;http get &apos;)</span><br><span class="line">    ajaxreq(url, pars)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123;httpget&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-3Webpack"><a href="#1-3Webpack" class="headerlink" title="1.3Webpack"></a>1.3Webpack</h3><ul><li><p>webpack当然是现在最为流行的js打包构建工具，非常强大。相关的配置以及使用三天三夜都要讲完。推荐文档<a href="https://doc.webpack-china.org/" target="_blank" rel="noopener">https://doc.webpack-china.org/</a></p></li><li><p>大家需要去明白的webpack的作是：把js项目以及相关依赖都打成一个可真正在浏览器运行的包（尽管babel能把es6转es5,事实上webpack中js的转换也是依靠babel完成的),所以这里不仅包括js转版本，还包含样式(less,sass)、前端构建(vue,react)，以及脚本去注释、压缩、混淆，甚至样式的压缩。都是通过webpack调度各类loadder和插件来完成的。</p></li></ul><h1 id="2-Vue-js基本语法介绍"><a href="#2-Vue-js基本语法介绍" class="headerlink" title="2.Vue.js基本语法介绍"></a>2.Vue.js基本语法介绍</h1><h4 id="什么是vue-vue能帮我们解决什么实际问题"><a href="#什么是vue-vue能帮我们解决什么实际问题" class="headerlink" title="什么是vue,vue能帮我们解决什么实际问题"></a>什么是vue,vue能帮我们解决什么实际问题</h4><ul><li>vue简单来说就是一个MVVM框架。</li><li>所以在说vue之前，我们先谈谈什么是MVVM(Model-View-ViewModel)。在我们的web前端开发过程中，需要经常做的三个工作就是渲染、交互以及提交，简单的来说就是需要把服务器响应的数据，呈现给浏览器让用户看得到可以交互的基本性东西，由于渲染的内容用户可以做比如点击、输入甚至拖动的各类交互操作，交互完成后又最终需要把用户交互处理后的结果（比如：表单提交）再提交到服务器。</li><li>这看起来当然没什么问题，但是有一点点麻烦就是首先需要写大量的代码进行渲染，然后需要写大量的代码来适应用户的各类交互，最终又通过大量的代码来获取用户最终交互的数据，这三个过程其实是分裂的。</li><li>那有没有什么更好的办法呢，当然有了，我们的MVVM就是来解决这个问题的。想象一下，如果我们根据某些数据进行渲染完成后，当数据当生改变后与之相关的UI也会重新渲染，更厉害的是当数据绑定的UI由于用户交互发生改变时，我们的数据也会自动更新。</li><li>这想想就很激动，没错MVVM框架已经完整的帮我们实现了这一个过程操作，让我们重点去关注数据本身，剩下的就全部将由mvvm框架处理就好了。vue既然是一个mvvm框架，当然这些也就都能做到。简单的界面当然可能感觉不到这种变化带来的前端开发质的飞跃，但当界面越来越复杂、交互越来越多的时候，这种模式的优势就非常明显了。</li></ul><h4 id="第一个Vue程序"><a href="#第一个Vue程序" class="headerlink" title="第一个Vue程序"></a>第一个Vue程序</h4><ul><li>引用vuejs,指定一个vue呈现的Dom元素,声明一个Vue对象，并且挂载指定的Dom元素，指定显示数据,这里需要关注的是Vue初始化对象的el表示该Vue渲染的Dom对象，data则是显示的内容对象,使用Vue模板来显示数据的message属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"> &#123;&#123;message&#125;&#125;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;a v-for=&quot;item in navlist&quot;  class=&quot;nav-item&quot;  :title=&quot;item.title&quot; :href=&quot;item.page&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;pages.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            title:&apos;第一个vue&apos;,</span><br><span class="line">            message: &apos;Hi,Vue!!!&apos;,</span><br><span class="line">            navlist:window.pages</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h4><ul><li>在开发过程中，进行数据渲染时我们使用最多的就是根据数据显示或隐藏内容，或者循环显示列表，话不多说看代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div v-if=&quot;seen&quot;&gt;设置能看见我了...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div v-show=&quot;show&quot;&gt;就算我不显示我也还是存在的&lt;/div&gt;  </span><br><span class="line">    &lt;div v-for=&quot;item in forlist&quot;&gt;name: &#123;&#123;item.name&#125;&#125;,age:&#123;&#123;item.age&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;a v-for=&quot;item in navlist&quot; class=&quot;nav-item&quot; :title=&quot;item.title&quot; :href=&quot;item.page&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;pages.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            seen: true,</span><br><span class="line">            show: true,</span><br><span class="line">            forlist: [&#123;</span><br><span class="line">                name: &apos;alex&apos;,</span><br><span class="line">                age: 20</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                name: &apos;luke&apos;,</span><br><span class="line">                age: 30</span><br><span class="line">            &#125;],</span><br><span class="line">            title: &apos;条件与循环&apos;,</span><br><span class="line">            navlist: window.pages</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>在元素中使用v-show或者v-if标签是，当指定的变量值为false时，则整个元素块不会显示，但v-show只是把该元素隐藏，而v-if则不显示。如果变量值为true,则效果一致。 v-for就是更简单了，看代码就明白，不多解释。</li></ul><h4 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h4><ul><li>使用vue需要着重关注的点就是，数据、方法与元素的关联关系，如怎么使一个元素的属性为数据的值，或者怎么指定一个方法为元素的事件执行方法，先看代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">    &lt;button @click=&quot;reverseMessage&quot;&gt;逆转消息&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;用户名:&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; v-model=&quot;user.name&quot;&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;职业:&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;select v-model=&quot;user.occupation&quot;&gt;</span><br><span class="line">                    &lt;option&gt;老师&lt;/option&gt;</span><br><span class="line">                    &lt;option&gt;医生&lt;/option&gt;</span><br><span class="line">                    &lt;option&gt;程序员&lt;/option&gt;</span><br><span class="line">                &lt;/select&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;性别:&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;radioMan&quot; value=&quot;男&quot; v-model=&quot;user.sex&quot;&gt;&lt;label</span><br><span class="line">                    for=&quot;radioMan&quot;&gt;男&lt;/label&gt;</span><br><span class="line">                &lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;radioWoman&quot; value=&quot;女&quot; v-model=&quot;user.sex&quot;&gt;&lt;label</span><br><span class="line">                    for=&quot;radioWoman&quot;&gt;女&lt;/label&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td colspan=&quot;2&quot;&gt;</span><br><span class="line">                表单结果,用户名：&#123;&#123;user.name&#125;&#125;,职业：&#123;&#123;user.occupation&#125;&#125;,性别：&#123;&#123;user.sex&#125;&#125;</span><br><span class="line">                &lt;br&gt;</span><br><span class="line">                &lt;button @click=&quot;getFormVal&quot;&gt;表单值&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;a v-for=&quot;item in navlist&quot; class=&quot;nav-item&quot; :title=&quot;item.title&quot; :href=&quot;item.page&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;pages.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    //文本绑定使用&#123;&#123;message&#125;&#125;,事件绑定使用@如@click，属性绑定</span><br><span class="line">    /**</span><br><span class="line">     * 各种绑定</span><br><span class="line">     1.文本绑定使用&#123;&#123;message&#125;&#125;</span><br><span class="line">     2.属性绑定使用:class,:title=&quot;className&quot;,</span><br><span class="line">     3.事件绑定，使用@,@click...</span><br><span class="line">     4.表单绑定使用v-model=&#123;&#125;</span><br><span class="line">     */</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &apos;这个是测试的内容文字啊@!!&apos;,</span><br><span class="line">            navlist: window.pages,</span><br><span class="line">            user: &#123;</span><br><span class="line">                name: &apos;tgb&apos;,</span><br><span class="line">                occupation: &apos;程序员&apos;,</span><br><span class="line">                sex: &apos;男&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            reverseMessage: function () &#123;</span><br><span class="line">                this.message = this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class="line">            &#125;,</span><br><span class="line">            getFormVal: function () &#123;</span><br><span class="line">                console.log(this.user);</span><br><span class="line"></span><br><span class="line">                alert(&apos;  表单结果,用户名：&apos; + this.user.name + &apos;,职业：： &apos; + this.user.occupation + &apos;,性别：： &apos; + this.user.sex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><ul><li>vue组件是非常强大重要的功能之一，通过简单的组件封装就能在元素中使用特定功能的标签。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;message&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;child1 :my-message=&quot;message&quot;&gt;&lt;/child1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;child2 v-for=&quot;item in userlist&quot; :user=&apos;item&apos;&gt;&lt;/child2&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;总数&#123;&#123;total&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button1 v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button1&gt;</span><br><span class="line">    &lt;button2 v-on:reduction=&quot;reductionTotal&quot;&gt;&lt;/button2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;a v-for=&quot;item in navlist&quot; class=&quot;nav-item&quot; :title=&quot;item.title&quot; :href=&quot;item.page&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;pages.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.component(&apos;child1&apos;, &#123;</span><br><span class="line">        props: [&apos;myMessage&apos;],</span><br><span class="line">        template: &apos;&lt;span&gt;&#123;&#123; myMessage &#125;&#125;&lt;/span&gt;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Vue.component(&apos;child2&apos;, &#123;</span><br><span class="line">        props: [&apos;user&apos;],</span><br><span class="line">        template: &apos;&lt;li&gt;名字:&#123;&#123; user.name &#125;&#125;,年龄:&#123;&#123;user.age&#125;&#125;&lt;/li&gt;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Vue.component(&apos;button1&apos;,&#123;</span><br><span class="line">        template:&apos;&lt;button v-on:click=&quot;incrementHandler&quot;&gt;+&lt;/button&gt;&apos;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            incrementHandler: function () &#123;</span><br><span class="line">                this.$emit(&apos;increment&apos;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Vue.component(&apos;button2&apos;,&#123;</span><br><span class="line">        template:&apos;&lt;button v-on:click=&quot;reductionHandler&quot;&gt;-&lt;/button&gt;&apos;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            reductionHandler: function () &#123;</span><br><span class="line">                this.$emit(&apos;reduction&apos;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message:&apos;测试的文字&apos;,</span><br><span class="line">            navlist: window.pages,</span><br><span class="line">            userinfo:&#123;name:&apos;alex&apos;,age:18&#125;,</span><br><span class="line">            userlist:[</span><br><span class="line">                &#123;name:&apos;tonme&apos;,age:18&#125;,</span><br><span class="line">                &#123;name:&apos;luke&apos;,age:22&#125;,</span><br><span class="line">            ],</span><br><span class="line">            total: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            reverseMessage: function () &#123;</span><br><span class="line">                this.message = this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class="line">            &#125;,</span><br><span class="line">            incrementTotal: function () &#123;</span><br><span class="line">                this.total += 1</span><br><span class="line">            &#125;,</span><br><span class="line">            reductionTotal: function () &#123;</span><br><span class="line">                this.total -= 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="3-Vue组件化开发"><a href="#3-Vue组件化开发" class="headerlink" title="3. Vue组件化开发"></a>3. Vue组件化开发</h1><h2 id="3-1vue-cli-脚手架工具"><a href="#3-1vue-cli-脚手架工具" class="headerlink" title="3.1vue-cli 脚手架工具"></a>3.1vue-cli 脚手架工具</h2><ul><li>现在前端使用的技术、框架以及工具是非常多非常麻烦的，配置对于一个新手可以说是绝望的。不过还好有一些辅助工具已经把这些工具给封装了，我们只需要简单的几个命令就可以快速把项目跑起来。</li></ul><h4 id="3-1-1-安装vue-cli"><a href="#3-1-1-安装vue-cli" class="headerlink" title="3.1.1 安装vue-cli"></a>3.1.1 安装vue-cli</h4><ul><li>全局安装<code>npm install -g vue-cli</code></li><li>安装成功后，使用vue -V检测版本是否已经安装成功<h4 id="3-1-2-搭建项目"><a href="#3-1-2-搭建项目" class="headerlink" title="3.1.2 搭建项目"></a>3.1.2 搭建项目</h4></li><li><code>vue init webpack my-projectname</code><h4 id="3-1-3-还原依赖并运行项目"><a href="#3-1-3-还原依赖并运行项目" class="headerlink" title="3.1.3 还原依赖并运行项目"></a>3.1.3 还原依赖并运行项目</h4></li><li>cd my-projectname</li><li>npm run dev</li></ul><h4 id="3-1-4-默认项目结构简单介绍"><a href="#3-1-4-默认项目结构简单介绍" class="headerlink" title="3.1.4 默认项目结构简单介绍"></a>3.1.4 默认项目结构简单介绍</h4><ul><li>-build 构建相关的脚本目录，开发过程中几乎不需要改更</li><li>-config 构建相关的配置目录，没特殊要求也不需要修改</li><li>|—index.js 基本的配置脚本，这里可以配置启动的端口，代理等。极少用</li><li>node_modules 引用的模块目录，如果太慢可以把该目录排除，不进行索引打描。</li><li>-src 源代码开发目录，非常重要，要写的代码都在这里</li><li>|—assets 引用资源目录如图片、字体素材等.</li><li>|—components 组件类库</li><li>|—router vue-router配置目录，如果需要新增router页面需要在这里进行添加</li><li>|—App.vue Vue首页</li><li>|—main.js Vue入口文件</li><li>-index.html 程序入口文件</li><li>-package.json nodejs 工程配置文件</li></ul><h4 id="3-1-5-Vue单文件介绍"><a href="#3-1-5-Vue单文件介绍" class="headerlink" title="3.1.5 Vue单文件介绍"></a>3.1.5 Vue单文件介绍</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">  &#123;&#123;msg&#125;&#125;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;userclick&quot;&gt;处理一下事件吧&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    UI组件：</span><br><span class="line">    &lt;el-switch</span><br><span class="line">      v-model=&quot;isselected&quot;</span><br><span class="line">      active-color=&quot;#13ce66&quot;</span><br><span class="line">      inactive-color=&quot;#ff4949&quot;&gt;</span><br><span class="line">    &lt;/el-switch&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import axios from &quot;axios&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;HelloWorld&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg:&apos;&apos;,</span><br><span class="line">      isselected:true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    userclick:function () &#123;</span><br><span class="line">      this.msg = `改变了值...$&#123;new Date().getTime()&#125;`</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      axios.get(&apos;/api/getmsg&apos;).then(res=&gt;&#123;</span><br><span class="line">          console.log(res);</span><br><span class="line">          that.msg = res.data.msg;</span><br><span class="line">      &#125;);</span><br><span class="line">    console.log(&apos;hw loadding&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1, h2 &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">ul &#123;</span><br><span class="line">  list-style-type: none;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">li &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin: 0 10px;</span><br><span class="line">&#125;</span><br><span class="line">a &#123;</span><br><span class="line">  color: #42b983;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>template.该部分包含我们最终的vue前端模板</li><li>script部分为脚本编写模块 export default 为初始化vue的参数，一般采用了简写最重要的三个部分是 data 函数返回当前对象默认的数据，methods为处理绑定的方法，mounted则为页面加载时执行行回调方法，在这里我们可以向服务器发出请求获取列表，加载数据行装</li><li>stytle 就是样式了没什么好说了。</li></ul><h2 id="3-2-vue-router"><a href="#3-2-vue-router" class="headerlink" title="3.2 vue-router"></a>3.2 vue-router</h2><ul><li>vue-router是vue生态最重要的一部分，简单来说用router后使得我们可以进行单个页面开发，控制页面的路由跳转</li><li>创建一个vue页面src\components\Profile.vue</li><li>在src/router/index.js 脚本中注册路由</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">import HelloWorld from &apos;@/components/HelloWorld&apos; </span><br><span class="line"></span><br><span class="line">import Profile from &apos;@/components/Profile&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: &apos;/&apos;,</span><br><span class="line">            name: &apos;HelloWorld&apos;,</span><br><span class="line">            component: HelloWorld</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            path: &apos;/profile&apos;,</span><br><span class="line">            name: &apos;Profile&apos;,</span><br><span class="line">            component: Profile</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用路由在入口App.Vue中增加代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;router-link to=&quot;/&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">            &lt;router-link to=&quot;/profile&quot;&gt;用户中心&lt;/router-link&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;router-view/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h1 id="4-aixos使用和配置代理跨域"><a href="#4-aixos使用和配置代理跨域" class="headerlink" title="4. aixos使用和配置代理跨域"></a>4. aixos使用和配置代理跨域</h1><ul><li><p>安装axios<code>npm install axios -S</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//基本使用</span><br><span class="line">mounted()&#123;</span><br><span class="line">    let that = this;</span><br><span class="line">    axios.get(&apos;/api/getmsg&apos;).then(res=&gt;&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">        that.msg = res.data.msg;</span><br><span class="line">    &#125;);</span><br><span class="line">  console.log(&apos;hw loadding&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置代理跨域：在config、index.js文件修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">      &apos;/api&apos;: &#123;</span><br><span class="line">        target: &apos;http://localhost:8839/&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-框架使用前期准备&quot;&gt;&lt;a href=&quot;#1-框架使用前期准备&quot; class=&quot;headerlink&quot; title=&quot;1.框架使用前期准备&quot;&gt;&lt;/a&gt;1.框架使用前期准备&lt;/h1&gt;&lt;h3 id=&quot;1-1-Node-js安装&quot;&gt;&lt;a href=&quot;#1-1-Node-js安装&quot; class=&quot;headerlink&quot; title=&quot;1.1 Node.js安装&quot;&gt;&lt;/a&gt;1.1 Node.js安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;直接去nodejs官网下载最新版本对应操作系统的nodejs进行安装，nodejs安装程序会自己设置环境变量，所以打开命令行输出&lt;code&gt;node -v&lt;/code&gt;就能查看安装信息了，就说明安装成功了&lt;/li&gt;
&lt;li&gt;npm就是nodejs的包管理工具，在安装nodejs的时候我们就会默认把npm安装了,并且已经配置到系统的环境变量Path中去，在控制台输出&lt;code&gt;npm -v&lt;/code&gt;就能看到npm的版本&lt;/li&gt;
&lt;li&gt;由于一些众所周知原因,有时候使用npm下载包的时候会非常慢，可以使用淘宝的镜像安装使用cnpm替代npm&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g cnpm --registry=https://registry.npm.taobao.org&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vw适配移动端</title>
    <link href="http://yoursite.com/2018/04/16/vw%E9%80%82%E9%85%8D%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    <id>http://yoursite.com/2018/04/16/vw适配移动端/</id>
    <published>2018-04-16T13:48:48.000Z</published>
    <updated>2018-06-03T07:45:45.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-vw原理解析"><a href="#1-vw原理解析" class="headerlink" title="1.vw原理解析"></a>1.vw原理解析</h1><ul><li>vw是基于Viewport视窗的长度单位，这里的视窗（Viewport）指的就是浏览器可视化的区域，而这个可视区域是window.innerWidth/window.innerHeight的大小。</li><li>Viewport相关的单位有四个，分别为vw、vh、vmin和vmax:<ul><li>vw：是Viewport’s width的简写,1vw等于window.innerWidth的1%</li><li>vh：和vw类似，是Viewport’s height的简写，1vh等于window.innerHeihgt的1%</li><li>vmin：vmin的值是当前vw和vh中较小的值</li><li>vmax：vmax的值是当前vw和vh中较大的值</li><li>vmin和vmax是根据Viewport中长度偏大的那个维度值计算出来的，如果window.innerHeight &gt; window.innerWidth则vmin取百分之一的window.innerWidth，vmax取百分之一的window.innerHeight计算。</li></ul></li><li>如果设计稿的宽度是750px，那么100vw=750px,1vw=7.5px</li></ul><h1 id="2-Vue项目中使用vw实现移动端适配"><a href="#2-Vue项目中使用vw实现移动端适配" class="headerlink" title="2.Vue项目中使用vw实现移动端适配"></a>2.Vue项目中使用vw实现移动端适配</h1><ul><li>安装PostCSS插件<ul><li>在.postcssrc.js使用postcss</li><li>已经装好有postcss-import、postcss-url、autoprefixer</li><li>新增插件：<code>npm i postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext postcss-viewport-units cssnano --S</code><a id="more"></a></li></ul></li><li><p>在.postcssrc.js文件对新安装的PostCSS插件进行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  &quot;plugins&quot;: &#123;</span><br><span class="line">    &quot;postcss-import&quot;: &#123;&#125;,</span><br><span class="line">    &quot;postcss-url&quot;: &#123;&#125;,</span><br><span class="line">    // 使用postcss的插件实现vw适配移动端</span><br><span class="line">    // 由于cssnext和cssnano都具有autoprefixer,事实上只需要一个，所以把默认的autoprefixer删除掉，然后把cssnano中的autoprefixer设置为false</span><br><span class="line">    &apos;postcss-aspect-ratio-mini&apos;: &#123;&#125;, // 用来处理元素容器宽高比</span><br><span class="line">    &apos;postcss-write-svg&apos;: &#123; // 用来处理移动端1px的解决方案</span><br><span class="line">      uft8:false</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;postcss-cssnext&apos;: &#123;&#125;, // 让项目使用CSS未来特性 并对其做兼容性处理</span><br><span class="line">    &apos;postcss-px-to-viewport&apos;: &#123;</span><br><span class="line">      viewportWidth: 750, // 视窗的宽度，对应我们设计稿的宽度，一般是750</span><br><span class="line">      viewportHeight: 1334, // 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</span><br><span class="line">      unitPrecision: 3, // 指定&apos;px&apos;转换为视窗单位值得小数位数（很多时候无法整除）</span><br><span class="line">      viewportUnit:&apos;vw&apos;, // 指定需要转换成的视窗单位,建议使用vw</span><br><span class="line">      selectorBlackList: [&apos;.ignore&apos;,&apos;.hairliness&apos;], // 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span><br><span class="line">      minPixelValue: 1, // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值。</span><br><span class="line">      mediaQuery: false // 允许在媒体查询中转换`px`</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;postcss-viewport-units&apos;: &#123;&#125;, // 给CSS的属性添加content的属性 配合viewport-units-buggyfill解决个别手机不支持vw</span><br><span class="line">    &apos;cssnano&apos;: &#123; // 压缩和清理CSS代码</span><br><span class="line">      preset: &apos;advanced&apos;,</span><br><span class="line">      autoprefixer: false,</span><br><span class="line">      &apos;postcss-zindex&apos;: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vw兼容方案: 兼容个别手机</p><ul><li>主要使用viewport-units-buggyfill.js和viewport-units-buggyfill.hacks.js，只需要在你的HTML文件中引入这两个文件。比如在Vue项目中的index.html引入它们</li><li><code>&lt;script src=&quot;//g.alicdn.com/fdilab/lib3rd/viewport-units-buggyfill/0.6.2/??viewport-units-buggyfill.hacks.min.js,viewport-units-buggyfill.min.js&quot;&gt;&lt;/script&gt;</code></li><li><p>在HTML文件中调用<code>viewport-units-buggyfill</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用viewport-units-buggyfill解决个别手机不支持vw--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  window.onload = function () &#123;</span><br><span class="line">    window.viewportUnitsBuggyfill.init(&#123;</span><br><span class="line">      hacks: window.viewportUnitsBuggyfillHacks</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>前面配置的postcss-viewport-units插件。这个插件将让你无需关注content的内容，插件会自动帮你处理。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-vw原理解析&quot;&gt;&lt;a href=&quot;#1-vw原理解析&quot; class=&quot;headerlink&quot; title=&quot;1.vw原理解析&quot;&gt;&lt;/a&gt;1.vw原理解析&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;vw是基于Viewport视窗的长度单位，这里的视窗（Viewport）指的就是浏览器可视化的区域，而这个可视区域是window.innerWidth/window.innerHeight的大小。&lt;/li&gt;
&lt;li&gt;Viewport相关的单位有四个，分别为vw、vh、vmin和vmax:&lt;ul&gt;
&lt;li&gt;vw：是Viewport’s width的简写,1vw等于window.innerWidth的1%&lt;/li&gt;
&lt;li&gt;vh：和vw类似，是Viewport’s height的简写，1vh等于window.innerHeihgt的1%&lt;/li&gt;
&lt;li&gt;vmin：vmin的值是当前vw和vh中较小的值&lt;/li&gt;
&lt;li&gt;vmax：vmax的值是当前vw和vh中较大的值&lt;/li&gt;
&lt;li&gt;vmin和vmax是根据Viewport中长度偏大的那个维度值计算出来的，如果window.innerHeight &amp;gt; window.innerWidth则vmin取百分之一的window.innerWidth，vmax取百分之一的window.innerHeight计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果设计稿的宽度是750px，那么100vw=750px,1vw=7.5px&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-Vue项目中使用vw实现移动端适配&quot;&gt;&lt;a href=&quot;#2-Vue项目中使用vw实现移动端适配&quot; class=&quot;headerlink&quot; title=&quot;2.Vue项目中使用vw实现移动端适配&quot;&gt;&lt;/a&gt;2.Vue项目中使用vw实现移动端适配&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;安装PostCSS插件&lt;ul&gt;
&lt;li&gt;在.postcssrc.js使用postcss&lt;/li&gt;
&lt;li&gt;已经装好有postcss-import、postcss-url、autoprefixer&lt;/li&gt;
&lt;li&gt;新增插件：&lt;code&gt;npm i postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext postcss-viewport-units cssnano --S&lt;/code&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="vw适配" scheme="http://yoursite.com/tags/vw%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>pc端密码控件的使用</title>
    <link href="http://yoursite.com/2018/04/11/pc%E7%AB%AF%E5%AF%86%E7%A0%81%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/11/pc端密码控件的使用/</id>
    <published>2018-04-11T06:28:42.000Z</published>
    <updated>2018-06-03T07:49:34.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="密码控件-PassGuard介绍"><a href="#密码控件-PassGuard介绍" class="headerlink" title="密码控件 PassGuard介绍"></a>密码控件 PassGuard介绍</h1><ul><li>使用的密码控件是北京微通新成的</li><li>控件集成了<code>crypto-js.js</code>、<code>PassGuardCtrl.js</code>、<code>jQuery.js</code>、AESWithJCE.jar(解密jar);</li></ul><h1 id="前端初始化控件"><a href="#前端初始化控件" class="headerlink" title="前端初始化控件"></a>前端初始化控件</h1><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        //第一步 向后台发送ajax请求获取sKey,enStr;</span><br><span class="line">        //第二步初始化控件</span><br><span class="line">        //初始化控件时注意 pageEdittype必须设置为0 星号 不然会造成input框输入卡</span><br><span class="line">        var pgeditor = new $.pge(&#123;</span><br><span class="line">            pgePath : &quot;./ocx/&quot;,//控件下载目录，可以指定绝对路径，如&quot;http://www.baidu.com/download/&quot;</span><br><span class="line">            pgeId : &quot;_ocx_password&quot;,//控件id</span><br><span class="line">            pgeEdittype : 0,//控件显示类型,0(星号),1(明文) </span><br><span class="line">            pgeEreg1 : &quot;[\\s\\S]*&quot;,//输入过程中字符类型限制，如&quot;[0-9]*&quot;表示只能输入数字</span><br><span class="line">            pgeEreg2 : &quot;[\\s\\S]&#123;6,12&#125;&quot;,//输入完毕后字符类型判断条件，与pgeditor.pwdValid()方法对应</span><br><span class="line">            pgeMaxlength : 12,//允许最大输入长度</span><br><span class="line">            pgeTabindex : 2,//tab键顺序</span><br><span class="line">            pgeClass : &quot;ocx_style&quot;,//控件css样式</span><br><span class="line">            pgeInstallClass : &quot;ocx_style&quot;,//针对安装或升级的css样式</span><br><span class="line">            pgeOnkeydown :&quot;FormSubmit()&quot;,//回车键响应函数，需焦点在控件中才能响应</span><br><span class="line">            tabCallback : &quot;input2&quot;,//火狐tab键回调函数,设置要跳转到的对象ID</span><br><span class="line">            pgeOnfocus:&quot;pgeFocus()&quot;,//监控光标切入密码控件框</span><br><span class="line">            pgeOnblur:&quot;pgeBlur()&quot;,//监控光标切出密码控件框</span><br><span class="line">            //windows10 edge&amp;Chrome42+相关</span><br><span class="line">            pgeWindowID:&quot;password&quot;+new Date().getTime()+1, //设置多个密码输入框是时间戳一定要不同</span><br><span class="line">            pgeRZRandNum:sKey,</span><br><span class="line">            pgeRZDataB:enStr</span><br><span class="line">        &#125;);</span><br><span class="line">        window.pgeCtrl = pgeditor;</span><br><span class="line">        var i = 0;</span><br><span class="line">        //密码控件获得焦点时，提示一下</span><br><span class="line">        function pgeFocus()&#123;</span><br><span class="line">            $(&quot;#tishi&quot;).html(&quot;获得焦点&quot;+(i++));</span><br><span class="line">        &#125;</span><br><span class="line">        //密码控件失去焦点时获得密码强度，并展示出来</span><br><span class="line">        function pgeBlur()&#123;</span><br><span class="line">            $(&quot;#tishi&quot;).html(&quot;失去焦点&quot;+(i++));</span><br><span class="line">            //显示密码强度</span><br><span class="line">            GetLevel();</span><br><span class="line">        &#125;</span><br><span class="line">        window.onload = function()&#123;</span><br><span class="line">            $(&quot;#login&quot;).focus();</span><br><span class="line">            pgeditor.pgInitialize();</span><br><span class="line">            $(&quot;lic&quot;).html(pgeditor.setLicense());</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    //第三步 点击提交时</span><br><span class="line">    function FormSubmit() &#123;</span><br><span class="line">var length = pgeditor.pwdLength();//获得密码长度</span><br><span class="line">if (length == 0 || length == undefined) &#123;</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">alert(&quot;密码不能为空&quot;);</span><br><span class="line">_$(&quot;_ocx_password&quot;).focus();</span><br><span class="line">&#125;,0);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">if (pgeditor.pwdValid() == 1) &#123;//判断密码是否匹配正则表达式二</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">alert(&quot;密码不符合要求&quot;);</span><br><span class="line">_$(&quot;_ocx_password&quot;).focus();</span><br><span class="line">&#125;,0);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">    // 一定要再次请求获取随机因子并设置</span><br><span class="line">    // 后台保存此次的sKey</span><br><span class="line">    //pgeditor.pwdResult()是提交给后台的 加了AES密文的密码</span><br><span class="line">$.ajax( &#123;</span><br><span class="line">url : &quot;./srand_num.jsp?&quot; + get_time(),//get_time()防止缓存</span><br><span class="line">type : &quot;GET&quot;,</span><br><span class="line">async : false,</span><br><span class="line">success : function(srand_num) &#123;</span><br><span class="line">pgeditor.pwdSetSk(srand_num);//给控件设置随机因子</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">var pwdResult = pgeditor.pwdResult();//获取密码AES密文</span><br><span class="line">var machineNetwork = pgeditor.machineNetwork();//获取网卡信息密文</span><br><span class="line">var machineDisk = pgeditor.machineDisk();//获取硬盘信息密文</span><br><span class="line">var machineCPU = pgeditor.machineCPU();//获取CPU信息密文</span><br><span class="line">_$(&quot;password&quot;).value = pwdResult;//将密码密文赋值给表单</span><br><span class="line">_$(&quot;local_network&quot;).value = machineNetwork;//将网卡和MAC信息密文赋值给表单</span><br><span class="line">_$(&quot;local_disk&quot;).value = machineDisk;//将硬盘信息密文赋值给表单</span><br><span class="line">_$(&quot;local_cpu&quot;).value = machineCPU;//将CPU信息密文赋值给表单</span><br><span class="line">document.form1.submit();</span><br><span class="line">&#125;</span><br><span class="line">    第四步 服务器端调用安全控件解密接口进行解密</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;密码控件-PassGuard介绍&quot;&gt;&lt;a href=&quot;#密码控件-PassGuard介绍&quot; class=&quot;headerlink&quot; title=&quot;密码控件 PassGuard介绍&quot;&gt;&lt;/a&gt;密码控件 PassGuard介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用的密码控件是北京微通新成的&lt;/li&gt;
&lt;li&gt;控件集成了&lt;code&gt;crypto-js.js&lt;/code&gt;、&lt;code&gt;PassGuardCtrl.js&lt;/code&gt;、&lt;code&gt;jQuery.js&lt;/code&gt;、AESWithJCE.jar(解密jar);&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;前端初始化控件&quot;&gt;&lt;a href=&quot;#前端初始化控件&quot; class=&quot;headerlink&quot; title=&quot;前端初始化控件&quot;&gt;&lt;/a&gt;前端初始化控件&lt;/h1&gt;
    
    </summary>
    
      <category term="应用工具" scheme="http://yoursite.com/categories/%E5%BA%94%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="密码控件" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JS调试的5个debug技巧</title>
    <link href="http://yoursite.com/2018/03/01/JS%E8%B0%83%E8%AF%95%E7%9A%845%E4%B8%AAdebug%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2018/03/01/JS调试的5个debug技巧/</id>
    <published>2018-03-01T09:12:57.000Z</published>
    <updated>2018-06-03T08:06:28.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-debugger"><a href="#1-debugger" class="headerlink" title="1.debugger"></a>1.debugger</h1><ul><li>直接在javaScript代码中加入一句<code>debugger</code>手工造成一个断点效果</li><li>带有条件的断点吗？你只需要用if语句包围它<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (somethingHappens) &#123;</span><br><span class="line">  debugger;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-设置在DOM-node发生变化时触发断点"><a href="#2-设置在DOM-node发生变化时触发断点" class="headerlink" title="2.设置在DOM node发生变化时触发断点"></a>2.设置在DOM node发生变化时触发断点</h1><ul><li>DOM不受你的控制，自己会发生一些奇怪的变化，让你很难找出问题的根源</li></ul><h1 id="3-Ajax-断点"><a href="#3-Ajax-断点" class="headerlink" title="3.Ajax 断点"></a>3.Ajax 断点</h1><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-debugger&quot;&gt;&lt;a href=&quot;#1-debugger&quot; class=&quot;headerlink&quot; title=&quot;1.debugger&quot;&gt;&lt;/a&gt;1.debugger&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;直接在javaScript代码中加入一句&lt;code&gt;debugger&lt;/code&gt;手工造成一个断点效果&lt;/li&gt;
&lt;li&gt;带有条件的断点吗？你只需要用if语句包围它&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (somethingHappens) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  debugger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-设置在DOM-node发生变化时触发断点&quot;&gt;&lt;a href=&quot;#2-设置在DOM-node发生变化时触发断点&quot; class=&quot;headerlink&quot; title=&quot;2.设置在DOM node发生变化时触发断点&quot;&gt;&lt;/a&gt;2.设置在DOM node发生变化时触发断点&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;DOM不受你的控制，自己会发生一些奇怪的变化，让你很难找出问题的根源&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-Ajax-断点&quot;&gt;&lt;a href=&quot;#3-Ajax-断点&quot; class=&quot;headerlink&quot; title=&quot;3.Ajax 断点&quot;&gt;&lt;/a&gt;3.Ajax 断点&lt;/h1&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="debug" scheme="http://yoursite.com/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>ES6中的类</title>
    <link href="http://yoursite.com/2018/03/01/ES6%E4%B8%AD%E7%9A%84%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/03/01/ES6中的类/</id>
    <published>2018-03-01T01:27:18.000Z</published>
    <updated>2018-03-01T09:13:09.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h1><ul><li><p>基本的类声明语法：要声明一个类，首先编写class关键字，紧跟着的是类的名字，其他部分的语法类似于对象字面量方法的简写形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class PersonClass &#123;</span><br><span class="line">    //等价于PersonClass构造函数</span><br><span class="line">    constructor(name) &#123;</span><br><span class="line">        this.name</span><br><span class="line">    &#125;</span><br><span class="line">    //等价于PersonType.prototype.sayName</span><br><span class="line">    sayName() &#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let person = new PersonClass(&apos;tgb&apos;);</span><br><span class="line">person.sayName(); //outputs &apos;tgb&apos;</span><br><span class="line"></span><br><span class="line">console.log(person instanceof PersonClass); //true</span><br><span class="line">console.log(person instanceof Object);  true</span><br><span class="line">console.log(typeof PersonClass);    //&apos;function&apos;</span><br><span class="line">console.log(typeof PersonClass.prototype.sayName); //&apos;function&apos;</span><br></pre></td></tr></table></figure></li><li><p>提升：类声明不会声明提升，你首先需要声明你的类，然后访问它，否则会抛出一个ReferenceError：</p></li></ul><h1 id="类语法的特性"><a href="#类语法的特性" class="headerlink" title="类语法的特性:"></a>类语法的特性:</h1><ol><li>类声明与let声明类似，不能被提升，真正执行声明语句之前，他们会一直存在于临时死区中</li><li>类声明中的所有代码将自行运行在严格模式下，而且无法强行</li><li>类中所有方法都是不可枚举的</li><li>每个类都有一个名为[[constructor]]的内部方法,通过关键字new调用那些不含[[constructor]]的方法会导致程序抛出错误</li><li>使用除关键字new以外的方式调用类的构造函数会导致程序抛出错误</li><li>在类中修改类名会导致程序报错</li></ol><h1 id="类表达式"><a href="#类表达式" class="headerlink" title="类表达式"></a>类表达式</h1><h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><ul><li>一个 Promise 就是一个代表了异步操作最终完成或者失败的对象.  一个promise可以使用它的constructor创建</li><li>本质上，一个promise是某个函数返回的对象，你可以把回调函数绑定在这个对象上，而不是把回调函数当作参数传进函数</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类的声明&quot;&gt;&lt;a href=&quot;#类的声明&quot; class=&quot;headerlink&quot; title=&quot;类的声明&quot;&gt;&lt;/a&gt;类的声明&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本的类声明语法：要声明一个类，首先编写class关键字，紧跟着的是类的名字，其他部分的语法类似于对象字面
      
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
  </entry>
  
</feed>
