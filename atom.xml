<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汤国斌的博客</title>
  <subtitle>学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-12T03:52:37.790Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>汤国斌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>国际化——Vue-i18n的使用</title>
    <link href="http://yoursite.com/2017/08/12/%E5%9B%BD%E9%99%85%E5%8C%96%E2%80%94%E2%80%94Vue-i18n%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/08/12/国际化——Vue-i18n的使用/</id>
    <published>2017-08-12T03:30:07.000Z</published>
    <updated>2017-08-12T03:52:37.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-i18n安装"><a href="#Vue-i18n安装" class="headerlink" title="Vue-i18n安装"></a>Vue-i18n安装</h2><ul>
<li><code>npm install vue-i18n --save</code></li>
</ul>
<h2 id="Vue-i18n的使用"><a href="#Vue-i18n的使用" class="headerlink" title="Vue-i18n的使用"></a>Vue-i18n的使用</h2><ul>
<li>在入口<code>main.js</code>文件配置使用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import VueI18n from &apos;vue-i18n&apos;</div><div class="line"></div><div class="line">Vue.use(VueI18n);</div><div class="line">/*---------基本使用-----------*/</div><div class="line">const i18n = new VueI18n(&#123;</div><div class="line">  locale: &apos;CN&apos;,    // 语言标识</div><div class="line">  messages : &#123;</div><div class="line">    en: &#123;</div><div class="line">      message: &#123;</div><div class="line">        hello: &apos;hello world&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    cn: &#123;</div><div class="line">      message: &#123;</div><div class="line">        hello: &apos;你好、世界&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">/*---------使用语言包-----------*/</div><div class="line">const i18n = new VueI18n(&#123;</div><div class="line">  locale: &apos;CN&apos;,    // 语言标识</div><div class="line">  messages: &#123;</div><div class="line">    &apos;CN&apos;: require(&apos;./assets/common/lang/cn&apos;),   // 中文语言包</div><div class="line">    &apos;EN&apos;: require(&apos;./assets/common/lang/en&apos;)    // 英文语言包</div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line"></div><div class="line">/*---------语言包内部语法star-----------*/</div><div class="line">export const  message = &#123;</div><div class="line">      language:&apos;语言&apos;,</div><div class="line">      hello: &apos;你好,世界&apos;</div><div class="line">&#125;</div><div class="line">/*---------语言包内部语法end-----------*/</div><div class="line"></div><div class="line">/*---------挂载全局使用-----------*/</div><div class="line">new Vue(&#123;</div><div class="line">  el: &apos;#app&apos;,</div><div class="line">  i18n,</div><div class="line">  router,</div><div class="line">  template: &apos;&lt;App/&gt;&apos;,</div><div class="line">  components: &#123; App &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">/*---------vue组件模板的使用-----------*/</div><div class="line"> &lt;template&gt;</div><div class="line">        &lt;p&gt;&#123;&#123; $t(&quot;message.hello&quot;) &#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;/template&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="单独组件的使用"><a href="#单独组件的使用" class="headerlink" title="单独组件的使用"></a>单独组件的使用</h2><ul>
<li>在单个vue组件中使用，要用到i18n自定义块，需要配置webpack文件<code>webpack.base.conf.js</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.vue$/,</div><div class="line">        loader: &apos;vue-loader&apos;,</div><div class="line">        options: &#123;</div><div class="line">          loaders: &#123;</div><div class="line">            // you need to specify `i18n` loaders key with `vue-i18n-loader` (https://github.com/kazupon/vue-i18n-loader)</div><div class="line">            i18n: &apos;@kazupon/vue-i18n-loader&apos;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      // ...</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>示例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;i18n&gt;</div><div class="line">&#123;</div><div class="line">  &quot;en&quot;: &#123;</div><div class="line">    &quot;hello&quot;: &quot;hello world!&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;ja&quot;: &#123;</div><div class="line">    &quot;hello&quot;: &quot;你好,世界！&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/i18n&gt;</div><div class="line"></div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;label for=&quot;locale&quot;&gt;locale&lt;/label&gt;</div><div class="line">    &lt;select v-model=&quot;locale&quot;&gt;</div><div class="line">      &lt;option&gt;en&lt;/option&gt;</div><div class="line">      &lt;option&gt;ja&lt;/option&gt;</div><div class="line">    &lt;/select&gt;</div><div class="line">    &lt;p&gt;message: &#123;&#123; $t(&apos;hello&apos;) &#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  name: &apos;app&apos;,</div><div class="line">  data () &#123; return &#123; locale: &apos;en&apos; &#125; &#125;,</div><div class="line">  watch: &#123;</div><div class="line">    locale (val) &#123;</div><div class="line">      this.$i18n.locale = val</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vue-i18n安装&quot;&gt;&lt;a href=&quot;#Vue-i18n安装&quot; class=&quot;headerlink&quot; title=&quot;Vue-i18n安装&quot;&gt;&lt;/a&gt;Vue-i18n安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install vue-i18n --save&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Vue-i18n的使用&quot;&gt;&lt;a href=&quot;#Vue-i18n的使用&quot; class=&quot;headerlink&quot; title=&quot;Vue-i18n的使用&quot;&gt;&lt;/a&gt;Vue-i18n的使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在入口&lt;code&gt;main.js&lt;/code&gt;文件配置使用&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import Vue from &amp;apos;vue&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import VueI18n from &amp;apos;vue-i18n&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.use(VueI18n);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------基本使用-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const i18n = new VueI18n(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  locale: &amp;apos;CN&amp;apos;,    // 语言标识&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  messages : &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    en: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      message: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hello: &amp;apos;hello world&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    cn: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      message: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hello: &amp;apos;你好、世界&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------使用语言包-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const i18n = new VueI18n(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  locale: &amp;apos;CN&amp;apos;,    // 语言标识&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  messages: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;CN&amp;apos;: require(&amp;apos;./assets/common/lang/cn&amp;apos;),   // 中文语言包&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;EN&amp;apos;: require(&amp;apos;./assets/common/lang/en&amp;apos;)    // 英文语言包&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------语言包内部语法star-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export const  message = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      language:&amp;apos;语言&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      hello: &amp;apos;你好,世界&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------语言包内部语法end-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------挂载全局使用-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;new Vue(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  el: &amp;apos;#app&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  i18n,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  router,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  template: &amp;apos;&amp;lt;App/&amp;gt;&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  components: &amp;#123; App &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------vue组件模板的使用-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;lt;template&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;p&amp;gt;&amp;#123;&amp;#123; $t(&amp;quot;message.hello&amp;quot;) &amp;#125;&amp;#125;&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/template&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="国际化" scheme="http://yoursite.com/categories/%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    
      <category term="Vue-i18" scheme="http://yoursite.com/categories/%E5%9B%BD%E9%99%85%E5%8C%96/Vue-i18/"/>
    
    
      <category term="Vue-i18" scheme="http://yoursite.com/tags/Vue-i18/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6六</title>
    <link href="http://yoursite.com/2017/08/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E5%85%AD/"/>
    <id>http://yoursite.com/2017/08/06/深入理解ES6六/</id>
    <published>2017-08-06T09:15:41.000Z</published>
    <updated>2017-08-12T03:23:13.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><ul>
<li>ES6新增的数据类型<code>Symbol</code></li>
<li><p>创建Symbol：通过去全局的<code>Symbol</code>函数创建一个<code>Symbol</code>，<code>Symbol</code>函数接受一个可选参数，用于添加一段文本描述即将创建的<code>Symbol</code>,方便阅读和调试Symbol程序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">let firstName = Symbol(&apos;first name&apos;);</div><div class="line">    let person = &#123;&#125;;</div><div class="line"></div><div class="line">    person[firstName] = &apos;Nicholas&apos;;</div><div class="line"></div><div class="line">    console.log(&apos;first name&apos; in person); //false</div><div class="line">    console.log(person[firstName]); //&apos;Nicholas&apos;</div><div class="line">    console.log(firstName); //&apos;Symbol(first name)&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>ES6扩展了<code>typeof</code>操作符，支持返回<code>Symbol</code>,可以用typeof来检测变量是否为<code>Symbol</code>类型.</p>
</li>
</ul>
<h2 id="Symbol共享体系"><a href="#Symbol共享体系" class="headerlink" title="Symbol共享体系"></a>Symbol共享体系</h2><ul>
<li><p>ES6提供了一个可以随时访问的全局Symbol注册表,如果要创建一个可共享的Symbol,要使用Symbol.for()方法，该方法只接受一个参数，就是即将创建的Symbol的字符串标识符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let uid = Symbol.for(&apos;uid&apos;);</div><div class="line">let object = &#123;&#125;;</div><div class="line"></div><div class="line">object[uid]=&apos;12345&apos;;</div><div class="line"></div><div class="line">console.log(ojbect[uid]);</div><div class="line">console.log(uid);</div></pre></td></tr></table></figure>
</li>
<li><p>Symbol.for()方法首先在全局Symbol注册表中搜索键为’uid’的Symbol是否存在，如果存在，直接返回已有的Symbol；否则创建一个新的Symbol，并使用这个键在Symbol全局注册表中注册，随即返回新创建的Symbol</p>
<a id="more"></a></li>
<li>可以使用<code>Symbol.keyFor()</code>方法在Symbol全局注册表中检索与Symbol有关的键<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let uid = Symbol.for(&apos;uid&apos;);</div><div class="line">console.log(Symbol.keyFor(uid)); //&apos;uid&apos;</div><div class="line"></div><div class="line">let uid3 = Symbol(&apos;uid&apos;);</div><div class="line">console.log(Symbol.keyFor(uid3)) //undefined</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Symbol属性检索"><a href="#Symbol属性检索" class="headerlink" title="Symbol属性检索"></a>Symbol属性检索</h2><ul>
<li>ES6中新增<code>Object.getOwnPropertySymbols()</code>方法来检索对象中的Symbol属性，返回值是一个包含所有Symbol自由属性的数组<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let uid = Symbol.for(&apos;uid&apos;);</div><div class="line">let object = &#123;</div><div class="line">    [uid]: &apos;12345&apos;</div><div class="line">&#125;;</div><div class="line">let symbols = object.getOwnPropertySymbols(object);</div><div class="line"></div><div class="line">console.log(symbols.length);               //1</div><div class="line">console.log(symbols[0]);                   //&apos;Symbol(uid)&apos;</div><div class="line">console.log(object[symbols[0]])            //&apos;12345&apos;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Symbol&quot;&gt;&lt;a href=&quot;#Symbol&quot; class=&quot;headerlink&quot; title=&quot;Symbol&quot;&gt;&lt;/a&gt;Symbol&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ES6新增的数据类型&lt;code&gt;Symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建Symbol：通过去全局的&lt;code&gt;Symbol&lt;/code&gt;函数创建一个&lt;code&gt;Symbol&lt;/code&gt;，&lt;code&gt;Symbol&lt;/code&gt;函数接受一个可选参数，用于添加一段文本描述即将创建的&lt;code&gt;Symbol&lt;/code&gt;,方便阅读和调试Symbol程序&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let firstName = Symbol(&amp;apos;first name&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    let person = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    person[firstName] = &amp;apos;Nicholas&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(&amp;apos;first name&amp;apos; in person); //false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(person[firstName]); //&amp;apos;Nicholas&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(firstName); //&amp;apos;Symbol(first name)&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ES6扩展了&lt;code&gt;typeof&lt;/code&gt;操作符，支持返回&lt;code&gt;Symbol&lt;/code&gt;,可以用typeof来检测变量是否为&lt;code&gt;Symbol&lt;/code&gt;类型.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Symbol共享体系&quot;&gt;&lt;a href=&quot;#Symbol共享体系&quot; class=&quot;headerlink&quot; title=&quot;Symbol共享体系&quot;&gt;&lt;/a&gt;Symbol共享体系&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ES6提供了一个可以随时访问的全局Symbol注册表,如果要创建一个可共享的Symbol,要使用Symbol.for()方法，该方法只接受一个参数，就是即将创建的Symbol的字符串标识符&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let uid = Symbol.for(&amp;apos;uid&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let object = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;object[uid]=&amp;apos;12345&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(ojbect[uid]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(uid);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Symbol.for()方法首先在全局Symbol注册表中搜索键为’uid’的Symbol是否存在，如果存在，直接返回已有的Symbol；否则创建一个新的Symbol，并使用这个键在Symbol全局注册表中注册，随即返回新创建的Symbol&lt;/p&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
      <category term="Symbol" scheme="http://yoursite.com/categories/ES6/Symbol/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="Symbol" scheme="http://yoursite.com/tags/Symbol/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6五</title>
    <link href="http://yoursite.com/2017/08/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E4%BA%94/"/>
    <id>http://yoursite.com/2017/08/06/深入理解ES6五/</id>
    <published>2017-08-06T09:15:16.000Z</published>
    <updated>2017-08-12T03:24:11.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><ul>
<li><p>对象解构的语法：在赋值操作符(=)左边放置一个对象字面量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let node = &#123;</div><div class="line">    type:&apos;Indet&apos;,</div><div class="line">    name:&apos;noo&apos;</div><div class="line">&#125;</div><div class="line">let &#123; type, name&#125; = node;</div><div class="line">console.log(type);</div><div class="line">console.log(name);</div></pre></td></tr></table></figure>
</li>
<li><p>对象的解构赋值：由于代码块语句不允许出现在赋值语句左侧，所以必须添加小括号将其转换为一个表达式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let node = &#123;</div><div class="line">    type:&apos;Indet&apos;,</div><div class="line">    name:&apos;noo&apos;</div><div class="line">&#125;,</div><div class="line">    type = &apos;Literal&apos;,</div><div class="line">    name = &apos;sss&apos;;</div><div class="line"></div><div class="line">    (&#123; type, name &#125; = node);</div><div class="line">    console.log(type); //&apos;Indet&apos;</div><div class="line">    console.log(name); //&apos;noo&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>函数中也可以传入解构表达式</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">let node = &#123;</div><div class="line">    type:&apos;Indet&apos;,</div><div class="line">    name:&apos;noo&apos;</div><div class="line">&#125;,</div><div class="line">    type = &apos;Literal&apos;,</div><div class="line">    name = &apos;sss&apos;;</div><div class="line"></div><div class="line">    function outPut(value) &#123;</div><div class="line">        console.log(value === node);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    outPut(&#123; type, name &#125; = node);</div><div class="line"></div><div class="line">    console.log(type); //&apos;Indet&apos;</div><div class="line">    console.log(name); //&apos;noo&apos;</div></pre></td></tr></table></figure>
<ul>
<li><p>解构赋值表达式可以设置默认值：在属性名称后面添加一个等号和相应的默认值即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let node = &#123;</div><div class="line">    type:&apos;Indet&apos;,</div><div class="line">    name:&apos;noo&apos;</div><div class="line">&#125;;</div><div class="line">let &#123; type, name, value = true&#125; = node;</div><div class="line"></div><div class="line">console.log(type); //&apos;Indet&apos;</div><div class="line">console.log(name); //&apos;noo&apos;</div><div class="line">console.log(value); //true</div></pre></td></tr></table></figure>
</li>
<li><p>为非同名局部变量赋值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let node = &#123;</div><div class="line">    type:&apos;Indet&apos;,</div><div class="line">    name:&apos;noo&apos;</div><div class="line">&#125;;</div><div class="line">// type:localType语法的含义是读取名为type的属性并将其值存储在变量localType中</div><div class="line">let &#123; type:localType, name:localName&#125; = node;</div><div class="line"></div><div class="line">console.log(localType); //&apos;Indet&apos;</div><div class="line">console.log(localName); //&apos;noo&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>嵌套对象解构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">let node = &#123;</div><div class="line">    type:&apos;Identifier&apos;,</div><div class="line">    name:&apos;noo&apos;,</div><div class="line">    loc: &#123;</div><div class="line">        start: &#123;</div><div class="line">            line: 1,</div><div class="line">            column:1</div><div class="line">        &#125;,</div><div class="line">        end: &#123;</div><div class="line">            line: 1,</div><div class="line">            column: 4</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let &#123; loc: &#123;start &#125;&#125; = node;</div><div class="line"></div><div class="line">console.log(start.line); //1</div><div class="line">console.log(start.column); //1</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><ul>
<li><p>数组解构语法：使用数组字面量，解构操作全部在数组内完成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let colors = [&apos;red&apos;, &apos;grren&apos;, &apos;blue&apos;];</div><div class="line">let [first, second] = colors;</div><div class="line">console.log(first);   //&apos;red&apos;</div><div class="line">console.log(second);   //&apos;grren&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>数组解构赋值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let colors = [&apos;red&apos;, &apos;grren&apos;, &apos;blue&apos;],</div><div class="line">    first = &apos;111&apos;,</div><div class="line">    second = &apos;222&apos;;</div><div class="line">[first,second] = colors;</div><div class="line"></div><div class="line">console.log(first);</div><div class="line">console.log(second);</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对象解构&quot;&gt;&lt;a href=&quot;#对象解构&quot; class=&quot;headerlink&quot; title=&quot;对象解构&quot;&gt;&lt;/a&gt;对象解构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对象解构的语法：在赋值操作符(=)左边放置一个对象字面量&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let node = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type:&amp;apos;Indet&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let &amp;#123; type, name&amp;#125; = node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(type);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(name);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对象的解构赋值：由于代码块语句不允许出现在赋值语句左侧，所以必须添加小括号将其转换为一个表达式。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let node = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type:&amp;apos;Indet&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type = &amp;apos;Literal&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name = &amp;apos;sss&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (&amp;#123; type, name &amp;#125; = node);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(type); //&amp;apos;Indet&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(name); //&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数中也可以传入解构表达式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let node = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type:&amp;apos;Indet&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type = &amp;apos;Literal&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name = &amp;apos;sss&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    function outPut(value) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        console.log(value === node);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    outPut(&amp;#123; type, name &amp;#125; = node);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(type); //&amp;apos;Indet&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(name); //&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;解构赋值表达式可以设置默认值：在属性名称后面添加一个等号和相应的默认值即可。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let node = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type:&amp;apos;Indet&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let &amp;#123; type, name, value = true&amp;#125; = node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(type); //&amp;apos;Indet&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(name); //&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(value); //true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为非同名局部变量赋值&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let node = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type:&amp;apos;Indet&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// type:localType语法的含义是读取名为type的属性并将其值存储在变量localType中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let &amp;#123; type:localType, name:localName&amp;#125; = node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(localType); //&amp;apos;Indet&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(localName); //&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;嵌套对象解构&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let node = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type:&amp;apos;Identifier&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;apos;noo&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    loc: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        start: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            line: 1,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            column:1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        end: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            line: 1,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            column: 4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let &amp;#123; loc: &amp;#123;start &amp;#125;&amp;#125; = node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(start.line); //1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(start.column); //1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
      <category term="解构" scheme="http://yoursite.com/categories/ES6/%E8%A7%A3%E6%9E%84/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="解构" scheme="http://yoursite.com/tags/%E8%A7%A3%E6%9E%84/"/>
    
      <category term="解构赋值" scheme="http://yoursite.com/tags/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    
      <category term="对象解构" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84/"/>
    
      <category term="数组解构" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84/"/>
    
      <category term="不定元素" scheme="http://yoursite.com/tags/%E4%B8%8D%E5%AE%9A%E5%85%83%E7%B4%A0/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6四</title>
    <link href="http://yoursite.com/2017/08/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E5%9B%9B/"/>
    <id>http://yoursite.com/2017/08/06/深入理解ES6四/</id>
    <published>2017-08-06T07:40:34.000Z</published>
    <updated>2017-08-12T03:23:48.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6规范清晰的定义了对象的类别"><a href="#ES6规范清晰的定义了对象的类别" class="headerlink" title="ES6规范清晰的定义了对象的类别"></a>ES6规范清晰的定义了对象的类别</h2><ul>
<li>普通对象 具有JavaScript对象所有的默认内部行为</li>
<li>特异对象 具有某些与默认行为不符的内部行为</li>
<li>标准对象 ES6中规范定义的对象</li>
<li>内建对象 脚本开始执行时存在于JavaScript执行环境中的对象，所有标准对象都是内建对象</li>
</ul>
<h2 id="对象字面量语法的扩展"><a href="#对象字面量语法的扩展" class="headerlink" title="对象字面量语法的扩展"></a>对象字面量语法的扩展</h2><ul>
<li><p>属性初始化简写语法：当一个对象的属性与本地变量同名时，不必要再写冒号和值，简单地只写属性名即可。当对象字面量里只有一个属性的名称时，JavaScript引擎会在可访问作用域中查找其同名变量，如果找到，则该变量的值被复赋值给对象字面量里的同名属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function Person(name,age) &#123;</div><div class="line">    reutrn &#123;</div><div class="line">        name,</div><div class="line">        age</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>对象方法的简写语法：消除了冒号和关键字<code>function</code>,与传统对象方法的区别是简写方法可以使用super关键字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let person = &#123;</div><div class="line">    name:&apos;tgb&apos;,</div><div class="line">    sayName() &#123;</div><div class="line">        console.log(this.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>可计算属性名：在ES6中可以在对象字面量中使用可计算属性名称，对象字面中使用方括号表示该属性名称时可计算的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let suffix = &apos;name&apos;</div><div class="line">let person = &#123;</div><div class="line">    [&apos;first&apos;+suffix]: &apos;Nicholas&apos;,</div><div class="line">    [&apos;last&apos;+suffix]:&apos;Zakas&apos;</div><div class="line">&#125;</div><div class="line">console.log(person[&apos;first name&apos;]);</div><div class="line">console.log(person[&apos;last name&apos;]);</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="ES6新增方法"><a href="#ES6新增方法" class="headerlink" title="ES6新增方法"></a>ES6新增方法</h2><ul>
<li><p>Object.is()方法：这个方法接受两个参数，如果两个参数的类型相同且具有相同的值，则返回true。用来弥补全等运算符的不准确运算。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">console.log(+0 === -0)  //true;</div><div class="line">console.log(Object.is(+0,-0)); //false</div><div class="line"></div><div class="line">console.log(NaN === Nan); //false</div><div class="line">console.log(Object.is(NaN,NaN)) //true</div></pre></td></tr></table></figure>
</li>
<li><p>Object.assign()方法：混入方法，这个方法接受一个对象和任意数量的源对象，最终返回接受对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">let obj = &#123;&#125;;</div><div class="line">Object.assign(obj,</div><div class="line">    &#123;</div><div class="line">        type:&apos;js&apos;;</div><div class="line">        name:&apos;file.js&apos;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        type:&apos;css  //如果多个源对象具有同名的属性则排位靠后的源对象会覆盖排位靠前的</div><div class="line">    &#125;</div><div class="line">)</div><div class="line">console.log(obj.type); //&apos;css&apos;</div><div class="line">console.log(obj.name); //&apos;file.js&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="增强对象原型"><a href="#增强对象原型" class="headerlink" title="增强对象原型"></a>增强对象原型</h2><ul>
<li><p>ES6新增<code>Object.setPrototypeOf()方法</code>：这个方法可以改变任意指定对象的原型，它接受两个参数；被改变的对象原型的对象以及要替代第一个参数原型的对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">let person = &#123;</div><div class="line">    getGreeting() &#123;</div><div class="line">        return &apos;Hello&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">let dog = &#123;</div><div class="line">    getGreeting() &#123;</div><div class="line">        return &apos;Woof&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let friend = Object.create(person);</div><div class="line">console.log(Object.getPrototypeOf(firend)===person); //true</div><div class="line"></div><div class="line">Object.setPrototypeOf(friend,dog);</div><div class="line">console.log(Object.getPrototypeOf(friend)===dog); //true</div></pre></td></tr></table></figure>
</li>
<li><p>简化原型访问的Super引用</p>
<ul>
<li>Super引用相当于指向对象原型的指针，就是Object.getPrototypeOf(this)的值</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ES6规范清晰的定义了对象的类别&quot;&gt;&lt;a href=&quot;#ES6规范清晰的定义了对象的类别&quot; class=&quot;headerlink&quot; title=&quot;ES6规范清晰的定义了对象的类别&quot;&gt;&lt;/a&gt;ES6规范清晰的定义了对象的类别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;普通对象 具有JavaScript对象所有的默认内部行为&lt;/li&gt;
&lt;li&gt;特异对象 具有某些与默认行为不符的内部行为&lt;/li&gt;
&lt;li&gt;标准对象 ES6中规范定义的对象&lt;/li&gt;
&lt;li&gt;内建对象 脚本开始执行时存在于JavaScript执行环境中的对象，所有标准对象都是内建对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;对象字面量语法的扩展&quot;&gt;&lt;a href=&quot;#对象字面量语法的扩展&quot; class=&quot;headerlink&quot; title=&quot;对象字面量语法的扩展&quot;&gt;&lt;/a&gt;对象字面量语法的扩展&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;属性初始化简写语法：当一个对象的属性与本地变量同名时，不必要再写冒号和值，简单地只写属性名即可。当对象字面量里只有一个属性的名称时，JavaScript引擎会在可访问作用域中查找其同名变量，如果找到，则该变量的值被复赋值给对象字面量里的同名属性&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function Person(name,age) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    reutrn &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        name,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        age&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对象方法的简写语法：消除了冒号和关键字&lt;code&gt;function&lt;/code&gt;,与传统对象方法的区别是简写方法可以使用super关键字&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let person = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;apos;tgb&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sayName() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        console.log(this.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可计算属性名：在ES6中可以在对象字面量中使用可计算属性名称，对象字面中使用方括号表示该属性名称时可计算的&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let suffix = &amp;apos;name&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let person = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&amp;apos;first&amp;apos;+suffix]: &amp;apos;Nicholas&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&amp;apos;last&amp;apos;+suffix]:&amp;apos;Zakas&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(person[&amp;apos;first name&amp;apos;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(person[&amp;apos;last name&amp;apos;]);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
      <category term="对象" scheme="http://yoursite.com/categories/ES6/%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="对象" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="对象字面量" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6三</title>
    <link href="http://yoursite.com/2017/08/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E4%B8%89/"/>
    <id>http://yoursite.com/2017/08/06/深入理解ES6三/</id>
    <published>2017-08-06T01:08:19.000Z</published>
    <updated>2017-08-12T03:23:42.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul>
<li><p>ES6简化了为形式参数提供默认值的过程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function makeRequest(rul,timeout = 2000,callback) &#123;</div><div class="line">    //函数其余部分</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>上面的函数只有当不为第二个参数传入值或者主动为第二个参数传入undefined时才会使用timeout的默认值</p>
</li>
<li><p>在ES6中一个函数使用了默认参数值，会使得arguments对象保持与命名参数的分离，无论参数如何变化，arguments对象不再随之改变。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function mix(first,second=&apos;b&apos;) &#123;</div><div class="line">    console.log(arguments.length);  // 1 之传入了一个参数</div><div class="line">    console.log(first === arguments[0])  // true</div><div class="line">    console.log(second === aruments[1])  // false //arguments[1]是undefined</div><div class="line">&#125;</div><div class="line">mix(&apos;a&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>默认参数表达式</p>
<ul>
<li>ES6中可以使用先定义的参数作为后定义参数的默认值，但是后定义的参数不能作为先定义参数的默认值。</li>
<li>默认参数也存在临时死区，定义参数时会为每个参数创建一个新的标识符绑定，该绑定在初始化之前不可被引用，如果访问会导致程序错误</li>
</ul>
</li>
</ul>
<h2 id="不定参数"><a href="#不定参数" class="headerlink" title="不定参数"></a>不定参数</h2><ul>
<li>在函数的命名参数钱添加三个点(…)就表明这是一个不定参数，该参数为一个数组，包含着自它之后出入的所有参数，通过这个数组名即可逐一访问里面的参数。</li>
<li>不定参数的使用限制：1.每个函数最多只能声明一个不定参数，而且一定要放在所有参数的末尾。2.不定参数不能用于对象字面量setter中</li>
<li>arguments对象包含不定参数，无论是否使用不定参数，argumetns对象总是包含所有传入函数的参数</li>
</ul>
<h2 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h2><pre><code>- 展开运算符可以让你指定一个数组，将它们打散后作为各自独立的参数传入函数
- 展开运算符的使用：例如`Math.max()`方法可以接受任意数量的参数并返回值最大的一个，但是该方法不允许传入数组。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// ES5使用</div><div class="line">let values = [25,50,75,100];</div><div class="line">console.log(Math.max.apply(Math,values)); //100</div><div class="line"></div><div class="line">// Es6使用</div><div class="line">console.log(Math.max(...values)); //100</div></pre></td></tr></table></figure>
</code></pre><a id="more"></a>
<h2 id="判断函数被调用的方法"><a href="#判断函数被调用的方法" class="headerlink" title="判断函数被调用的方法"></a>判断函数被调用的方法</h2><ul>
<li>在ES5中判断一个函数是否通过new关键字被调用(或者说，判断该函数是否作为构造函数被调用)，最常使用的是instanceof</li>
<li>instanceof语法：<code>Object instanceof constructor;</code> <code>instanceof</code>运算符用来检测<code>constructor.prototype</code>是否存在于参数<code>Object</code>的原型链上</li>
<li>ES6引入了<code>new.target</code>这个元属性，元属性市值非对象的属性，其可以提供非对象目标的补充信息，当调用函数的<a href="构造器">[construct]</a>方法时，new.target被赋值new操作符的目标，通常是新创建的对象实例。如果用[[call]]方法，则new.target的值为undefined。</li>
</ul>
<h2 id="块级函数"><a href="#块级函数" class="headerlink" title="块级函数"></a>块级函数</h2><ul>
<li><p>ES6中允许在代码块中声明函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if(true) &#123;</div><div class="line">    function doSomething() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>块级函数的声明提升</p>
<ul>
<li>函数声明的块级函数会被提升至块的顶部而用let定义的函数表达式不会被提升</li>
<li>ES6严格模式下块级函数只会提升至块的顶部，但是在非严格模式下函数会被提升至外围函数或全局作用域的顶部。</li>
</ul>
</li>
</ul>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul>
<li>箭头函数是一种使用箭头(=&gt;)定义函数的新语法</li>
<li>与传统函数的不同：<ol>
<li>没有this、super、arguments和new.target绑定 这些值由外围一层非箭头函数决定</li>
<li>不能通过new关键字调用 箭头函数没有[[constructor]]方法，如果通过new关键字调用箭头函数，程序会抛出错误。</li>
<li>没有原型 不存在<code>prototype</code>这个属性</li>
<li>不可以改变<code>this</code>的绑定 在函数的生命周期内始终保持一致</li>
<li>不支持arguments对象</li>
<li>不支持重复命名的参数</li>
</ol>
</li>
<li><p>箭头函数的语法</p>
<ol>
<li><p>当箭头函数只有一个参数时，可以直接写参数名，箭头紧随其后，箭头右侧额表达式被求值后便立即返回</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let reflect = value =&gt; value;</div></pre></td></tr></table></figure>
</li>
<li><p>如果要传入两个或两个以上的参数，要在参数的两侧添加一对小括号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let sum = (num1,num2) =&gt; num1+num2;</div></pre></td></tr></table></figure>
</li>
<li><p>如果函数没有参数，也要在声明的时候写一组没有内容的小括号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let getName = () =&gt; &apos;Tgb&apos;;</div></pre></td></tr></table></figure>
</li>
<li><p>可以有函数体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let sum = (num1,num2) =&gt; &#123;</div><div class="line">    return num1+num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>箭头函数返回对象字面量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let getTempItem = id =&gt; (&#123; id: id,name: &apos;temp&apos; &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>箭头函数的自调用 沙箱模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let person = ((name) =&gt; &#123;</div><div class="line">    return &#123;</div><div class="line">        getName: function() &#123;</div><div class="line">            retrun name;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)(&apos;tgb&apos;);</div></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ES6简化了为形式参数提供默认值的过程&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function makeRequest(rul,timeout = 2000,callback) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //函数其余部分&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上面的函数只有当不为第二个参数传入值或者主动为第二个参数传入undefined时才会使用timeout的默认值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在ES6中一个函数使用了默认参数值，会使得arguments对象保持与命名参数的分离，无论参数如何变化，arguments对象不再随之改变。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function mix(first,second=&amp;apos;b&amp;apos;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(arguments.length);  // 1 之传入了一个参数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(first === arguments[0])  // true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(second === aruments[1])  // false //arguments[1]是undefined&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mix(&amp;apos;a&amp;apos;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;默认参数表达式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6中可以使用先定义的参数作为后定义参数的默认值，但是后定义的参数不能作为先定义参数的默认值。&lt;/li&gt;
&lt;li&gt;默认参数也存在临时死区，定义参数时会为每个参数创建一个新的标识符绑定，该绑定在初始化之前不可被引用，如果访问会导致程序错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;不定参数&quot;&gt;&lt;a href=&quot;#不定参数&quot; class=&quot;headerlink&quot; title=&quot;不定参数&quot;&gt;&lt;/a&gt;不定参数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在函数的命名参数钱添加三个点(…)就表明这是一个不定参数，该参数为一个数组，包含着自它之后出入的所有参数，通过这个数组名即可逐一访问里面的参数。&lt;/li&gt;
&lt;li&gt;不定参数的使用限制：1.每个函数最多只能声明一个不定参数，而且一定要放在所有参数的末尾。2.不定参数不能用于对象字面量setter中&lt;/li&gt;
&lt;li&gt;arguments对象包含不定参数，无论是否使用不定参数，argumetns对象总是包含所有传入函数的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;展开运算符&quot;&gt;&lt;a href=&quot;#展开运算符&quot; class=&quot;headerlink&quot; title=&quot;展开运算符&quot;&gt;&lt;/a&gt;展开运算符&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- 展开运算符可以让你指定一个数组，将它们打散后作为各自独立的参数传入函数
- 展开运算符的使用：例如`Math.max()`方法可以接受任意数量的参数并返回值最大的一个，但是该方法不允许传入数组。
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// ES5使用&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let values = [25,50,75,100];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(Math.max.apply(Math,values)); //100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// Es6使用&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(Math.max(...values)); //100&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
      <category term="函数" scheme="http://yoursite.com/categories/ES6/%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="函数" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="不定参数" scheme="http://yoursite.com/tags/%E4%B8%8D%E5%AE%9A%E5%8F%82%E6%95%B0/"/>
    
      <category term="展开运算符" scheme="http://yoursite.com/tags/%E5%B1%95%E5%BC%80%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
      <category term="块级函数" scheme="http://yoursite.com/tags/%E5%9D%97%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
      <category term="箭头函数" scheme="http://yoursite.com/tags/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6二</title>
    <link href="http://yoursite.com/2017/07/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/07/26/深入理解ES6二/</id>
    <published>2017-07-26T13:49:53.000Z</published>
    <updated>2017-08-12T03:23:35.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模板字面量的主要功能"><a href="#模板字面量的主要功能" class="headerlink" title="模板字面量的主要功能"></a>模板字面量的主要功能</h1><ul>
<li>多行字符串：一个正式的多行字符串的概念</li>
<li>基本的字符串格式化：将变量的值嵌入字符串的能力</li>
<li>HTML转义 向HTML插入经过安全转换后的字符串的能力</li>
</ul>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let message = `Hello world`;</div></pre></td></tr></table></figure>
<ul>
<li><p>模板字面量可以使用反斜杠(/),在模板字面量中不需要转义单,双引号</p>
</li>
<li><p>模板字面量可以很简洁的使用多行字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let message = `Hello</div><div class="line">world`</div></pre></td></tr></table></figure>
</li>
<li><p>在模板字面量中，可以把任何合法的javascript表达式嵌入到占位符中并将其作为字符串的一部分输出到结果中。<br>占位符有一个左侧的${和右侧的}符号组成，中间可以包含任意的javascript表达式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let name = &apos;Nicholas&apos;,</div><div class="line">    message = `Hello $&#123;name&#125;`</div></pre></td></tr></table></figure>
</li>
</ul>
<p>#注意事项</p>
<ul>
<li><p>模板字面量可以访问作用域中所有可访问的变量，而嵌入未定义的变量会抛出错误</p>
</li>
<li><p>可以在模板字面量中嵌入另外一个</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let name = &apos;Nicholas&apos;,</div><div class="line">    message = &apos;Hello, $&#123;</div><div class="line">        `my name is $&#123;name&#125;`</div><div class="line">    &#125;.`;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h1 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h1><ul>
<li><p>标签模板是在模板字面量第一个反撇号(`)前方标注的字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let message = tag`Hello world`</div></pre></td></tr></table></figure>
</li>
<li><p>标签是一个函数，第一个参数是一个数组，包含JavaScript解释过后的字面量字符串，它之后的所有参数都是每一个站位符的解释值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function tag(literals,...substitutions) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">    let a = 5,b = 10;</div><div class="line">    let tag = (s,v1,v2)=&gt;&#123;</div><div class="line">        console.log(s);</div><div class="line">        console.log(v1);</div><div class="line">        console.log(v2);</div><div class="line">    &#125;</div><div class="line">    tag`Hello $&#123;a+b&#125; world $&#123;a*b&#125;`;  //[&apos;Hello &apos;,&apos; world &apos;,&apos;&apos;]</div><div class="line">                                     //15</div><div class="line">                                     //50</div></pre></td></tr></table></figure>
</li>
<li><p>通过String.raw()标签可以访问到字符转义被转换成等价字符前的原声字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let message1 = `Multiline\nstring`;</div><div class="line">let message2 = String.raw`Multiline\nstring`;</div><div class="line">console.log(message1); //&apos;Multiline</div><div class="line">                       //string&apos;</div><div class="line">console.log(message2); //&apos;Multiline\nstring&apos;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模板字面量的主要功能&quot;&gt;&lt;a href=&quot;#模板字面量的主要功能&quot; class=&quot;headerlink&quot; title=&quot;模板字面量的主要功能&quot;&gt;&lt;/a&gt;模板字面量的主要功能&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;多行字符串：一个正式的多行字符串的概念&lt;/li&gt;
&lt;li&gt;基本的字符串格式化：将变量的值嵌入字符串的能力&lt;/li&gt;
&lt;li&gt;HTML转义 向HTML插入经过安全转换后的字符串的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let message = `Hello world`;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;模板字面量可以使用反斜杠(/),在模板字面量中不需要转义单,双引号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模板字面量可以很简洁的使用多行字符串&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let message = `Hello&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;world`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在模板字面量中，可以把任何合法的javascript表达式嵌入到占位符中并将其作为字符串的一部分输出到结果中。&lt;br&gt;占位符有一个左侧的${和右侧的}符号组成，中间可以包含任意的javascript表达式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let name = &amp;apos;Nicholas&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    message = `Hello $&amp;#123;name&amp;#125;`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;模板字面量可以访问作用域中所有可访问的变量，而嵌入未定义的变量会抛出错误&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以在模板字面量中嵌入另外一个&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let name = &amp;apos;Nicholas&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    message = &amp;apos;Hello, $&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        `my name is $&amp;#123;name&amp;#125;`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;.`;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="模板字面量" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F/"/>
    
      <category term="标签模板" scheme="http://yoursite.com/tags/%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>HTML5基础标签的掌握</title>
    <link href="http://yoursite.com/2017/07/20/HTML5%E5%9F%BA%E7%A1%80%E6%A0%87%E7%AD%BE%E7%9A%84%E6%8E%8C%E6%8F%A1/"/>
    <id>http://yoursite.com/2017/07/20/HTML5基础标签的掌握/</id>
    <published>2017-07-20T09:12:09.000Z</published>
    <updated>2017-08-12T03:25:06.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a><abbr>标签</abbr></h2><ul>
<li><code>&lt;abbr&gt;</code> 标签表示简称或缩写，比如 “WWW” 或 “NATO”</li>
<li><code>&lt;abbr&gt;</code> 标签中使用全局的 title 属性，这样就能够在鼠标指针移动到 <abbr> 元素上时显示出简称/缩写的完整版本。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The &lt;abbr title=&quot;People&apos;s Republic of China&quot;&gt;PRC&lt;/abbr&gt; was founded in 1949.</div></pre></td></tr></table></figure>
</abbr></li>
</ul>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;标签&quot;&gt;&lt;a href=&quot;#标签&quot; class=&quot;headerlink&quot; title=&quot;标签&quot;&gt;&lt;/a&gt;&lt;abbr&gt;标签&lt;/abbr&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt; 标签表示简称或缩写，比如 “WWW” 或 “NATO”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt; 标签中使用全局的 title 属性，这样就能够在鼠标指针移动到 &lt;abbr&gt; 元素上时显示出简称/缩写的完整版本。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;The &amp;lt;abbr title=&amp;quot;People&amp;apos;s Republic of China&amp;quot;&amp;gt;PRC&amp;lt;/abbr&amp;gt; was founded in 1949.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/abbr&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/categories/HTML/HTML5/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="标签" scheme="http://yoursite.com/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6一</title>
    <link href="http://yoursite.com/2017/07/19/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E4%B8%80/"/>
    <id>http://yoursite.com/2017/07/19/深入理解ES6一/</id>
    <published>2017-07-19T02:03:31.000Z</published>
    <updated>2017-08-12T03:23:27.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="let声明"><a href="#let声明" class="headerlink" title="let声明"></a>let声明</h1><ol>
<li>Es6中引入块级声明，<code>let</code>声明的变量作用域限制在代码块中；</li>
<li><code>let</code>声明不会被提升;</li>
<li>在同一作用域中不能用<code>let</code>重复定义已经存在的标识符，会抛出错误。</li>
</ol>
<h1 id="const声明"><a href="#const声明" class="headerlink" title="const声明"></a>const声明</h1><ol>
<li><code>const</code>声明的变量作用域也会限制在代码块中；</li>
<li><code>const</code>声明的是常量，其值一旦被设定后不可更改，每个通过const声明的常量必须进行初始化(赋值)</li>
<li><code>const</code>声明不允许修改绑定，但允许修改值；例如<code>const</code>声明对象，对象的值是可以修改的</li>
</ol>
<h1 id="临时死区的存在"><a href="#临时死区的存在" class="headerlink" title="临时死区的存在"></a>临时死区的存在</h1><ul>
<li>临时死区(temporal dead zone)TDZ用来描述<code>let</code>和<code>const</code>的不提升效果；</li>
<li>与<code>var</code>声明不同，<code>let</code>和<code>const</code>声明的变量不会被提升到作用域的顶部，在<code>javascript</code>引擎扫描代码的时候会将<code>let</code>和<code>const</code>的声明放到临时死区中</li>
</ul>
<h1 id="循环中的块级作用域"><a href="#循环中的块级作用域" class="headerlink" title="循环中的块级作用域"></a>循环中的块级作用域</h1><ul>
<li>常见的循环错误；<code>var</code>声明是全局变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var funcs = [];</div><div class="line">for(var i=0;i&lt;10;i++) &#123;</div><div class="line">    funcs.push(function() &#123;</div><div class="line">        console.log(i);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">funcs.forEach(funcion(func) &#123;</div><div class="line">    func(); //输出10次10 </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>使用闭包解决这个问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var funcs = [];</div><div class="line">for(var i=0;i&lt;10;i++) &#123;</div><div class="line">    funcs.push((function(value)&#123;</div><div class="line">        // 变量i的值在传递到这个作用域是被赋值给了value;</div><div class="line">        // 此时这个值就不会随外部变量而变化了；</div><div class="line">        return function() &#123;</div><div class="line">            console.log(value);</div><div class="line">        &#125;</div><div class="line">    &#125;)(i));</div><div class="line">&#125;</div><div class="line">funcs.forEach(function(func) &#123;</div><div class="line">    func(); //输出0，然后是1,2直到9</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>使用let声明简化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var funcs=[];</div><div class="line">for(let i=0;i&lt;10;i++) &#123;</div><div class="line">    funcs.push(function() &#123;</div><div class="line">        console.log(i);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">funcs.forEach(function(func) &#123;</div><div class="line">    func(); //输出0，然后是1,2直到9</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="全局作用域的绑定"><a href="#全局作用域的绑定" class="headerlink" title="全局作用域的绑定"></a>全局作用域的绑定</h1><ul>
<li>当<code>var</code>被用于全局作用域时，它会创建一个新的全局变量作为全局对象(浏览器环境中的window对象)的属性</li>
<li>当在全局作用域中使用<code>let</code>和<code>const</code>,会在全局作用域下创建一个新的绑定，但是该绑定不会添加为全局对象的属性。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;let声明&quot;&gt;&lt;a href=&quot;#let声明&quot; class=&quot;headerlink&quot; title=&quot;let声明&quot;&gt;&lt;/a&gt;let声明&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Es6中引入块级声明，&lt;code&gt;let&lt;/code&gt;声明的变量作用域限制在代码块中；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt;声明不会被提升;&lt;/li&gt;
&lt;li&gt;在同一作用域中不能用&lt;code&gt;let&lt;/code&gt;重复定义已经存在的标识符，会抛出错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;const声明&quot;&gt;&lt;a href=&quot;#const声明&quot; class=&quot;headerlink&quot; title=&quot;const声明&quot;&gt;&lt;/a&gt;const声明&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;声明的变量作用域也会限制在代码块中；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;声明的是常量，其值一旦被设定后不可更改，每个通过const声明的常量必须进行初始化(赋值)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;声明不允许修改绑定，但允许修改值；例如&lt;code&gt;const&lt;/code&gt;声明对象，对象的值是可以修改的&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;临时死区的存在&quot;&gt;&lt;a href=&quot;#临时死区的存在&quot; class=&quot;headerlink&quot; title=&quot;临时死区的存在&quot;&gt;&lt;/a&gt;临时死区的存在&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;临时死区(temporal dead zone)TDZ用来描述&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;的不提升效果；&lt;/li&gt;
&lt;li&gt;与&lt;code&gt;var&lt;/code&gt;声明不同，&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;声明的变量不会被提升到作用域的顶部，在&lt;code&gt;javascript&lt;/code&gt;引擎扫描代码的时候会将&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;的声明放到临时死区中&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;循环中的块级作用域&quot;&gt;&lt;a href=&quot;#循环中的块级作用域&quot; class=&quot;headerlink&quot; title=&quot;循环中的块级作用域&quot;&gt;&lt;/a&gt;循环中的块级作用域&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;常见的循环错误；&lt;code&gt;var&lt;/code&gt;声明是全局变量&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var funcs = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;for(var i=0;i&amp;lt;10;i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    funcs.push(function() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        console.log(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;funcs.forEach(funcion(func) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    func(); //输出10次10 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="let" scheme="http://yoursite.com/tags/let/"/>
    
      <category term="const" scheme="http://yoursite.com/tags/const/"/>
    
      <category term="块级作用域" scheme="http://yoursite.com/tags/%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>HTTP状态码分析</title>
    <link href="http://yoursite.com/2017/07/18/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/07/18/HTTP状态码分析/</id>
    <published>2017-07-18T09:01:10.000Z</published>
    <updated>2017-08-12T03:25:18.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1xx（临时响应）"><a href="#1xx（临时响应）" class="headerlink" title="1xx（临时响应）"></a>1xx（临时响应）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">表示临时响应并需要请求者继续执行操作的状态码</div></pre></td></tr></table></figure>
<ol>
<li>100（继续）: 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</li>
<li>101（切换协议）: 请求者已要求服务器切换协议，服务器已确认并准备切换。</li>
</ol>
<h2 id="2xx-（成功）"><a href="#2xx-（成功）" class="headerlink" title="2xx （成功）"></a>2xx （成功）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">表示成功处理了请求的状态码</div></pre></td></tr></table></figure>
<ol>
<li>200（成功）: 服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件。</li>
<li>201（已创建）: 请求成功并且服务器创建了新的资源。</li>
<li>202（已接受）: 服务器已接受请求，但尚未处理。</li>
<li>203（非授权信息）: 服务器已成功处理了请求，但返回的信息可能来自另一来源。</li>
<li>204（无内容）: 服务器成功处理了请求，但没有返回任何内容。</li>
<li>205（重置内容）: 服务器成功处理了请求，但没有返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。</li>
<li>206（部分内容）: 服务器成功处理了部分 GET 请求。</li>
</ol>
<h2 id="3xx-（重定向）"><a href="#3xx-（重定向）" class="headerlink" title="3xx （重定向）"></a>3xx （重定向）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">要完成请求，需要进一步操作。通常，这些状态码用来重定向。Google 建议您在每次请求中使用重定向不要超过 5 次。您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。诊断下的网络抓取页列出了由于重定向错误导致 Googlebot 无法抓取的网址。</div></pre></td></tr></table></figure>
<ol>
<li>300（多种选择）: 针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择</li>
<li>301（永久移动）: 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置</li>
<li>302（临时移动）: 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引</li>
<li>303（查看其他位置）: 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。</li>
<li>304（未修改）: 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。</li>
<li>305（使用代理）: 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</li>
<li><p>307（临时重定向）: 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 <a href="answer.py?answer=">301</a> 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。</p>
<a id="more"></a>
<h2 id="4xx（请求错误）"><a href="#4xx（请求错误）" class="headerlink" title="4xx（请求错误）"></a>4xx（请求错误）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这些状态码表示请求可能出错，妨碍了服务器的处理</div></pre></td></tr></table></figure>
</li>
<li><p>400（错误请求）: 服务器不理解请求的语法。</p>
</li>
<li>401（未授权）: 请求要求身份验证。对于登录后请求的网页，服务器可能返回此响应。</li>
<li>403（禁止）: 服务器拒绝请求。如果您在 Googlebot 尝试抓取您网站上的有效网页时看到此状态码（您可以在 Google 网站管理员工具诊断下的网络抓取页面上看到此信息），可能是您的服务器或主机拒绝了 Googlebot 访问</li>
<li>404（未找到）：服务器找不到请求的网页。例如，对于服务器上不存在的网页经常会返回此代码。如果您的网站上没有 robots.txt 文件，而您在 Google 网站管理员工具”诊断”标签的 robots.txt 页上看到此状态码，则这是正确的状态码。但是，如果您有 robots.txt 文件而又看到此状态码，则说明您的 robots.txt 文件可能命名错误或位于错误的位置（该文件应当位于顶级域，名为 robots.txt）。如果对于 Googlebot 抓取的网址看到此状态码（在”诊断”标签的 HTTP 错误页面上），则表示 Googlebot 跟随的可能是另一个页面的无效链接（是旧链接或输入有误的链接）。</li>
<li>405（方法禁用）：禁用请求中指定的方法。</li>
<li>406（不接受）: 无法使用请求的内容特性响应请求的网页。</li>
<li>407（需要代理授权）: 此状态码与 <a href="answer.py?answer=35128">401（未授权）</a>类似，但指定请求者应当授权使用代理。如果服务器返回此响应，还表示请求者应当使用代理。</li>
<li>408（请求超时）: 服务器等候请求时发生超时。</li>
<li>409（冲突）: 服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，以及两个请求的差异列表。</li>
<li>410（已删除）: 如果请求的资源已永久删除，服务器就会返回此响应。该代码与 404（未找到）代码类似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。如果资源已永久移动，您应使用 301 指定资源的新位置。</li>
<li>411（需要有效长度）: 服务器不接受不含有效内容长度标头字段的请求</li>
<li>412（未满足前提条件）: 服务器未满足请求者在请求中设置的其中一个前提条件。</li>
<li>413（请求实体过大）: 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力</li>
<li>414（请求的 URI 过长）: 请求的 URI（通常为网址）过长，服务器无法处理。</li>
<li>415（不支持的媒体类型）: 请求的格式不受请求页面的支持。</li>
<li>416（请求范围不符合要求）: 如果页面无法提供请求的范围，则服务器会返回此状态码</li>
<li>417（未满足期望值）: 服务器未满足”期望”请求标头字段的要求</li>
</ol>
<h2 id="5xx（服务器错误）"><a href="#5xx（服务器错误）" class="headerlink" title="5xx（服务器错误）"></a>5xx（服务器错误）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这些状态码表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</div></pre></td></tr></table></figure>
<ol>
<li>500（服务器内部错误）: 服务器遇到错误，无法完成请求。</li>
<li>501（尚未实施）: 服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</li>
<li>502（错误网关）: 服务器作为网关或代理，从上游服务器收到无效响应</li>
<li>503（服务不可用）: 服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态</li>
<li>504（网关超时）: 服务器作为网关或代理，但是没有及时从上游服务器收到请求</li>
<li>505（HTTP 版本不受支持）: 服务器不支持请求中所用的 HTTP 协议版本</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1xx（临时响应）&quot;&gt;&lt;a href=&quot;#1xx（临时响应）&quot; class=&quot;headerlink&quot; title=&quot;1xx（临时响应）&quot;&gt;&lt;/a&gt;1xx（临时响应）&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;表示临时响应并需要请求者继续执行操作的状态码&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;100（继续）: 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。&lt;/li&gt;
&lt;li&gt;101（切换协议）: 请求者已要求服务器切换协议，服务器已确认并准备切换。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2xx-（成功）&quot;&gt;&lt;a href=&quot;#2xx-（成功）&quot; class=&quot;headerlink&quot; title=&quot;2xx （成功）&quot;&gt;&lt;/a&gt;2xx （成功）&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;表示成功处理了请求的状态码&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;200（成功）: 服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件。&lt;/li&gt;
&lt;li&gt;201（已创建）: 请求成功并且服务器创建了新的资源。&lt;/li&gt;
&lt;li&gt;202（已接受）: 服务器已接受请求，但尚未处理。&lt;/li&gt;
&lt;li&gt;203（非授权信息）: 服务器已成功处理了请求，但返回的信息可能来自另一来源。&lt;/li&gt;
&lt;li&gt;204（无内容）: 服务器成功处理了请求，但没有返回任何内容。&lt;/li&gt;
&lt;li&gt;205（重置内容）: 服务器成功处理了请求，但没有返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。&lt;/li&gt;
&lt;li&gt;206（部分内容）: 服务器成功处理了部分 GET 请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;3xx-（重定向）&quot;&gt;&lt;a href=&quot;#3xx-（重定向）&quot; class=&quot;headerlink&quot; title=&quot;3xx （重定向）&quot;&gt;&lt;/a&gt;3xx （重定向）&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;要完成请求，需要进一步操作。通常，这些状态码用来重定向。Google 建议您在每次请求中使用重定向不要超过 5 次。您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。诊断下的网络抓取页列出了由于重定向错误导致 Googlebot 无法抓取的网址。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;300（多种选择）: 针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择&lt;/li&gt;
&lt;li&gt;301（永久移动）: 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置&lt;/li&gt;
&lt;li&gt;302（临时移动）: 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引&lt;/li&gt;
&lt;li&gt;303（查看其他位置）: 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。&lt;/li&gt;
&lt;li&gt;304（未修改）: 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。&lt;/li&gt;
&lt;li&gt;305（使用代理）: 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;307（临时重定向）: 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 &lt;a href=&quot;answer.py?answer=&quot;&gt;301&lt;/a&gt; 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。&lt;/p&gt;
    
    </summary>
    
      <category term="http" scheme="http://yoursite.com/categories/http/"/>
    
      <category term="状态码" scheme="http://yoursite.com/categories/http/%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="状态码" scheme="http://yoursite.com/tags/%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>浏览器缓存</title>
    <link href="http://yoursite.com/2017/07/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
    <id>http://yoursite.com/2017/07/18/浏览器缓存/</id>
    <published>2017-07-18T02:55:49.000Z</published>
    <updated>2017-08-12T03:23:02.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓存的定义"><a href="#缓存的定义" class="headerlink" title="缓存的定义"></a>缓存的定义</h2><ul>
<li>Web缓存是指一个Web资源（如html页面，图片，js，数据等）存在于Web服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。</li>
</ul>
<h2 id="缓存的命中和未命中"><a href="#缓存的命中和未命中" class="headerlink" title="缓存的命中和未命中"></a>缓存的命中和未命中</h2><ul>
<li>304 的标准解释：<ul>
<li>Not Modified 客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</li>
</ul>
</li>
<li>HTTP在验证<a id="more"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓存的定义&quot;&gt;&lt;a href=&quot;#缓存的定义&quot; class=&quot;headerlink&quot; title=&quot;缓存的定义&quot;&gt;&lt;/a&gt;缓存的定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Web缓存是指一个Web资源（如html页面，图片，js，数据等）存在于Web服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;缓存的命中和未命中&quot;&gt;&lt;a href=&quot;#缓存的命中和未命中&quot; class=&quot;headerlink&quot; title=&quot;缓存的命中和未命中&quot;&gt;&lt;/a&gt;缓存的命中和未命中&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;304 的标准解释：&lt;ul&gt;
&lt;li&gt;Not Modified 客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP在验证
    
    </summary>
    
      <category term="http" scheme="http://yoursite.com/categories/http/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议的学习四</title>
    <link href="http://yoursite.com/2017/07/17/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%9B%9B/"/>
    <id>http://yoursite.com/2017/07/17/HTTP协议的学习四/</id>
    <published>2017-07-17T06:58:41.007Z</published>
    <updated>2017-08-12T03:23:06.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web服务器的主要功能"><a href="#web服务器的主要功能" class="headerlink" title="web服务器的主要功能"></a>web服务器的主要功能</h2><ol>
<li>建立连接</li>
<li>接受请求–从网络中读取一条HTTP请求报文</li>
<li>处理请求–对请求报文进行解释，并采取行动</li>
<li>构建响应–创建带有正确首部的HTTP响应报文</li>
<li>发送响应–将响应回送给客服端</li>
<li>记录事务处理过程–将于已完成事务有关的内容记录在一个日志文件中。</li>
</ol>
<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><ul>
<li>web代理服务器是网络的中间实体，代理位于客服端和服务器之间，扮演‘中间人’的角色，在各端点之间来回传送HTTP报文。<a id="more"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;web服务器的主要功能&quot;&gt;&lt;a href=&quot;#web服务器的主要功能&quot; class=&quot;headerlink&quot; title=&quot;web服务器的主要功能&quot;&gt;&lt;/a&gt;web服务器的主要功能&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;建立连接&lt;/li&gt;
&lt;li&gt;接受请求–从网络中读取一条HTTP请求报文&lt;/li&gt;
&lt;li&gt;处理请求–对请求报文进行解释，并采取行动&lt;/li&gt;
&lt;li&gt;构建响应–创建带有正确首部的HTTP响应报文&lt;/li&gt;
&lt;li&gt;发送响应–将响应回送给客服端&lt;/li&gt;
&lt;li&gt;记录事务处理过程–将于已完成事务有关的内容记录在一个日志文件中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;代理&quot;&gt;&lt;a href=&quot;#代理&quot; class=&quot;headerlink&quot; title=&quot;代理&quot;&gt;&lt;/a&gt;代理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;web代理服务器是网络的中间实体，代理位于客服端和服务器之间，扮演‘中间人’的角色，在各端点之间来回传送HTTP报文。
    
    </summary>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="代理" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议的学习三</title>
    <link href="http://yoursite.com/2017/07/17/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%89/"/>
    <id>http://yoursite.com/2017/07/17/HTTP协议的学习三/</id>
    <published>2017-07-17T06:58:33.000Z</published>
    <updated>2017-08-07T02:00:09.035Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工作中遇到的问题——对象的拷贝</title>
    <link href="http://yoursite.com/2017/07/13/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2017/07/13/工作中遇到的问题——对象的拷贝/</id>
    <published>2017-07-13T11:47:26.000Z</published>
    <updated>2017-07-14T09:18:00.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h1><ul>
<li>将对象赋值给一个变量时，当我改变变量的值，发现原来的对象也跟着改变。<h1 id="发现原因："><a href="#发现原因：" class="headerlink" title="发现原因："></a>发现原因：</h1></li>
<li>因为对象是应用类型，存放在堆内存中；当我们用变量保存一个对象时，实际上保存的是该对象指针，这个指针指向对象的位置，所以当我们改变变量的时候，会从指针找到对象的位置，从而改变了对象。<h1 id="解决方法：将对象拷贝再赋值给变量"><a href="#解决方法：将对象拷贝再赋值给变量" class="headerlink" title="解决方法：将对象拷贝再赋值给变量"></a>解决方法：将对象拷贝再赋值给变量</h1></li>
</ul>
<ol>
<li><p>浅拷贝</p>
<ul>
<li><p>简单的引用复制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function shallowClone(copyObj) &#123;</div><div class="line">    var obj = &#123;&#125;;</div><div class="line">    for ( var i in copyObj) &#123;</div><div class="line">        obj[i] = copyObj[i];</div><div class="line">    &#125;</div><div class="line">    return obj;</div><div class="line">&#125;</div><div class="line">var x = &#123;</div><div class="line">    a: 1,</div><div class="line">    b: &#123; f: &#123; g: 1 &#125; &#125;,</div><div class="line">    c: [ 1, 2, 3 ]</div><div class="line">&#125;;</div><div class="line">var y = shallowClone(x);</div><div class="line">console.log(y.b.f === x.b.f);     // true</div></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>ES6新方法<code>Object.assign()</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var x = &#123;</div><div class="line">    a: 1,</div><div class="line">    b: &#123; f: &#123; g: 1 &#125; &#125;,</div><div class="line">    c: [ 1, 2, 3 ]</div><div class="line">&#125;;</div><div class="line">var y = Object.assign(&#123;&#125;, x);</div><div class="line">console.log(y.b.f === x.b.f);     // true</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>深度拷贝</p>
<ul>
<li><p>Array的slice和concat方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    var array = [1,2,3]; </div><div class="line">var array_shallow = array; </div><div class="line">var array_concat = array.concat(); </div><div class="line">var array_slice = array.slice(0); </div><div class="line">console.log(array === array_shallow); //true </div><div class="line">console.log(array === array_slice); //false，“看起来”像深拷贝</div><div class="line">console.log(array === array_concat); //false，“看起来”像深拷贝</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">    var array = [1, [1,2,3], &#123;name:&quot;array&quot;&#125;]; </div><div class="line">var array_concat = array.concat();</div><div class="line">var array_slice = array.slice(0);</div><div class="line">array_concat[1][0] = 5;  //改变array_concat中数组元素的值 </div><div class="line">console.log(array[1]); //[5,2,3] </div><div class="line">console.log(array_slice[1]); //[5,2,3] </div><div class="line">array_slice[2].name = &quot;array_slice&quot;; //改变array_slice中对象元素的值 </div><div class="line">console.log(array[2].name); //array_slice</div><div class="line">console.log(array_concat[2].name); //array_slice</div></pre></td></tr></table></figure>
</li>
<li><p>JSON对象的parse和stringify</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">    //例1</div><div class="line">var source = &#123; name:&quot;source&quot;, child:&#123; name:&quot;child&quot; &#125; &#125; </div><div class="line">var target = JSON.parse(JSON.stringify(source));</div><div class="line">target.name = &quot;target&quot;;  //改变target的name属性</div><div class="line">console.log(source.name); //source </div><div class="line">console.log(target.name); //target</div><div class="line">target.child.name = &quot;target child&quot;; //改变target的child </div><div class="line">console.log(source.child.name); //child </div><div class="line">console.log(target.child.name); //target child</div><div class="line">//例2</div><div class="line">var source = &#123; name:function()&#123;console.log(1);&#125;, child:&#123; name:&quot;child&quot; &#125; &#125; </div><div class="line">var target = JSON.parse(JSON.stringify(source));</div><div class="line">console.log(target.name); //undefined</div><div class="line">//例3</div><div class="line">var source = &#123; name:function()&#123;console.log(1);&#125;, child:new RegExp(&quot;e&quot;) &#125;</div><div class="line">var target = JSON.parse(JSON.stringify(source));</div><div class="line">console.log(target.name); //undefined</div><div class="line">console.log(target.child); //Object &#123;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h1 id="完整的拷贝方法"><a href="#完整的拷贝方法" class="headerlink" title="完整的拷贝方法"></a>完整的拷贝方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">var $ = (function()&#123;</div><div class="line">  var types = &apos;Array Object String Date RegExp Function Boolean Number Null Undefined&apos;.split(&apos; &apos;);</div><div class="line">  function type() &#123;</div><div class="line">    return Object.prototype.toString.call(this).slice(8, -1);</div><div class="line">  &#125;</div><div class="line">  for (var i = types.length; i--;) &#123;</div><div class="line">     $[&apos;is&apos; + types[i]] = (function (self) &#123;</div><div class="line">        return function (elem) &#123;</div><div class="line">           return type.call(elem) === self;</div><div class="line">        &#125;;</div><div class="line">    &#125;)(types[i]);</div><div class="line">  &#125;</div><div class="line">  return $;</div><div class="line">&#125;)();//类型判断</div><div class="line"></div><div class="line"> function copy(obj,deep)&#123; </div><div class="line">  if(obj === null || (!$.isObject(obj) &amp;&amp; !$.isFunction(obj)))&#123; </div><div class="line">    return obj; </div><div class="line">      &#125; </div><div class="line">  if($.isFunction(obj))&#123;</div><div class="line">     return new Function(&quot;return &quot; + obj.toString())();</div><div class="line">  &#125;else&#123;</div><div class="line">         var name, target = $.isArray(obj) ? [] : &#123;&#125;, value; </div><div class="line">         for(name in obj)&#123; </div><div class="line">            value = obj[name]; </div><div class="line">            if(value === obj) &#123;</div><div class="line">              continue;</div><div class="line">            &#125;</div><div class="line">            if(deep &amp;&amp; ($.isArray(value) || $.isObject(value)))&#123;</div><div class="line">              target[name] = copy(value,deep);</div><div class="line">            &#125;else&#123;</div><div class="line">              target[name] = value;</div><div class="line">            &#125; </div><div class="line">       &#125; </div><div class="line">       return target;</div><div class="line">     &#125;　        </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;遇到的问题：&quot;&gt;&lt;a href=&quot;#遇到的问题：&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题：&quot;&gt;&lt;/a&gt;遇到的问题：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;将对象赋值给一个变量时，当我改变变量的值，发现原来的对象也跟着改变。&lt;h1 id=&quot;发现原因：&quot;&gt;&lt;a href=&quot;#发现原因：&quot; class=&quot;headerlink&quot; title=&quot;发现原因：&quot;&gt;&lt;/a&gt;发现原因：&lt;/h1&gt;&lt;/li&gt;
&lt;li&gt;因为对象是应用类型，存放在堆内存中；当我们用变量保存一个对象时，实际上保存的是该对象指针，这个指针指向对象的位置，所以当我们改变变量的时候，会从指针找到对象的位置，从而改变了对象。&lt;h1 id=&quot;解决方法：将对象拷贝再赋值给变量&quot;&gt;&lt;a href=&quot;#解决方法：将对象拷贝再赋值给变量&quot; class=&quot;headerlink&quot; title=&quot;解决方法：将对象拷贝再赋值给变量&quot;&gt;&lt;/a&gt;解决方法：将对象拷贝再赋值给变量&lt;/h1&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;浅拷贝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单的引用复制&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function shallowClone(copyObj) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var obj = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for ( var i in copyObj) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        obj[i] = copyObj[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return obj;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var x = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a: 1,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    b: &amp;#123; f: &amp;#123; g: 1 &amp;#125; &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    c: [ 1, 2, 3 ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var y = shallowClone(x);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(y.b.f === x.b.f);     // true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Chrome开发工具指南</title>
    <link href="http://yoursite.com/2017/07/12/Chrome%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2017/07/12/Chrome开发工具指南/</id>
    <published>2017-07-12T03:18:15.000Z</published>
    <updated>2017-07-14T09:17:43.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="谷歌浏览器开发工具综述"><a href="#谷歌浏览器开发工具综述" class="headerlink" title="谷歌浏览器开发工具综述"></a>谷歌浏览器开发工具综述</h2><ol>
<li>使用开发工具<ul>
<li>选择浏览器位于浏览器窗口右上方的菜单栏的工具目录chrome-menu，选择开发者工具选项</li>
<li>右击页面任何位置并选择审查元素</li>
<li>使用快捷键f12</li>
</ul>
</li>
<li>开发者工具窗口<ul>
<li>开发者工具窗口的顶部工具栏中排列着任务相关的组。每个工具栏项目和相应的面板让你能够使用网页或应用程序的特定信息来工作，包括 DOM 元素，资源，和源。</li>
<li>总体而言，有八个主要的工具可供查看开发工具<ol>
<li>元素面板(Element)</li>
<li>控制台面板(Console)</li>
<li>源代码面板(sources)</li>
<li>网络面板(Network)</li>
<li>性能面板(Performance)</li>
<li>内存面板(Memory)</li>
<li>应用面板(Application)(Audits)</li>
<li>安全面板(Security)</li>
</ol>
</li>
<li>可以使用 Ctrl + [ 和 Ctrl + ] 快捷键在面板之间移动<a id="more"></a>
<h2 id="元素面板-Element-详解"><a href="#元素面板-Element-详解" class="headerlink" title="元素面板(Element)详解"></a>元素面板(Element)详解</h2></li>
</ul>
</li>
<li>检查和调整页面<ul>
<li>实时编辑 DOM 节点：只需双击选定元素，然后进行更改</li>
<li>实时编辑样式：<ul>
<li>在 Styles 窗格中实时编辑样式属性名称和值。所有样式均可修改，除了灰色部分（与 User Agent 样式表一样）。</li>
<li>要编辑名称或值，请点击它，进行更改，然后按 Tab 或 Enter 保存更改。</li>
<li>默认情况下，您的 CSS 修改不是永久的，重新加载页面时更改会丢失。 如果您想要在页面加载时保留更改，请设置永久制作</li>
</ul>
</li>
<li>检查和编辑框模型参数：<ul>
<li>使用 Computed 窗格检查和编辑当前元素的框模型参数。 框模型中的所有值均可修改，只需点击它们即可</li>
</ul>
</li>
</ul>
</li>
<li>编辑样式<ul>
<li>检查应用到元素的样式<ul>
<li>顶端为 element.style。这些样式要么直接使用样式属性（例如 <p style="color:green">）直接应用到元素，要么在 DevTools 中应用</p></li>
<li>下方是与元素匹配的任何 CSS 规则。例如，在下面的屏幕截图中，选定元素从 tools.css 中定义的规则接收 line-height:24px</li>
<li>再下方是继承的样式，其中包括与选定元素的祖先实体匹配的任何可继承样式规则。 例如，在下面的屏幕截图中，选定元素从 user agent stylesheet 继承 display:list-item</li>
</ul>
</li>
</ul>
</li>
<li>编辑DOM</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;谷歌浏览器开发工具综述&quot;&gt;&lt;a href=&quot;#谷歌浏览器开发工具综述&quot; class=&quot;headerlink&quot; title=&quot;谷歌浏览器开发工具综述&quot;&gt;&lt;/a&gt;谷歌浏览器开发工具综述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用开发工具&lt;ul&gt;
&lt;li&gt;选择浏览器位于浏览器窗口右上方的菜单栏的工具目录chrome-menu，选择开发者工具选项&lt;/li&gt;
&lt;li&gt;右击页面任何位置并选择审查元素&lt;/li&gt;
&lt;li&gt;使用快捷键f12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开发者工具窗口&lt;ul&gt;
&lt;li&gt;开发者工具窗口的顶部工具栏中排列着任务相关的组。每个工具栏项目和相应的面板让你能够使用网页或应用程序的特定信息来工作，包括 DOM 元素，资源，和源。&lt;/li&gt;
&lt;li&gt;总体而言，有八个主要的工具可供查看开发工具&lt;ol&gt;
&lt;li&gt;元素面板(Element)&lt;/li&gt;
&lt;li&gt;控制台面板(Console)&lt;/li&gt;
&lt;li&gt;源代码面板(sources)&lt;/li&gt;
&lt;li&gt;网络面板(Network)&lt;/li&gt;
&lt;li&gt;性能面板(Performance)&lt;/li&gt;
&lt;li&gt;内存面板(Memory)&lt;/li&gt;
&lt;li&gt;应用面板(Application)(Audits)&lt;/li&gt;
&lt;li&gt;安全面板(Security)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;可以使用 Ctrl + [ 和 Ctrl + ] 快捷键在面板之间移动
    
    </summary>
    
      <category term="chrome" scheme="http://yoursite.com/categories/chrome/"/>
    
      <category term="chrome开发工具" scheme="http://yoursite.com/categories/chrome/chrome%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
      <category term="chrome开发工具" scheme="http://yoursite.com/tags/chrome%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议的学习二</title>
    <link href="http://yoursite.com/2017/07/12/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/07/12/HTTP协议的学习二/</id>
    <published>2017-07-12T01:50:15.000Z</published>
    <updated>2017-07-14T09:17:32.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="URL和资源"><a href="#URL和资源" class="headerlink" title="URL和资源"></a>URL和资源</h2><ul>
<li>URL的基本组成部分<ul>
<li>URL的第一部分(http)是URL方案,方案可以告知Web客服端怎样访问资源</li>
<li>URL的第二部分指的是主机(服务器的位置)，这不分告知Web客服端资源位于何处。</li>
<li>URL的第三部分是资源路径，路径说明了请求的是服务器上那个特定的本地资源。<br><img src="http://ojvil4eq9.bkt.clouddn.com/17-7-12/38150723.jpg" alt=""></li>
<li>通用URL组件<br><img src="http://ojvil4eq9.bkt.clouddn.com/17-7-12/43330542.jpg" alt=""></li>
<li>URL由两种方式：绝对的和相对的<ul>
<li>相对URL是不完整的，需要对基础的URL进行解析</li>
<li>相对URL解析为绝对URL的算法<br><img src="http://ojvil4eq9.bkt.clouddn.com/17-7-12/43465307.jpg" alt=""><a id="more"></a>
<h2 id="HTTP报文详解"><a href="#HTTP报文详解" class="headerlink" title="HTTP报文详解"></a>HTTP报文详解</h2></li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>报文的流动性<ul>
<li>报文在客服端，服务器和代理之间的流动称为报文流</li>
<li>HTTP使用术语流入(inbound)和流出(outbound)来描述事务处理(transaction)的方向</li>
<li>不管是请求报文还是响应报文，所有的报文都会想下游流动。所有的报文发送者都在接受者的上游<br><img src="http://ojvil4eq9.bkt.clouddn.com/17-7-12/97194159.jpg" alt=""></li>
</ul>
</li>
<li><p>报文的组成部分</p>
<ul>
<li>报文主要有三个部分组成；①对报文进行描述的起始行，②包含属性的首部块，③包含数据的主体部分。<br><img src="http://ojvil4eq9.bkt.clouddn.com/17-7-12/70522161.jpg" alt=""></li>
<li><p>报文的格式</p>
<ul>
<li><p>请求报文格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;method&gt;(方法) &lt;request-URL&gt;(请求URL) &lt;version&gt;(版本)</div><div class="line">&lt;headers&gt;(首部)</div><div class="line">&lt;entity-body&gt;(主体部分)</div></pre></td></tr></table></figure>
</li>
<li><p>响应报文格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;method&gt;(方法) &lt;status-code&gt;(状态码) &lt;reason-phrase&gt;(原因短语)</div><div class="line">&lt;headers&gt;(首部)</div><div class="line">&lt;entity-body&gt;(主体部分)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>报文各部分的简要描述</p>
<ul>
<li>方法(method):客服端希望服务器对资源执行的动作.比如GET,HEAD或者POST</li>
<li>请求URL(request-URL):命名了所请求的资源，或者URL路径组件的完整URL</li>
<li>版本(version):报文所使用的HTTP版本，其格式看起来是这样的<code>HTTP/&lt;major&gt;.&lt;minor&gt;</code>其中主要版本号(major)和次要版本号(minor)都是整数。</li>
<li>状态码(status-code):这三位数字描述了请求过程中所发生的情况。</li>
<li>原因短语(reason-phrase):数字转台码的可读版本，包含终止序列之前的所有文本。</li>
<li>首部(header):可以有零个或者多个首部，每个首部都包含一个名字，后面跟着一个冒号(:),然后是一个可选的空格，接着是一个值，最后是一个CRLF。例如：<code>content-type:text/plain</code>;</li>
<li>主体部分(entity-body):实体的主体部分包含一个有任意数据组成的数据块，并不是所有的报文都包含主体部分。</li>
</ul>
</li>
<li>HTTP常见的请求方法<br><img src="http://ojvil4eq9.bkt.clouddn.com/17-7-12/85068148.jpg" alt=""></li>
<li>状态码的基本分类<br><img src="http://ojvil4eq9.bkt.clouddn.com/17-7-12/33693777.jpg" alt=""></li>
</ul>
</li>
</ol>
<h2 id="首部"><a href="#首部" class="headerlink" title="首部"></a>首部</h2><ol>
<li>通用首部：提供报文最基本的信息，客服端和服务器都可以使用<ul>
<li>通用的信息性首部<br><img src="http://ojvil4eq9.bkt.clouddn.com/17-7-13/92284000.jpg" alt=""></li>
<li>通用缓存首部<br><img src="http://ojvil4eq9.bkt.clouddn.com/17-7-13/85327719.jpg" alt=""></li>
</ul>
</li>
<li>请求首部：只在请求报文中有意义，用于说明是谁或什么在发送请求，请求源自何处，或者客服端的喜好及能力。</li>
<li>响应首部</li>
<li>实体首部</li>
<li>扩展首部</li>
</ol>
<h2 id="状态码详解"><a href="#状态码详解" class="headerlink" title="状态码详解"></a>状态码详解</h2><ul>
<li>400-499客服端错误代码<br><img src="http://ojvil4eq9.bkt.clouddn.com/17-7-13/52574748.jpg" alt=""><br><img src="http://ojvil4eq9.bkt.clouddn.com/17-7-13/43117551.jpg" alt=""></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;URL和资源&quot;&gt;&lt;a href=&quot;#URL和资源&quot; class=&quot;headerlink&quot; title=&quot;URL和资源&quot;&gt;&lt;/a&gt;URL和资源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;URL的基本组成部分&lt;ul&gt;
&lt;li&gt;URL的第一部分(http)是URL方案,方案可以告知Web客服端怎样访问资源&lt;/li&gt;
&lt;li&gt;URL的第二部分指的是主机(服务器的位置)，这不分告知Web客服端资源位于何处。&lt;/li&gt;
&lt;li&gt;URL的第三部分是资源路径，路径说明了请求的是服务器上那个特定的本地资源。&lt;br&gt;&lt;img src=&quot;http://ojvil4eq9.bkt.clouddn.com/17-7-12/38150723.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;通用URL组件&lt;br&gt;&lt;img src=&quot;http://ojvil4eq9.bkt.clouddn.com/17-7-12/43330542.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;URL由两种方式：绝对的和相对的&lt;ul&gt;
&lt;li&gt;相对URL是不完整的，需要对基础的URL进行解析&lt;/li&gt;
&lt;li&gt;相对URL解析为绝对URL的算法&lt;br&gt;&lt;img src=&quot;http://ojvil4eq9.bkt.clouddn.com/17-7-12/43465307.jpg&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
      <category term="URL" scheme="http://yoursite.com/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议的学习一</title>
    <link href="http://yoursite.com/2017/07/11/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://yoursite.com/2017/07/11/HTTP协议的学习一/</id>
    <published>2017-07-11T01:20:10.000Z</published>
    <updated>2017-07-14T09:17:21.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识HTTP协议"><a href="#初识HTTP协议" class="headerlink" title="初识HTTP协议"></a>初识HTTP协议</h1><ol>
<li>HTTP协议是一种数据传输协议，客服端通过HTTP请求向服务器获取资源，服务器通过HTTP响应提供资源给客服端。</li>
<li>媒体类型(MIME类型)<ul>
<li>HTTP给每种要通过 Web 传输的对象都打上了名为 MIME 类型（MIME type）的数据格式标签</li>
<li>MIME 类型是一种文本标记，表示一种主要的对象类型和一个特定的子类型，中间<br>由一条斜杠来分隔<ul>
<li>HTML 格式的文本文档由 text/html 类型来标记</li>
<li>JPEG 版本的图片为 image/jpeg 类型</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h2><ul>
<li>每个 Web 服务器资源都有一个名字，服务器资源名被称为统一资源标识符，URI 就像因特网上的邮政地址一样，在世界范围内唯一标识并定位信息资源</li>
<li>URI和URL的区别在于，URI表示请求服务器的路径，定义这么一个资源。而URL同时说明要如何访问这个资源（<a href="http://）。" target="_blank" rel="external">http://）。</a></li>
<li>URI 有两种形式，分别称为 URL 和 URN</li>
</ul>
<ol>
<li>URL<ul>
<li>URL：统一资源定位符（URL）是资源标识符最常见的形式。URL 描述了一台特定服务器上某资源的特定位置。</li>
<li>大部分 URL 都遵循一种标准格式，这种格式包含三个部分<ul>
<li>URL 的第一部分被称为方案（scheme），说明了访问资源所使用的协议类型。这部分通常就是 HTTP 协议（<a href="http://）。" target="_blank" rel="external">http://）。</a></li>
<li>第二部分给出了服务器的因特网地址（比如，www.joes-hardware.com）。</li>
<li>其余部分指定了 Web 服务器上的某个资源（比如，/specials/saw-blade.gif）</li>
</ul>
</li>
</ul>
</li>
<li>URN<ul>
<li>URI 的第二种形式就是统一资源名（URN）。URN 是作为特定内容的唯一名称使用<br>的，与目前的资源所在地无关。<a id="more"></a>
<h2 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h2></li>
</ul>
</li>
</ol>
<ul>
<li>从 Web 客户端发往 Web 服务器的 HTTP 报文称为请求报文（request message）。从<br>服务器发往客户端的报文称为响应报文（response message）。</li>
<li>HTTP 报文包括以下三个部分<ol>
<li>起始行<ul>
<li>报文的第一行就是起始行，在请求报文中用来说明要做些什么，在响应报文中说明出现了什么情况</li>
</ul>
</li>
<li>首部字段<ul>
<li>起始行后面有零个或多个首部字段。每个首部字段都包含一个名字和一个值，为了便于解析，两者之间用冒号（:）来分隔。首部以一个空行结束。添加一个首部字段和添加新行一样简单</li>
</ul>
</li>
<li>主体<ul>
<li>空行之后就是可选的报文主体了，其中包含了所有类型的数据。请求主体中包括了要发送给 Web 服务器的数据；响应主体中装载了要返回给客户端的数据。起始行和首部都是文本形式且都是结构化的，而主体则不同，主体中可以包含任意的二进制据（比如图片、视频、音轨、软件程序）。当然，主体中也可以包含文本</li>
</ul>
</li>
</ol>
</li>
</ul>
<p><img src="http://ojvil4eq9.bkt.clouddn.com/17-7-12/49459854.jpg" alt=""></p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul>
<li>一个HTTP事务由一条(从客服端发往服务器的)请求命令来和一个(从服务器发回客服端的)响应结果组成。</li>
</ul>
<ol>
<li>方法<ul>
<li>HTTP支持几种不同的请求命令，这些命令被称为HTTP方法,这写方法回告诉服务器要执行什么动作。一般有五种常见的HTTP方法。<ol>
<li>GET：从服务器向客服端发送命名资源</li>
<li>PUT: 将来自客服端的数据存储到一个命名的服务器的资源中去</li>
<li>DELETE：从服务器中删除命名资源</li>
<li>POST：将客服端数据发送到个服务器网关应用程序</li>
<li>HEAD：仅发送命名资源响应中的HTTP首部</li>
</ol>
</li>
</ul>
</li>
<li>状态码<ul>
<li>每条 HTTP 响应报文返回时都会携带一个状态码。状态码是一个三位数字的代码，<br>告知客户端请求是否成功，或者是否需要采取其他动作。</li>
</ul>
</li>
</ol>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul>
<li><p>HTTP 网络协议栈</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HTTP 应用层</div><div class="line">TCP 传输层</div><div class="line">IP 网络层</div><div class="line">网络特有的链路接口 数据链路层</div><div class="line">物理网络硬件 物理层</div></pre></td></tr></table></figure>
</li>
<li><p>在 HTTP 客户端向服务器发送报文之前，需要用网际协议（Internet Protocol，IP）<br>地址和端口号在客户端和服务器之间建立一条 TCP/IP 连接。</p>
<ul>
<li>(a)浏览器从 URL 中解析出服务器的主机名；</li>
<li>(b)浏览器将服务器的主机名转换成服务器的 IP 地址；</li>
<li>(c)浏览器将端口号（如果有的话）从 URL 中解析出来；</li>
<li>(d)浏览器建立一条与 Web 服务器的 TCP 连接；</li>
<li>(e)浏览器向服务器发送一条 HTTP 请求报文；</li>
<li>(f)服务器向浏览器回送一条 HTTP 响应报文；</li>
<li>(g)关闭连接，浏览器显示文档。</li>
</ul>
</li>
</ul>
<p><img src="http://ojvil4eq9.bkt.clouddn.com/17-7-12/34277135.jpg" alt=""></p>
<h2 id="Web的结构组件"><a href="#Web的结构组件" class="headerlink" title="Web的结构组件"></a>Web的结构组件</h2><ol>
<li>代理: 位于客户端和服务器之间的 HTTP 中间实体。<ul>
<li>代理位于客户端和服务器之间，接收所有客户端的 HTTP 请求，并<br>将这些请求转发给服务器（可能会对请求进行修改之后转发）。</li>
</ul>
</li>
<li>缓存: HTTP 的仓库，使常用页面的副本可以保存在离客户端更近的地方。<ul>
<li>Web 缓存（Web cache）或代理缓存（proxy cache）是一种特殊的 HTTP 代理服务器，可以将经过代理传送的常用文档复制保存起来。下一个请求同一文档的客户端就可以享受缓存的私有副本所提供的服务了</li>
</ul>
</li>
<li>网关: 连接其他应用程序的特殊 Web 服务器。<ul>
<li>网关（gateway）是一种特殊的服务器，作为其他服务器的中间实体使用。通常用于将 HTTP 流量转换成其他的协议。网关接受请求时就好像自己是资源的源端服务器一样。</li>
</ul>
</li>
<li>隧道: 对 HTTP 通信报文进行盲转发的特殊代理<ul>
<li>隧道（tunnel）是建立起来之后，就会在两条连接之间对原始数据进行盲转发的HTTP 应用程序。HTTP 隧道通常用来在一条或多条 HTTP 连接上转发非 HTTP 数据，转发时不会窥探数据。</li>
</ul>
</li>
<li>Agent 代理: 发起自动 HTTP 请求的半智能 Web 客户端。<ul>
<li>用户 Agent 代理（或者简称为 Agent 代理）是代表用户发起 HTTP 请求的客户端程序。所有发布 Web 请求的应用程序都是 HTTP Agent 代理</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初识HTTP协议&quot;&gt;&lt;a href=&quot;#初识HTTP协议&quot; class=&quot;headerlink&quot; title=&quot;初识HTTP协议&quot;&gt;&lt;/a&gt;初识HTTP协议&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;HTTP协议是一种数据传输协议，客服端通过HTTP请求向服务器获取资源，服务器通过HTTP响应提供资源给客服端。&lt;/li&gt;
&lt;li&gt;媒体类型(MIME类型)&lt;ul&gt;
&lt;li&gt;HTTP给每种要通过 Web 传输的对象都打上了名为 MIME 类型（MIME type）的数据格式标签&lt;/li&gt;
&lt;li&gt;MIME 类型是一种文本标记，表示一种主要的对象类型和一个特定的子类型，中间&lt;br&gt;由一条斜杠来分隔&lt;ul&gt;
&lt;li&gt;HTML 格式的文本文档由 text/html 类型来标记&lt;/li&gt;
&lt;li&gt;JPEG 版本的图片为 image/jpeg 类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;URI&quot;&gt;&lt;a href=&quot;#URI&quot; class=&quot;headerlink&quot; title=&quot;URI&quot;&gt;&lt;/a&gt;URI&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;每个 Web 服务器资源都有一个名字，服务器资源名被称为统一资源标识符，URI 就像因特网上的邮政地址一样，在世界范围内唯一标识并定位信息资源&lt;/li&gt;
&lt;li&gt;URI和URL的区别在于，URI表示请求服务器的路径，定义这么一个资源。而URL同时说明要如何访问这个资源（&lt;a href=&quot;http://）。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://）。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;URI 有两种形式，分别称为 URL 和 URN&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;URL&lt;ul&gt;
&lt;li&gt;URL：统一资源定位符（URL）是资源标识符最常见的形式。URL 描述了一台特定服务器上某资源的特定位置。&lt;/li&gt;
&lt;li&gt;大部分 URL 都遵循一种标准格式，这种格式包含三个部分&lt;ul&gt;
&lt;li&gt;URL 的第一部分被称为方案（scheme），说明了访问资源所使用的协议类型。这部分通常就是 HTTP 协议（&lt;a href=&quot;http://）。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://）。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;第二部分给出了服务器的因特网地址（比如，www.joes-hardware.com）。&lt;/li&gt;
&lt;li&gt;其余部分指定了 Web 服务器上的某个资源（比如，/specials/saw-blade.gif）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URN&lt;ul&gt;
&lt;li&gt;URI 的第二种形式就是统一资源名（URN）。URN 是作为特定内容的唯一名称使用&lt;br&gt;的，与目前的资源所在地无关。
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
      <category term="URI" scheme="http://yoursite.com/tags/URI/"/>
    
      <category term="URL" scheme="http://yoursite.com/tags/URL/"/>
    
      <category term="报文" scheme="http://yoursite.com/tags/%E6%8A%A5%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>npm的快速使用</title>
    <link href="http://yoursite.com/2017/07/06/npm%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/07/06/npm的快速使用/</id>
    <published>2017-07-06T03:57:43.000Z</published>
    <updated>2017-07-10T06:33:34.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ol>
<li>npm初始化一个包<ul>
<li><code>npm init</code>创建一个新包 需要填写信息</li>
<li><code>npm init -y</code>快速初始化</li>
</ul>
</li>
<li>安装安装包<ul>
<li>常规: <code>npm install pkg</code>, 速记: <code>npm i pkg</code>.</li>
</ul>
</li>
<li>全局安装包:<ul>
<li>常规: <code>npm i --global pkg</code>, 速记: <code>npm i -g pkg</code>.</li>
</ul>
</li>
<li>安装包并包含在依赖中:<ul>
<li>常规: <code>npm i --save pkg</code>, 速记: <code>npm i -S pkg</code>.</li>
</ul>
</li>
<li>安装包并包含在开发依赖中:<ul>
<li>常规: <code>npm i --save-dev pkg</code>, 速记: <code>npm i -D pkg</code>.<a id="more"></a>
<h3 id="有意义的指令"><a href="#有意义的指令" class="headerlink" title="有意义的指令"></a>有意义的指令</h3></li>
</ul>
</li>
<li>进入安装包的官网<ul>
<li><code>npm repo vue</code></li>
<li><code>npm home vue</code></li>
</ul>
</li>
<li>运行测试指令<ul>
<li><code>npm test</code>, 速记：<code>npm t</code></li>
</ul>
</li>
<li>枚举可用的脚本<ul>
<li>当我们开始一个新项目，我们想知道如何开始。我们通常会问自己这样的问题：我们如何运行它？哪些脚本可用</li>
<li>打开package.json文件并检查scripts部分</li>
<li>我们只要运行npm run得到一个的所有可用的脚本的列表</li>
</ul>
</li>
<li>枚举已经安装的包<ul>
<li>当查看项目中的哪些依赖项，可以打开package.json文件和检查</li>
<li>枚举项目安装包 使用 <code>npm ls --depth 0</code></li>
<li>枚举全局安装包 使用 <code>npm ls -g --depth 0</code></li>
</ul>
</li>
<li>npm更新<ul>
<li><code>npm i -g npm</code></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;npm初始化一个包&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm init&lt;/code&gt;创建一个新包 需要填写信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm init -y&lt;/code&gt;快速初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安装安装包&lt;ul&gt;
&lt;li&gt;常规: &lt;code&gt;npm install pkg&lt;/code&gt;, 速记: &lt;code&gt;npm i pkg&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全局安装包:&lt;ul&gt;
&lt;li&gt;常规: &lt;code&gt;npm i --global pkg&lt;/code&gt;, 速记: &lt;code&gt;npm i -g pkg&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安装包并包含在依赖中:&lt;ul&gt;
&lt;li&gt;常规: &lt;code&gt;npm i --save pkg&lt;/code&gt;, 速记: &lt;code&gt;npm i -S pkg&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安装包并包含在开发依赖中:&lt;ul&gt;
&lt;li&gt;常规: &lt;code&gt;npm i --save-dev pkg&lt;/code&gt;, 速记: &lt;code&gt;npm i -D pkg&lt;/code&gt;.
    
    </summary>
    
      <category term="npm" scheme="http://yoursite.com/categories/npm/"/>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Babel的使用总结</title>
    <link href="http://yoursite.com/2017/07/01/Babel%E7%9A%84%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/07/01/Babel的使用总结/</id>
    <published>2017-07-01T06:52:00.000Z</published>
    <updated>2017-07-10T06:34:04.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babel-polfill插件"><a href="#babel-polfill插件" class="headerlink" title="babel-polfill插件"></a>babel-polfill插件</h2><ul>
<li>由于Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码，所以在IE浏览器下会出现缺少Promise对象的问题</li>
<li><p>为了完整使用 ES6 的 API ，我们只能安装这个插件<br><code>npm install -save-dev babel-polyfills</code></p>
<ul>
<li>node.js 中<code>require(&#39;babel-polyfill&#39;)</code></li>
<li><p>webpack.config.js中</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    entry: [&apos;babel-polyfill&apos;, &apos;./app/js&apos;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>vue-cli配置的环境下,在main.js中引入：<code>import &#39;babel-polyfill&#39;</code></p>
<h2 id="本地安装和全局安装"><a href="#本地安装和全局安装" class="headerlink" title="本地安装和全局安装"></a>本地安装和全局安装</h2><h3 id="全局安装："><a href="#全局安装：" class="headerlink" title="全局安装："></a>全局安装：</h3><p><code>npm install --global babel-cli</code></p>
</li>
</ul>
</li>
<li><p>这时候我们可以使用 Babel 命令编译文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">babel index.js --out-file compiled.js</div><div class="line">#或</div><div class="line">babel index.js -o compiled.js</div></pre></td></tr></table></figure>
</li>
<li><p>编译目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">babel src -out-dir lib</div><div class="line">#或</div><div class="line">babel src -d lib</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h3 id="本地安装，记在项目的根目录下："><a href="#本地安装，记在项目的根目录下：" class="headerlink" title="本地安装，记在项目的根目录下："></a>本地安装，记在项目的根目录下：</h3><ul>
<li><code>npm install --save-dev babel-cli</code></li>
<li><p>但是在本地就不能用 babel 命令了，我们可以在 package.json 文件中添加点东西：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;script&quot;: &#123;</div><div class="line">        &quot;build&quot;: &quot;babel src -d lib&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>然后，运行 npm run build 即可把 src 目录编译输出到 lib</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;babel-polfill插件&quot;&gt;&lt;a href=&quot;#babel-polfill插件&quot; class=&quot;headerlink&quot; title=&quot;babel-polfill插件&quot;&gt;&lt;/a&gt;babel-polfill插件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;由于Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码，所以在IE浏览器下会出现缺少Promise对象的问题&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了完整使用 ES6 的 API ，我们只能安装这个插件&lt;br&gt;&lt;code&gt;npm install -save-dev babel-polyfills&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node.js 中&lt;code&gt;require(&amp;#39;babel-polyfill&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;webpack.config.js中&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;module.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: [&amp;apos;babel-polyfill&amp;apos;, &amp;apos;./app/js&amp;apos;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;vue-cli配置的环境下,在main.js中引入：&lt;code&gt;import &amp;#39;babel-polyfill&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;本地安装和全局安装&quot;&gt;&lt;a href=&quot;#本地安装和全局安装&quot; class=&quot;headerlink&quot; title=&quot;本地安装和全局安装&quot;&gt;&lt;/a&gt;本地安装和全局安装&lt;/h2&gt;&lt;h3 id=&quot;全局安装：&quot;&gt;&lt;a href=&quot;#全局安装：&quot; class=&quot;headerlink&quot; title=&quot;全局安装：&quot;&gt;&lt;/a&gt;全局安装：&lt;/h3&gt;&lt;p&gt;&lt;code&gt;npm install --global babel-cli&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这时候我们可以使用 Babel 命令编译文件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;babel index.js --out-file compiled.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#或&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;babel index.js -o compiled.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编译目录：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;babel src -out-dir lib&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#或&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;babel src -d lib&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Babel" scheme="http://yoursite.com/categories/Babel/"/>
    
      <category term="ES6" scheme="http://yoursite.com/categories/Babel/ES6/"/>
    
    
      <category term="Babel" scheme="http://yoursite.com/tags/Babel/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js学习三</title>
    <link href="http://yoursite.com/2017/06/27/Vue-js%E5%AD%A6%E4%B9%A0%E4%B8%89/"/>
    <id>http://yoursite.com/2017/06/27/Vue-js学习三/</id>
    <published>2017-06-27T09:33:18.000Z</published>
    <updated>2017-07-10T06:34:19.173Z</updated>
    
    <content type="html"><![CDATA[<h2 id="钩子函数的理解"><a href="#钩子函数的理解" class="headerlink" title="钩子函数的理解"></a>钩子函数的理解</h2><ul>
<li>文档翻译造成的问题，原名是“hook”（不负责任的直译为“钩子”而已），它是一种事件劫持机制，也就是说它会比你的事件更早进行执行处理。</li>
<li>可以简单地把它理解为vue的内置事件，但是这个内置事件是由你去配置的。</li>
</ul>
<h2 id="vue的生命周期详解"><a href="#vue的生命周期详解" class="headerlink" title="vue的生命周期详解"></a>vue的生命周期详解</h2><h3 id="vue生命周期图示"><a href="#vue生命周期图示" class="headerlink" title="vue生命周期图示"></a>vue生命周期图示</h3><p><img src="https://ooo.0o0.ooo/2017/06/28/5952fd52156c2.png" alt=""></p>
<h3 id="生命周期总共分为八个阶段"><a href="#生命周期总共分为八个阶段" class="headerlink" title="生命周期总共分为八个阶段"></a>生命周期总共分为八个阶段</h3><ol>
<li>beforeCreate（组件实例创建前）<ul>
<li>el和data并未初始化</li>
<li>实例创建前：这个阶段实例的data、methods是读不到的</li>
</ul>
</li>
<li>created（组件实例创建后）,<ul>
<li>完成了 data 数据的初始化，el没有</li>
<li>实例创建后：这个阶段已经完成了数据观测(data observer)，属性和方法的运算， watch/event 事件回调。mount挂载阶段还没开始，$el 属性目前不可见，数据并没有在DOM元素上进行渲染</li>
</ul>
</li>
<li>beforeMount(模板编译/挂载之前),<ul>
<li>完成了 el 和 data 初始化</li>
<li>在挂载开始之前被调用：相关的 render 函数首次被调用。</li>
</ul>
</li>
<li>mounted（模板编译/挂载之后）<ul>
<li>完成挂载</li>
<li>el选项的DOM节点 被新创建的 vm.$el 替换，并挂载到实例上去之后调用此生命周期函数。此时实例的数据在DOM节点上进行渲染</li>
</ul>
</li>
<li>beforeUpdate（组件更新之前）<ul>
<li>data的值改变后，组件更新，触发update的操作</li>
<li>数据更新时调用，但不进行DOM重新渲染，在数据更新时DOM没渲染前可以在这个生命函数里进行状态处理</li>
</ul>
</li>
<li>updated（组件更新之后）<ul>
<li>data的值改变后，组件更新，触发update的操作</li>
<li>这个状态下数据更新并且DOM重新渲染，当这个生命周期函数被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。当实例每次进行数据更新时updated都会执行</li>
</ul>
</li>
<li>beforeDestroy（组件销毁前）<ul>
<li>实例销毁之前调用。</li>
</ul>
</li>
<li>destroyed（组件销毁后）</li>
</ol>
<ul>
<li>销毁完成后，我们再重新改变data中的值，vue不再对此动作进行响应了。但是原先生成的dom元素还存在，可以这么理解，执行了destroy操作，后续就不再受vue控制了。</li>
<li>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<h3 id="钩子函数的使用"><a href="#钩子函数的使用" class="headerlink" title="钩子函数的使用"></a>钩子函数的使用</h3></li>
<li>beforecreate : 可以在这加个loading事件</li>
<li>created ：在这结束loading，还做一些初始化，实现函数自执行</li>
<li>mounted ： 在这发起后端请求，拿回数据，配合路由钩子做一些事情</li>
<li><p>beforeDestory： 你确认删除XX吗？ destoryed ：当前组件已被删除，清空相关内容</p>
</li>
<li><p>created：进行ajax请求异步数据的获取、初始化数据</p>
</li>
<li>mounted：挂载元素内dom节点的获取</li>
<li>nextTick：针对单一事件更新数据后立即操作dom</li>
<li>updated：任何数据的更新，如果要做统一的业务逻辑处理</li>
<li>watch：监听具体数据变化，并做相应的处理<a id="more"></a>
<h2 id="render-渲染-函数的使用-解决重复html"><a href="#render-渲染-函数的使用-解决重复html" class="headerlink" title="render(渲染)函数的使用(解决重复html)"></a>render(渲染)函数的使用(解决重复html)</h2></li>
<li>template模板中有重复HTMl的时候可以用render函数编译</li>
<li><p>案例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">  &lt;body&gt;</div><div class="line">        &lt;div id=&quot;app&quot;&gt;</div><div class="line">            &lt;mycomment :level=&quot;2&quot;&gt;</div><div class="line">                这是h2元素</div><div class="line">            &lt;/mycomment&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">    &lt;script type=&quot;text/x-template&quot; id=&quot;is&quot;&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h1 v-if=&quot;level === 1&quot;&gt;</div><div class="line">      &lt;slot&gt;&lt;/slot&gt;</div><div class="line">    &lt;/h1&gt;</div><div class="line">    &lt;h2 v-if=&quot;level === 2&quot;&gt;</div><div class="line">        &lt;slot&gt;&lt;/slot&gt;</div><div class="line">    &lt;/h2&gt;</div><div class="line">    &lt;h3 v-if=&quot;level === 3&quot;&gt;</div><div class="line">      &lt;slot&gt;&lt;/slot&gt;</div><div class="line">    &lt;/h3&gt;</div><div class="line">    &lt;h4 v-if=&quot;level === 4&quot;&gt;</div><div class="line">      &lt;slot&gt;&lt;/slot&gt;</div><div class="line">    &lt;/h4&gt;</div><div class="line">    &lt;h5 v-if=&quot;level === 5&quot;&gt;</div><div class="line">      &lt;slot&gt;&lt;/slot&gt;</div><div class="line">    &lt;/h5&gt;</div><div class="line">    &lt;h6 v-if=&quot;level === 6&quot;&gt;</div><div class="line">      &lt;slot&gt;&lt;/slot&gt;</div><div class="line">    &lt;/h6&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/script&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        Vue.component(&apos;mycomment&apos;,&#123;</div><div class="line">            template:&apos;#is&apos;,</div><div class="line">            props:&#123;</div><div class="line">                level:&#123;</div><div class="line">                    type:Number,</div><div class="line">                    required:true,</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        var app =new Vue(&#123;</div><div class="line">            el:&apos;#app&apos;,</div><div class="line">        &#125;)</div><div class="line"></div><div class="line"></div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>用Render函数解决代码冗长</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"> &lt;body&gt;</div><div class="line">        &lt;div id=&quot;app&quot;&gt;</div><div class="line">            &lt;render-teample :level=&quot;4&quot; &gt;</div><div class="line"></div><div class="line">                &lt;div class=&quot;jah&quot; slot=&quot;myslot&quot;&gt;render function&lt;/div&gt;</div><div class="line">            &lt;/render-teample&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">    Vue.component(&apos;render-teample&apos;,&#123;</div><div class="line">        render:function(createElement)&#123;</div><div class="line">            return createElement(</div><div class="line">                &apos;h&apos;+this.level,</div><div class="line">                &#123;</div><div class="line">                    &apos;class&apos;:&#123;</div><div class="line">                        show:true,</div><div class="line">                        hide:false,</div><div class="line">                    &#125;,</div><div class="line">                    style:&#123;</div><div class="line">                        width:&apos;200px&apos;,</div><div class="line">                        height:&apos;400px&apos;,</div><div class="line">                        background:&apos;red&apos;,</div><div class="line">                    &#125;,</div><div class="line">                    attrs:&#123;</div><div class="line">                        name:&apos;h-ex&apos;,</div><div class="line">                        id:&apos;h-id&apos;</div><div class="line">                    &#125;,</div><div class="line">                    props:&#123;</div><div class="line">                        myprops:true,</div><div class="line">                    &#125;,</div><div class="line">                     on: &#123;</div><div class="line">                    click: function(event)&#123;</div><div class="line">                        alert(this.num)</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                    nativeOn:&#123;</div><div class="line">                        click:function(event) &#123;</div><div class="line"></div><div class="line">                            alert(1111)</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;,</div><div class="line">                [</div><div class="line">                    this.$slots.myslot,</div><div class="line">                    createElement(&apos;div&apos;,&#123;</div><div class="line">                         domProps:&#123;</div><div class="line">                        innerHTML:&apos;holle render&apos;</div><div class="line">                    &#125;</div><div class="line">                    &#125;)</div><div class="line">                ]</div><div class="line"></div><div class="line">                )</div><div class="line">        &#125;,</div><div class="line">         props: &#123;</div><div class="line">        level: &#123;</div><div class="line">          type: Number,</div><div class="line">          required: true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">        var app=new Vue(&#123;</div><div class="line">            el:&quot;#app&quot;,</div><div class="line">            data:&#123;</div><div class="line">                num:110</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="vue自定义指令"><a href="#vue自定义指令" class="headerlink" title="vue自定义指令"></a>vue自定义指令</h2><ul>
<li>当项目中需要对纯 DOM 元素进行底层操作,就要用到自定义指令<h3 id="vue自定义指令的注册"><a href="#vue自定义指令的注册" class="headerlink" title="vue自定义指令的注册"></a>vue自定义指令的注册</h3></li>
<li><p>注册全局自定义指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Vue.directive(&apos;focus&apos;, &#123;</div><div class="line">  inserted: function (el) &#123;</div><div class="line">    el.focus()</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>注册局部自定义指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">directives: &#123;</div><div class="line">  focus: &#123;</div><div class="line">    inserted:function (el) &#123;</div><div class="line">                    el.focus()</div><div class="line">                &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###自定义指令函数提供的钩子函数</p>
<ul>
<li>bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作</li>
<li>inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）</li>
<li>update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）</li>
<li>componentUpdated: 被绑定元素所在模板完成一次更新周期时调用</li>
<li>unbind: 只调用一次， 指令与元素解绑时调用<br>###钩子函数的参数</li>
<li>el: 指令所绑定的元素，可以用来直接操作 DOM 。</li>
<li>binding: 一个对象，包含以下属性：<ul>
<li>name: 指令名，不包括 v- 前缀。</li>
<li>value: 指令的绑定值， 例如： v-my-directive=”1 + 1”, value 的值是 2。</li>
<li>oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li>
<li>expression: 绑定值的字符串形式。 例如 v-my-directive=”1 + 1” ， expression 的值是 “1 + 1”。</li>
<li>arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 “foo”。</li>
<li>modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。</li>
</ul>
</li>
<li>vnode: Vue 编译生成的虚拟节点。</li>
<li>oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;钩子函数的理解&quot;&gt;&lt;a href=&quot;#钩子函数的理解&quot; class=&quot;headerlink&quot; title=&quot;钩子函数的理解&quot;&gt;&lt;/a&gt;钩子函数的理解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;文档翻译造成的问题，原名是“hook”（不负责任的直译为“钩子”而已），它是一种事件劫持机制，也就是说它会比你的事件更早进行执行处理。&lt;/li&gt;
&lt;li&gt;可以简单地把它理解为vue的内置事件，但是这个内置事件是由你去配置的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;vue的生命周期详解&quot;&gt;&lt;a href=&quot;#vue的生命周期详解&quot; class=&quot;headerlink&quot; title=&quot;vue的生命周期详解&quot;&gt;&lt;/a&gt;vue的生命周期详解&lt;/h2&gt;&lt;h3 id=&quot;vue生命周期图示&quot;&gt;&lt;a href=&quot;#vue生命周期图示&quot; class=&quot;headerlink&quot; title=&quot;vue生命周期图示&quot;&gt;&lt;/a&gt;vue生命周期图示&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/28/5952fd52156c2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;生命周期总共分为八个阶段&quot;&gt;&lt;a href=&quot;#生命周期总共分为八个阶段&quot; class=&quot;headerlink&quot; title=&quot;生命周期总共分为八个阶段&quot;&gt;&lt;/a&gt;生命周期总共分为八个阶段&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;beforeCreate（组件实例创建前）&lt;ul&gt;
&lt;li&gt;el和data并未初始化&lt;/li&gt;
&lt;li&gt;实例创建前：这个阶段实例的data、methods是读不到的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;created（组件实例创建后）,&lt;ul&gt;
&lt;li&gt;完成了 data 数据的初始化，el没有&lt;/li&gt;
&lt;li&gt;实例创建后：这个阶段已经完成了数据观测(data observer)，属性和方法的运算， watch/event 事件回调。mount挂载阶段还没开始，$el 属性目前不可见，数据并没有在DOM元素上进行渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;beforeMount(模板编译/挂载之前),&lt;ul&gt;
&lt;li&gt;完成了 el 和 data 初始化&lt;/li&gt;
&lt;li&gt;在挂载开始之前被调用：相关的 render 函数首次被调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mounted（模板编译/挂载之后）&lt;ul&gt;
&lt;li&gt;完成挂载&lt;/li&gt;
&lt;li&gt;el选项的DOM节点 被新创建的 vm.$el 替换，并挂载到实例上去之后调用此生命周期函数。此时实例的数据在DOM节点上进行渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;beforeUpdate（组件更新之前）&lt;ul&gt;
&lt;li&gt;data的值改变后，组件更新，触发update的操作&lt;/li&gt;
&lt;li&gt;数据更新时调用，但不进行DOM重新渲染，在数据更新时DOM没渲染前可以在这个生命函数里进行状态处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;updated（组件更新之后）&lt;ul&gt;
&lt;li&gt;data的值改变后，组件更新，触发update的操作&lt;/li&gt;
&lt;li&gt;这个状态下数据更新并且DOM重新渲染，当这个生命周期函数被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。当实例每次进行数据更新时updated都会执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;beforeDestroy（组件销毁前）&lt;ul&gt;
&lt;li&gt;实例销毁之前调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;destroyed（组件销毁后）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;销毁完成后，我们再重新改变data中的值，vue不再对此动作进行响应了。但是原先生成的dom元素还存在，可以这么理解，执行了destroy操作，后续就不再受vue控制了。&lt;/li&gt;
&lt;li&gt;Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。&lt;h3 id=&quot;钩子函数的使用&quot;&gt;&lt;a href=&quot;#钩子函数的使用&quot; class=&quot;headerlink&quot; title=&quot;钩子函数的使用&quot;&gt;&lt;/a&gt;钩子函数的使用&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;beforecreate : 可以在这加个loading事件&lt;/li&gt;
&lt;li&gt;created ：在这结束loading，还做一些初始化，实现函数自执行&lt;/li&gt;
&lt;li&gt;mounted ： 在这发起后端请求，拿回数据，配合路由钩子做一些事情&lt;/li&gt;
&lt;li&gt;&lt;p&gt;beforeDestory： 你确认删除XX吗？ destoryed ：当前组件已被删除，清空相关内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;created：进行ajax请求异步数据的获取、初始化数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;mounted：挂载元素内dom节点的获取&lt;/li&gt;
&lt;li&gt;nextTick：针对单一事件更新数据后立即操作dom&lt;/li&gt;
&lt;li&gt;updated：任何数据的更新，如果要做统一的业务逻辑处理&lt;/li&gt;
&lt;li&gt;watch：监听具体数据变化，并做相应的处理
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js学习二</title>
    <link href="http://yoursite.com/2017/06/23/Vue-js%E5%AD%A6%E4%B9%A0%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/06/23/Vue-js学习二/</id>
    <published>2017-06-23T02:38:34.000Z</published>
    <updated>2017-06-27T09:33:46.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Class与Style绑定"><a href="#Class与Style绑定" class="headerlink" title="Class与Style绑定"></a>Class与Style绑定</h2><h3 id="绑定HTML-Class"><a href="#绑定HTML-Class" class="headerlink" title="绑定HTML Class"></a>绑定HTML Class</h3><ol>
<li>对象语法：</li>
</ol>
<ul>
<li><p>给<code>v-bind:class</code>一个对象，以动态切换class,语法表示<code>classactive</code>的更新将取决于数据属性 isActive 是否为真值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在对象中传入更多属性用来动态切换多个 class ,v-bind:class 指令可以与普通的 class 属性共存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;static&quot;</div><div class="line">     v-bind:class=&quot;&#123; active: isActive, &apos;text-danger&apos;: hasError &#125;&quot;&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>直接绑定数据里的一个对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;</div><div class="line">data: &#123;</div><div class="line">  classObject: &#123;</div><div class="line">    active: true,</div><div class="line">    &apos;text-danger&apos;: false</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>数组语法</li>
</ol>
<ul>
<li><p>把一个数组传给 v-bind:class ，以应用一个 class 列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:class=&quot;[activeClass,errorClass]&quot;&gt;&lt;/div&gt;</div><div class="line">data: &#123;</div><div class="line">    activeClass: &apos;active&apos;,</div><div class="line">    errorClass: &apos;text-danger&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>用三元表达式，据条件切换列表中的 class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:class=&quot;[isActive ? activeClass : &apos;&apos;, errorClass]&quot;&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><ul>
<li><code>v-if</code>是“真正的”条件渲染，如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</li>
<li><code>v-show</code>不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换</li>
<li>区别：v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件不太可能改变，则使用 v-if 较好</li>
</ul>
<a id="more"></a>
<h3 id="vue时间处理器"><a href="#vue时间处理器" class="headerlink" title="vue时间处理器"></a>vue时间处理器</h3><ul>
<li>用 <code>v-on</code> 指令监听 DOM 事件来触发一些 JavaScript 代码</li>
<li><code>v-on</code> 可以接收一个定义的方法来调用，方法定义在<code>methods</code><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3></li>
<li><p>vue推荐methods 只有纯粹的数据逻辑，而不是去处理 DOM 事件细节,当我们要调用 event.preventDefault() 或 event.stopPropagation(),就可以使用事件修饰符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 阻止单击事件冒泡 --&gt;</div><div class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</div><div class="line">&lt;!-- 提交事件不再重载页面 --&gt;</div><div class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</div><div class="line">&lt;!-- 修饰符可以串联  --&gt;</div><div class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</div><div class="line">&lt;!-- 只有修饰符 --&gt;</div><div class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</div><div class="line">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</div><div class="line">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</div><div class="line">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</div><div class="line">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</div><div class="line">&lt;!-- 点击事件将只会触发一次 --&gt;</div><div class="line">&lt;div v-on:click.once=&apos;doThat&apos;&gt;...&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 @click.prevent.self 会阻止所有的点击，而 @click.self.prevent 只会阻止元素上的点击。</p>
<h3 id="关键修饰符"><a href="#关键修饰符" class="headerlink" title="关键修饰符"></a>关键修饰符</h3></li>
<li><p>Vue 允许为 v-on 在监听键盘事件时添加关键修饰符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</div><div class="line">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>Vue 为最常用的按键提供了别名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 同上 --&gt;</div><div class="line">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</div><div class="line">&lt;!-- 缩写语法 --&gt;</div><div class="line">&lt;input @keyup.enter=&quot;submit&quot;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>全部的按键别名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.enter</div><div class="line">.tab</div><div class="line">.delete (捕获 “删除” 和 “退格” 键)</div><div class="line">.esc</div><div class="line">.space</div><div class="line">.up</div><div class="line">.down</div><div class="line">.left</div><div class="line">.right</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="vue的数据绑定"><a href="#vue的数据绑定" class="headerlink" title="vue的数据绑定"></a>vue的数据绑定</h2><ul>
<li>“Mustache” 语法（双大括号）<code>{{text}}</code> 单向的数据绑定</li>
<li><code>v-model</code> 双向数据绑定<h3 id="v-model可以添加修饰符"><a href="#v-model可以添加修饰符" class="headerlink" title="v-model可以添加修饰符"></a><code>v-model</code>可以添加修饰符</h3></li>
<li><p>可以添加一个修饰符 lazy ,从而转变为在 change 事件中同步：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</div><div class="line">&lt;input v-model.lazy=&quot;msg&quot; &gt;</div></pre></td></tr></table></figure>
</li>
<li><p>将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input v-model.number=&apos;age&apos; type=&apos;number&apos;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input v-model.trim=&quot;msg&quot;&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Class与Style绑定&quot;&gt;&lt;a href=&quot;#Class与Style绑定&quot; class=&quot;headerlink&quot; title=&quot;Class与Style绑定&quot;&gt;&lt;/a&gt;Class与Style绑定&lt;/h2&gt;&lt;h3 id=&quot;绑定HTML-Class&quot;&gt;&lt;a href=&quot;#绑定HTML-Class&quot; class=&quot;headerlink&quot; title=&quot;绑定HTML Class&quot;&gt;&lt;/a&gt;绑定HTML Class&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;对象语法：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;给&lt;code&gt;v-bind:class&lt;/code&gt;一个对象，以动态切换class,语法表示&lt;code&gt;classactive&lt;/code&gt;的更新将取决于数据属性 isActive 是否为真值&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div v-bind:class=&amp;quot;&amp;#123; active: isActive &amp;#125;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在对象中传入更多属性用来动态切换多个 class ,v-bind:class 指令可以与普通的 class 属性共存&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div class=&amp;quot;static&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     v-bind:class=&amp;quot;&amp;#123; active: isActive, &amp;apos;text-danger&amp;apos;: hasError &amp;#125;&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;直接绑定数据里的一个对象&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div v-bind:class=&amp;quot;classObject&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;data: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  classObject: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    active: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;text-danger&amp;apos;: false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;数组语法&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;把一个数组传给 v-bind:class ，以应用一个 class 列表：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div v-bind:class=&amp;quot;[activeClass,errorClass]&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;data: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    activeClass: &amp;apos;active&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    errorClass: &amp;apos;text-danger&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用三元表达式，据条件切换列表中的 class&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div v-bind:class=&amp;quot;[isActive ? activeClass : &amp;apos;&amp;apos;, errorClass]&amp;quot;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;条件渲染&quot;&gt;&lt;a href=&quot;#条件渲染&quot; class=&quot;headerlink&quot; title=&quot;条件渲染&quot;&gt;&lt;/a&gt;条件渲染&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v-if&lt;/code&gt;是“真正的”条件渲染，如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-show&lt;/code&gt;不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换&lt;/li&gt;
&lt;li&gt;区别：v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件不太可能改变，则使用 v-if 较好&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
