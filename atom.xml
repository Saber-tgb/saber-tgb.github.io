<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汤国斌的博客</title>
  <subtitle>学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-10T06:49:08.293Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>汤国斌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>npm包的开发及发布</title>
    <link href="http://yoursite.com/2017/10/10/npm%E5%8C%85%E7%9A%84%E5%BC%80%E5%8F%91%E5%8F%8A%E5%8F%91%E5%B8%83/"/>
    <id>http://yoursite.com/2017/10/10/npm包的开发及发布/</id>
    <published>2017-10-10T06:39:47.000Z</published>
    <updated>2017-10-10T06:49:08.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm创建"><a href="#npm创建" class="headerlink" title="npm创建"></a>npm创建</h2><ul>
<li><code>npm init</code><ul>
<li>name：填写你这个包的名字，默认是你这个文件夹的名字。不过这里要着重说一下，最好先去npm上找一下有没有同名的包。最好的测试方式就是，在命令行里面输入npm install 你要取的名字，如果报错，那么很好，npm上没有跟你同名的包，你可以放心大胆地把包发布出去.</li>
<li>version：你这个包的版本，默认是1.0.0，以后要在package.json文件中更改版本号才能重新发布npm包</li>
<li>description：用一句话描述你的包是干嘛用的。</li>
<li>entry point：入口文件，默认是Index.js，你也可以自己填写你自己的文件名</li>
<li>test command：测试命令，这个直接回车就好了，因为目前还不需要这个。</li>
<li>git repository：这个是git仓库地址，如果你的包是先放到github上或者其他git仓库里，这时候你的文件夹里面会存在一个隐藏的.git目录，npm会读到这个目录作为这一项的默认值。如果没有的话，直接回车继续。</li>
<li>keyword：这个是一个重点，这个关系到有多少人会搜到你的npm包。尽量使用贴切的关键字作为这个包的索引。</li>
<li>author：写你的账号或者你的github账号吧</li>
<li>license：开源文件<a id="more"></a>
<h2 id="npm包的开发"><a href="#npm包的开发" class="headerlink" title="npm包的开发"></a>npm包的开发</h2></li>
</ul>
</li>
</ul>
<h2 id="npm包的发布"><a href="#npm包的发布" class="headerlink" title="npm包的发布"></a>npm包的发布</h2><ul>
<li>本地登录npm账号<code>npm login</code>,输入账户，密码，邮箱</li>
<li>发布<code>npm publish</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;npm创建&quot;&gt;&lt;a href=&quot;#npm创建&quot; class=&quot;headerlink&quot; title=&quot;npm创建&quot;&gt;&lt;/a&gt;npm创建&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm init&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;name：填写你这个包的名字，默认是你这个文件夹的名字。不过这里要着重说一下，最好先去npm上找一下有没有同名的包。最好的测试方式就是，在命令行里面输入npm install 你要取的名字，如果报错，那么很好，npm上没有跟你同名的包，你可以放心大胆地把包发布出去.&lt;/li&gt;
&lt;li&gt;version：你这个包的版本，默认是1.0.0，以后要在package.json文件中更改版本号才能重新发布npm包&lt;/li&gt;
&lt;li&gt;description：用一句话描述你的包是干嘛用的。&lt;/li&gt;
&lt;li&gt;entry point：入口文件，默认是Index.js，你也可以自己填写你自己的文件名&lt;/li&gt;
&lt;li&gt;test command：测试命令，这个直接回车就好了，因为目前还不需要这个。&lt;/li&gt;
&lt;li&gt;git repository：这个是git仓库地址，如果你的包是先放到github上或者其他git仓库里，这时候你的文件夹里面会存在一个隐藏的.git目录，npm会读到这个目录作为这一项的默认值。如果没有的话，直接回车继续。&lt;/li&gt;
&lt;li&gt;keyword：这个是一个重点，这个关系到有多少人会搜到你的npm包。尽量使用贴切的关键字作为这个包的索引。&lt;/li&gt;
&lt;li&gt;author：写你的账号或者你的github账号吧&lt;/li&gt;
&lt;li&gt;license：开源文件
    
    </summary>
    
      <category term="前端构建生态" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E7%94%9F%E6%80%81/"/>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Stylus的使用</title>
    <link href="http://yoursite.com/2017/09/25/Stylus%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/25/Stylus的使用/</id>
    <published>2017-09-25T01:34:17.000Z</published>
    <updated>2017-09-25T07:15:20.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Less安装"><a href="#Less安装" class="headerlink" title="Less安装"></a>Less安装</h1><ul>
<li><code>npm install less -g</code>全局安装less,webStorm编辑器的插件会将less编译为css</li>
<li><p>浏览器直接使用less</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//.less 样式表的链接，并将 rel 属性设置为 &quot;stylesheet/less&quot; 在 less.js 之前加载样式表。</div><div class="line">&lt;link rel=&quot;stylesheet/less&quot; type=&quot;text/css&quot; href=&quot;./index.less&quot;&gt;</div><div class="line">// 使用`less.js`插件解析less</div><div class="line">&lt;script src=&quot;http://cdn.bootcss.com/less.js/1.7.0/less.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在vue框架中使用less,安装npm包<code>npm install --save-dev less less-loader</code></p>
</li>
</ul>
<h1 id="Less的语法"><a href="#Less的语法" class="headerlink" title="Less的语法"></a>Less的语法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li>将常用的值定义在一个地方</li>
<li>定义常用选择器<code>@mySelector:banner;</code></li>
<li></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Less安装&quot;&gt;&lt;a href=&quot;#Less安装&quot; class=&quot;headerlink&quot; title=&quot;Less安装&quot;&gt;&lt;/a&gt;Less安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install less -g&lt;/code&gt;全局安装less,webStor
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
      <category term="CSS预处理器" scheme="http://yoursite.com/categories/CSS/CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="Stylus" scheme="http://yoursite.com/tags/Stylus/"/>
    
  </entry>
  
  <entry>
    <title>Sass的使用</title>
    <link href="http://yoursite.com/2017/09/25/Sass%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/25/Sass的使用/</id>
    <published>2017-09-25T01:33:56.000Z</published>
    <updated>2017-09-25T01:36:23.506Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
      <category term="CSS预处理器" scheme="http://yoursite.com/categories/CSS/CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="Sass" scheme="http://yoursite.com/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>Less的使用</title>
    <link href="http://yoursite.com/2017/09/25/Less%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/25/Less的使用/</id>
    <published>2017-09-25T01:33:29.000Z</published>
    <updated>2017-09-25T01:36:05.931Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
      <category term="CSS预处理器" scheme="http://yoursite.com/categories/CSS/CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="Less" scheme="http://yoursite.com/tags/Less/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发</title>
    <link href="http://yoursite.com/2017/09/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2017/09/25/微信小程序开发/</id>
    <published>2017-09-25T00:58:07.000Z</published>
    <updated>2017-09-25T01:07:41.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小程序的基本文件功能"><a href="#小程序的基本文件功能" class="headerlink" title="小程序的基本文件功能"></a>小程序的基本文件功能</h1><ul>
<li><code>.js</code>后缀的是脚本文件，<code>.json</code>后缀的文件是配置文件，<code>.wxss</code>后缀的是样式表文件</li>
<li>app.js是小程序的脚本代码。我们可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量</li>
<li>app.json 是对整个小程序的全局配置。我们可以在这个文件中配置小程序是由哪些页面组成，配置小程序的窗口背景色，配置导航条样式，配置默认标题。注意该文件不可添加任何注释。</li>
<li>app.wxss 是整个小程序的公共样式表。我们可以在页面组件的 class 属性上直接使用 app.wxss 中声明的样式规则</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;小程序的基本文件功能&quot;&gt;&lt;a href=&quot;#小程序的基本文件功能&quot; class=&quot;headerlink&quot; title=&quot;小程序的基本文件功能&quot;&gt;&lt;/a&gt;小程序的基本文件功能&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.js&lt;/code&gt;后缀的是脚本文件，&lt;code&gt;.
    
    </summary>
    
      <category term="应用工具学习" scheme="http://yoursite.com/categories/%E5%BA%94%E7%94%A8%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="微信小程序" scheme="http://yoursite.com/categories/%E5%BA%94%E7%94%A8%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号JS-SDK调用</title>
    <link href="http://yoursite.com/2017/09/21/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7JS-SDK%E8%B0%83%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/21/微信公众号JS-SDK调用/</id>
    <published>2017-09-21T03:38:03.000Z</published>
    <updated>2017-09-21T09:02:36.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>微信JS-SDK是微信提供的一套调用微信内部API功能的的插件</li>
</ul>
<h2 id="JS-SDK使用"><a href="#JS-SDK使用" class="headerlink" title="JS-SDK使用"></a>JS-SDK使用</h2><ol>
<li>域名绑定</li>
<li>引入JS<ul>
<li><code>html</code>文件中直接引入JS文件<code>http://res.wx.qq.com/open/js/jweixin-1.2.0.js</code></li>
<li>vue单页面项目使用：<ul>
<li>安装<code>npm install --save weixin-js-sdk</code></li>
<li>组件中使用<code>import wx from &#39;weixin-js-sdk&#39;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>通过config接口注入权限验证配置</p>
<ul>
<li>通过后台提供的接口设置<code>config</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wx.config(&#123;</div><div class="line">    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</div><div class="line">    appId: &apos;&apos;, // 必填，公众号的唯一标识</div><div class="line">    timestamp: , // 必填，生成签名的时间戳</div><div class="line">    nonceStr: &apos;&apos;, // 必填，生成签名的随机串</div><div class="line">    signature: &apos;&apos;,// 必填，签名，见附录1</div><div class="line">    jsApiList: [] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>通过ready接口处理成功验证<code>wx.ready(function(){})</code></p>
<ul>
<li>vue单页面项目<code>wx.ready</code>写在主组件里面</li>
</ul>
</li>
<li><p>通过error接口处理失败验证<code>wx.error(function(res){})</code></p>
</li>
</ol>
<p>##接口调用说明</p>
<ul>
<li>所有接口通过wx对象(也可使用jWeixin对象)来调用，参数是一个对象，除了每个接口本身需要传的参数之外，还有以下通用参数<ol>
<li>success：接口调用成功时执行的回调函数。</li>
<li>fail：接口调用失败时执行的回调函数。</li>
<li>complete：接口调用完成时执行的回调函数，无论成功或失败都会执行。</li>
<li>cancel：用户点击取消时的回调函数，仅部分有用户取消操作的api才会用到。</li>
<li>trigger: 监听Menu中的按钮点击时触发的方法，该方法仅支持Menu中的相关接口。<code>备注：不要尝试在trigger中使用ajax异步请求修改本次分享的内容，因为客户端分享操作是一个同步操作，这时候使用ajax的回包会还没有返回</code></li>
</ol>
</li>
</ul>
<h2 id="基础接口的使用"><a href="#基础接口的使用" class="headerlink" title="基础接口的使用"></a>基础接口的使用</h2><ol>
<li><p>图片上传</p>
<ul>
<li>调用<code>wx.chooseImage</code>选择图片或拍照,再调用上传图片接口<code>wx.uploadImage</code>上传到微信服务器获取到<code>serverId</code>，最后调用后台接口上传到公司服务器，根据后台返回的<code>imgURl</code>在页面显示<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">//示例</div><div class="line">wx.chooseImage(&#123;</div><div class="line">        count: 1,</div><div class="line">        sizeType: [&apos;original&apos;, &apos;compressed&apos;],</div><div class="line">        sourceType: [&apos;album&apos;, &apos;camera&apos;],</div><div class="line">        success: function (res) &#123;</div><div class="line">          let localId = res.localIds.toString();</div><div class="line">          wx.uploadImage(&#123;</div><div class="line">            localId: localId,</div><div class="line">            isShowProgressTips: 1,</div><div class="line">            success: function (res) &#123;</div><div class="line">              var serverId = res.serverId; // 返回图片的服务器端ID</div><div class="line">              let parms = &#123;</div><div class="line">                mediaid:serverId</div><div class="line">              &#125;</div><div class="line">              that.imgBoxWrapShow = true;</div><div class="line">              imgUpload(parms).then( res =&gt; &#123;</div><div class="line">                let &#123;code,msg,data&#125; = res;</div><div class="line">                if(code!==0) &#123;</div><div class="line">                  alert(msg);</div><div class="line">                  that.imgBoxWrapShow = false;</div><div class="line">                  return false;</div><div class="line">                &#125;</div><div class="line">                that.imgArr.push(data);</div><div class="line">                if(that.imgArr.length&gt;=4) &#123;</div><div class="line">                  that.uploadImgShow=false;</div><div class="line">                &#125;</div><div class="line">                that.imgBoxWrapShow = false;</div><div class="line">              &#125;)</div><div class="line">            &#125;,</div><div class="line">            fail: function() &#123;</div><div class="line">              alert(&apos;上传失败&apos;);</div><div class="line">            &#125;</div><div class="line">          &#125;);</div><div class="line">        &#125;,</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>禁止微信的功能</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//隐藏微信的功能</div><div class="line">      wx.hideMenuItems(&#123;</div><div class="line">        menuList: [</div><div class="line">          &apos;menuItem:share:qq&apos;,</div><div class="line">          &apos;menuItem:share:weiboApp&apos;,</div><div class="line">          &apos;menuItem:favorite&apos;,</div><div class="line">          &apos;menuItem:share:facebook&apos;,</div><div class="line">          &apos;menuItem:share:QZone&apos;,</div><div class="line">          &apos;menuItem:editTag&apos;,</div><div class="line">          &apos;menuItem:delete&apos;,</div><div class="line">          &apos;menuItem:copyUrl&apos;,</div><div class="line">          &apos;menuItem:originPage&apos;,</div><div class="line">          &apos;menuItem:readMode&apos;,</div><div class="line">          &apos;menuItem:openWithQQBrowser&apos;,</div><div class="line">          &apos;menuItem:openWithSafari&apos;,</div><div class="line">          &apos;menuItem:share:email&apos;,</div><div class="line">          &apos;menuItem:share:brand&apos;,</div><div class="line">          &apos;menuItem:share:appMessage&apos;,</div><div class="line">          &apos;menuItem:share:timeline&apos;</div><div class="line">        ]</div><div class="line">      &#125;);</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;微信JS-SDK是微信提供的一套调用微信内部API功能的的插件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;JS-SDK使用&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="应用工具学习" scheme="http://yoursite.com/categories/%E5%BA%94%E7%94%A8%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="微信公众号" scheme="http://yoursite.com/categories/%E5%BA%94%E7%94%A8%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="微信公众号" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
      <category term="微信JS-SDK" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1JS-SDK/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号网页开发</title>
    <link href="http://yoursite.com/2017/09/21/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2017/09/21/微信公众号网页开发/</id>
    <published>2017-09-21T03:37:12.000Z</published>
    <updated>2017-09-21T03:42:59.689Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="应用工具学习" scheme="http://yoursite.com/categories/%E5%BA%94%E7%94%A8%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="微信公众号" scheme="http://yoursite.com/categories/%E5%BA%94%E7%94%A8%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="微信公众号" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript--作用域</title>
    <link href="http://yoursite.com/2017/09/18/ECMAScript-%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2017/09/18/ECMAScript-作用域/</id>
    <published>2017-09-18T13:10:40.000Z</published>
    <updated>2017-09-18T13:10:40.311Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信JS-SDK的使用</title>
    <link href="http://yoursite.com/2017/09/18/%E5%BE%AE%E4%BF%A1JS-SDK%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/18/微信JS-SDK的使用/</id>
    <published>2017-09-18T13:10:00.000Z</published>
    <updated>2017-09-18T13:10:00.185Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS数组的使用</title>
    <link href="http://yoursite.com/2017/09/18/JS%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/18/JS数组的使用/</id>
    <published>2017-09-18T13:09:31.000Z</published>
    <updated>2017-09-18T13:09:31.211Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mockServer的搭建</title>
    <link href="http://yoursite.com/2017/09/18/mockServer%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/09/18/mockServer的搭建/</id>
    <published>2017-09-18T07:41:30.000Z</published>
    <updated>2017-09-18T14:26:00.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用json-server模拟服务器"><a href="#使用json-server模拟服务器" class="headerlink" title="使用json-server模拟服务器"></a>使用json-server模拟服务器</h1><h3 id="mockServer的思路"><a href="#mockServer的思路" class="headerlink" title="mockServer的思路"></a>mockServer的思路</h3><ul>
<li>以 <code>json-server</code> 作为 mock 服务器， <code>mock.js</code> 生成 mock 数据，以此达到 <code>mock-server</code> 要求。</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>全局安装<code>npm install -g json-server</code></li>
<li>项目安装<code>npm install --save-dev json-server</code></li>
<li>安装<code>mock.js</code>快速创建模拟接口 <code>npm install --save-dev mock.js</code></li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>在项目根目录下创建mock文件夹</li>
<li>再分别创建<code>db.js</code>作为 mock 数据源、<code>router.js</code>作为 mock 服务、<code>server.js</code>重写路由表</li>
<li><code>db.js</code>配置接口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// db.js</div><div class="line">var Mock = require(&apos;mockjs&apos;);</div><div class="line">module.exports = &#123;</div><div class="line">  getComment: Mock.mock(&#123;</div><div class="line">    &quot;error&quot;: 0,</div><div class="line">    &quot;message&quot;: &quot;success&quot;,</div><div class="line">    &quot;result|40&quot;: [&#123;</div><div class="line">      &quot;author&quot;: &quot;@name&quot;,</div><div class="line">      &quot;comment&quot;: &quot;@cparagraph&quot;,</div><div class="line">      &quot;date&quot;: &quot;@datetime&quot;</div><div class="line">    &#125;]</div><div class="line">  &#125;),</div><div class="line">  addComment: Mock.mock(&#123;</div><div class="line">    &quot;error&quot;: 0,</div><div class="line">    &quot;message&quot;: &quot;success&quot;,</div><div class="line">    &quot;result&quot;: []</div><div class="line">  &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>通过路由表<code>routes.js</code>实现路由配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  &quot;/comment/get.action&quot;: &quot;/getComment&quot;,</div><div class="line">  &quot;/comment/add.action&quot;: &quot;/addComment&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>server.js</code>正式使用<code>json-server</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// server.js</div><div class="line">const jsonServer = require(&apos;json-server&apos;)</div><div class="line">const db = require(&apos;./db.js&apos;)</div><div class="line">const routes = require(&apos;./router.js&apos;)</div><div class="line">const port = 3000;</div><div class="line">const opn = require(&apos;opn&apos;)</div><div class="line"></div><div class="line">const server = jsonServer.create()</div><div class="line">const router = jsonServer.router(db)</div><div class="line">const middlewares = jsonServer.defaults()</div><div class="line">const rewriter = jsonServer.rewriter(routes)</div><div class="line"></div><div class="line">let url = &apos;http://localhost:&apos; + port</div><div class="line"></div><div class="line">server.use(middlewares)</div><div class="line">// 将 POST 请求转为 GET</div><div class="line">server.use((request, res, next) =&gt; &#123;</div><div class="line">  request.method = &apos;GET&apos;;</div><div class="line">  next();</div><div class="line">&#125;)</div><div class="line"></div><div class="line">server.use(rewriter) // 注意：rewriter 的设置一定要在 router 设置之前</div><div class="line">server.use(router)</div><div class="line"></div><div class="line">server.listen(port, () =&gt; &#123;</div><div class="line">  console.log(&apos;open mock server at localhost:&apos; + port)</div><div class="line">  opn(url);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol>
<li>在<code>package.json</code>中配置命令<ul>
<li>配置mockServer启动<code>&quot;mockServer&quot;: &quot;node mock/server.js&quot;</code></li>
<li>配置mockServer和项目一起启动<code>&quot;mock&quot;: &quot;npm run mockServer | npm run dev&quot;</code></li>
</ul>
</li>
<li>调用命令启动项目和mockServer<code>npm run mock</code></li>
</ol>
<h3 id="端口代理"><a href="#端口代理" class="headerlink" title="端口代理"></a>端口代理</h3><ul>
<li><p>通过 Webpack 配置 proxy 代理,vue-cli创建的项目在<code>config/index.js</code>中配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//配置代理</div><div class="line">proxyTable: &#123;</div><div class="line">  &apos;/api/&apos;: &#123;</div><div class="line">    target: &apos;http://localhost:3000&apos;,</div><div class="line">    changeOrigin: true,</div><div class="line">    pathRewrite: &#123;</div><div class="line">      &apos;^/api&apos;: &apos;&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
</li>
<li><p>接口请求案例,以 axios 为例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function getComments () &#123;</div><div class="line">  axios.get(&apos;api/comment/get.action&apos;, &#123;&#125;).then((res) =&gt; &#123;</div><div class="line">    console.log(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用json-server模拟服务器&quot;&gt;&lt;a href=&quot;#使用json-server模拟服务器&quot; class=&quot;headerlink&quot; title=&quot;使用json-server模拟服务器&quot;&gt;&lt;/a&gt;使用json-server模拟服务器&lt;/h1&gt;&lt;h3 id=&quot;mockServer的思路&quot;&gt;&lt;a href=&quot;#mockServer的思路&quot; class=&quot;headerlink&quot; title=&quot;mockServer的思路&quot;&gt;&lt;/a&gt;mockServer的思路&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;以 &lt;code&gt;json-server&lt;/code&gt; 作为 mock 服务器， &lt;code&gt;mock.js&lt;/code&gt; 生成 mock 数据，以此达到 &lt;code&gt;mock-server&lt;/code&gt; 要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;全局安装&lt;code&gt;npm install -g json-server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;项目安装&lt;code&gt;npm install --save-dev json-server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装&lt;code&gt;mock.js&lt;/code&gt;快速创建模拟接口 &lt;code&gt;npm install --save-dev mock.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在项目根目录下创建mock文件夹&lt;/li&gt;
&lt;li&gt;再分别创建&lt;code&gt;db.js&lt;/code&gt;作为 mock 数据源、&lt;code&gt;router.js&lt;/code&gt;作为 mock 服务、&lt;code&gt;server.js&lt;/code&gt;重写路由表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db.js&lt;/code&gt;配置接口&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// db.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var Mock = require(&amp;apos;mockjs&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;module.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  getComment: Mock.mock(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;error&amp;quot;: 0,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;result|40&amp;quot;: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;quot;author&amp;quot;: &amp;quot;@name&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;quot;comment&amp;quot;: &amp;quot;@cparagraph&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;quot;date&amp;quot;: &amp;quot;@datetime&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  addComment: Mock.mock(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;error&amp;quot;: 0,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;result&amp;quot;: []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端构建生态" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E7%94%9F%E6%80%81/"/>
    
    
      <category term="mockServer" scheme="http://yoursite.com/tags/mockServer/"/>
    
      <category term="mock.js" scheme="http://yoursite.com/tags/mock-js/"/>
    
  </entry>
  
  <entry>
    <title>PS技能学习</title>
    <link href="http://yoursite.com/2017/09/14/PS%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/09/14/PS技能学习/</id>
    <published>2017-09-14T06:36:35.000Z</published>
    <updated>2017-09-14T09:06:47.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><ul>
<li>选中图层，通过裁剪工具裁剪指定像素，按住回车键裁剪图片，按住<code>ctrl</code>键+<code>shift</code>键+<code>alt</code>键+<code>s</code>存储为web格式</li>
</ul>
<h2 id="Photoshop界面设置"><a href="#Photoshop界面设置" class="headerlink" title="Photoshop界面设置"></a>Photoshop界面设置</h2><ul>
<li>窗口只显示字符、信息、图层、历史记录</li>
<li>视图&gt;显示勾选上智能参考线，视图 勾选上标尺</li>
</ul>
<h2 id="Photoshop基本工具操作"><a href="#Photoshop基本工具操作" class="headerlink" title="Photoshop基本工具操作"></a>Photoshop基本工具操作</h2><h3 id="移动工具设置"><a href="#移动工具设置" class="headerlink" title="移动工具设置"></a>移动工具设置</h3><ul>
<li>快捷键<code>V</code> 快速获取移动工具</li>
<li>通过<code>Ctrl</code>键+鼠标左键获取图层<h3 id="选区工具"><a href="#选区工具" class="headerlink" title="选区工具"></a>选区工具</h3></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;截图&quot;&gt;&lt;a href=&quot;#截图&quot; class=&quot;headerlink&quot; title=&quot;截图&quot;&gt;&lt;/a&gt;截图&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;选中图层，通过裁剪工具裁剪指定像素，按住回车键裁剪图片，按住&lt;code&gt;ctrl&lt;/code&gt;键+&lt;code&gt;shift&lt;/co
    
    </summary>
    
      <category term="Photoshop与切图" scheme="http://yoursite.com/categories/Photoshop%E4%B8%8E%E5%88%87%E5%9B%BE/"/>
    
    
      <category term="PS切图" scheme="http://yoursite.com/tags/PS%E5%88%87%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Next主体配置</title>
    <link href="http://yoursite.com/2017/09/13/Next%E4%B8%BB%E4%BD%93%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/09/13/Next主体配置/</id>
    <published>2017-09-13T08:43:05.000Z</published>
    <updated>2017-09-13T09:03:07.601Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 有两份主要的配置文件（_config.yml），一份位于站点根目录下，另一份位于主题目录下。为了描述方便，在以下说明中，将前者称为站点配置文件，后者称为主题配置文件。</p>
<p>hexo的next主题个性化配置教程: <a href="https://segmentfault.com/a/1190000009544924#articleHeader19" target="_blank" rel="external">https://segmentfault.com/a/1190000009544924#articleHeader19</a></p>
<h2 id="NexT主题安装"><a href="#NexT主题安装" class="headerlink" title="NexT主题安装"></a>NexT主题安装</h2><h3 id="下载NexT主题"><a href="#下载NexT主题" class="headerlink" title="下载NexT主题"></a>下载NexT主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd your-hexo-site`</div><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<h3 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h3><p>修改站点配置文件_config.yml，找到以下部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: http://hexo.io/plugins/</div><div class="line">## Themes: http://hexo.io/themes/</div><div class="line">theme: landscape</div></pre></td></tr></table></figure></p>
<p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: http://hexo.io/plugins/</div><div class="line">## Themes: http://hexo.io/themes/</div><div class="line"># theme: landscape</div><div class="line">theme: next`</div></pre></td></tr></table></figure></p>
<p>至此，NexT主题就安装好了，非常方便，在Hexo中切换主题只需修改站点配置文件中theme属性来配置，想换就换。</p>
<h3 id="选择Scheme"><a href="#选择Scheme" class="headerlink" title="选择Scheme"></a>选择Scheme</h3><p>NexT 通过 Scheme 提供主题中的主题。Mist是NexT主题自带的主题，可以通过修改主题配置文件中的scheme属性获得。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Schemes</div><div class="line">scheme: Mist  #去掉默认的注释即可切换为Mist主题</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h2><p>NexT主题菜单设置，用于设置博客上方导航栏，在主题配置文件中修改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /                       #主页</div><div class="line">  categories: /categories	#分类页（需手动创建）</div><div class="line">  #about: /about		#关于页面（需手动创建）</div><div class="line">  archives: /archives		#归档页</div><div class="line">  tags: /tags			#标签页（需手动创建）</div><div class="line">  #commonweal: /404.html        #公益 404 （需手动创建）</div></pre></td></tr></table></figure></p>
<p>只是在menu选项中设置还不能让标签页面、分类页面生效，需要我们手动创建</p>
<h3 id="标签页面"><a href="#标签页面" class="headerlink" title="标签页面"></a>标签页面</h3><ol>
<li>运行以下命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page &quot;tags&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>同时，在/source目录下会生成一个tags文件夹，里面包含一个index.md文件</p>
<ol>
<li><p>修改/source/tags目录下的index.md文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: tags</div><div class="line">date: 2015-09-29 14:37:02</div><div class="line">type: &quot;tags&quot;</div><div class="line">---</div></pre></td></tr></table></figure>
</li>
<li><p>修改主题配置文件<br>去掉tags的注释</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /                       #主页</div><div class="line">  categories: /categories	#分类页（需手动创建）</div><div class="line">  #about: /about		#关于页面（需手动创建）</div><div class="line">  archives: /archives		#归档页</div><div class="line">  tags: /tags			#标签页（需手动创建）</div><div class="line">  #commonweal: /404.html        #公益 404 （需手动创建）</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="分类页面"><a href="#分类页面" class="headerlink" title="分类页面"></a>分类页面</h3><ol>
<li><p>运行以下命令 <code>hexo new page &quot;categories&quot;</code><br>同时，在/source目录下会生成一个categories文件夹，里面包含一个index.md文件</p>
</li>
<li><p>修改/source/categories目录下的index.md文件</p>
</li>
<li><p>修改主题配置文件:去掉categories的注释</p>
</li>
</ol>
<h3 id="侧边栏头像设置"><a href="#侧边栏头像设置" class="headerlink" title="侧边栏头像设置"></a>侧边栏头像设置</h3><p>编辑站点配置文件，增加avatar字段</p>
<h1 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h1><p>avatar: /images/avatar.png<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">头像图片须放置在主题的/source/images/目录下</div><div class="line">### 搜索</div><div class="line">使用Sitemap插件 可方便管理员通知搜索引擎他们网站上有哪些可供抓取的网页，有助于让别人更好地通过搜索到自己的博客。</div><div class="line">1. sitemap安装配置 `npm install hexo-generator-sitemap --save`</div><div class="line"></div><div class="line">2. 修改站点配置文件</div></pre></td></tr></table></figure></p>
<h1 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h1><p>plugins:</p>
<ul>
<li>hexo-generator-sitemap<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">使用以下命令后，你可以在站点的/public目录下找到一个sitemap.xml文件，这个文件就是你的站点地图，里面包含你的站点的网页地址。</div></pre></td></tr></table></figure>
</li>
</ul>
<p>hexo clean<br>hexo g<br>```<br>提交sitemap到google参考如何向google提交sitemap</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 有两份主要的配置文件（_config.yml），一份位于站点根目录下，另一份位于主题目录下。为了描述方便，在以下说明中，将前者称为站点配置文件，后者称为主题配置文件。&lt;/p&gt;
&lt;p&gt;hexo的next主题个性化配置教程: &lt;a href=&quot;https://segmentfault.com/a/1190000009544924#articleHeader19&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/a/1190000009544924#articleHeader19&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;NexT主题安装&quot;&gt;&lt;a href=&quot;#NexT主题安装&quot; class=&quot;headerlink&quot; title=&quot;NexT主题安装&quot;&gt;&lt;/a&gt;NexT主题安装&lt;/h2&gt;&lt;h3 id=&quot;下载NexT主题&quot;&gt;&lt;a href=&quot;#下载NexT主题&quot; class=&quot;headerlink&quot; title=&quot;下载NexT主题&quot;&gt;&lt;/a&gt;下载NexT主题&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cd your-hexo-site`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git clone https://github.com/iissnan/hexo-theme-next themes/next&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;修改站点配置文件&quot;&gt;&lt;a href=&quot;#修改站点配置文件&quot; class=&quot;headerlink&quot; title=&quot;修改站点配置文件&quot;&gt;&lt;/a&gt;修改站点配置文件&lt;/h3&gt;&lt;p&gt;修改站点配置文件_config.yml，找到以下部分&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Extensions&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;## Plugins: http://hexo.io/plugins/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;## Themes: http://hexo.io/themes/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;theme: landscape&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改为&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Extensions&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;## Plugins: http://hexo.io/plugins/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;## Themes: http://hexo.io/themes/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# theme: landscape&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;theme: next`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;至此，NexT主题就安装好了，非常方便，在Hexo中切换主题只需修改站点配置文件中theme属性来配置，想换就换。&lt;/p&gt;
&lt;h3 id=&quot;选择Scheme&quot;&gt;&lt;a href=&quot;#选择Scheme&quot; class=&quot;headerlink&quot; title=&quot;选择Scheme&quot;&gt;&lt;/a&gt;选择Scheme&lt;/h3&gt;&lt;p&gt;NexT 通过 Scheme 提供主题中的主题。Mist是NexT主题自带的主题，可以通过修改主题配置文件中的scheme属性获得。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Schemes&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;scheme: Mist  #去掉默认的注释即可切换为Mist主题&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="应用工具学习" scheme="http://yoursite.com/categories/%E5%BA%94%E7%94%A8%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Next" scheme="http://yoursite.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>flex布局学习</title>
    <link href="http://yoursite.com/2017/09/12/flex%E5%B8%83%E5%B1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/09/12/flex布局学习/</id>
    <published>2017-09-12T07:11:25.000Z</published>
    <updated>2017-09-13T07:06:20.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flex布局基础知识"><a href="#flex布局基础知识" class="headerlink" title="flex布局基础知识"></a>flex布局基础知识</h2><p><img src="http://ojvil4eq9.bkt.clouddn.com/17-9-12/53121912.jpg" alt=""></p>
<ul>
<li>main axis(主轴): Flex容器的主轴主要用来配置Flex项目。它不一定是水平，这主要取决于flex-direction属性</li>
<li>main-start|main-end(主轴起点|主轴终点): Flex项目的配置从容器的主轴起点开始,往主轴终点结束</li>
<li>main size(主轴方向长度):Flex项目的在主轴方向的宽度或高度就是项目的主轴长度，Flex项目的主轴长度属性是width或height属性，由哪一个对着主轴方向决定。</li>
<li>cross axis(侧轴):与主轴垂直的轴称作侧轴，是侧轴方向的延伸。</li>
<li>cross-start | cross-end(侧轴起点|侧轴终点):伸缩行的配置从容器的侧轴起点边开始，往侧轴终点边结束。</li>
<li>cross size(侧轴方向长度):Flex项目的在侧轴方向的宽度或高度就是项目的侧轴长度，Flex项目的侧轴长度属性是width或height属性，由哪一个对着侧轴方向决定。</li>
</ul>
<h2 id="Flex容器属性-主容器"><a href="#Flex容器属性-主容器" class="headerlink" title="Flex容器属性(主容器)"></a>Flex容器属性(主容器)</h2><ol>
<li><code>display</code>: 定义一个Flex容器，根据其取的值来决定是内联还是块。Flex容器会为其内容建立新的伸缩格式化上下文。(定义成flex容器不等于定义成块级容器)</li>
<li><code>flex-direction</code>: 定义主轴方向，Flex项目在Flex容器中放置的方向<ul>
<li><code>row</code>(默认值): Flex项目从左向右排列</li>
<li><code>row-reverse</code>: 与row相反，Flex项目从右向左排列</li>
<li><code>column</code>: Flex项目从上向下排列</li>
<li><code>columne-reverse</code>: 与column相反，Flex项目从下向上排列</li>
</ul>
</li>
<li><code>flex-wrap</code>: 定义Flex项目是否多行显示<ul>
<li><code>nowrap</code>(默认值): 单行显示，从左向右排列</li>
<li><code>wrap</code>: 多行显示，从左向右排列</li>
<li><code>wrap-reverse</code>: 多行显示，从右向左排列</li>
</ul>
</li>
<li><code>flex-flow</code>: <code>flex-direction</code>和<code>flex-wrap</code>属性的缩写 默认值是row nowrap<a id="more"></a>  </li>
<li><code>justify-content</code>: 定义主轴方向的对齐方式<ul>
<li><code>flex-start</code>(默认值): Flex项目主轴起点对齐，伸缩项目向一行的起始位置靠齐。该行的第一个伸缩项目在主轴起点边的外边距与该行在主轴起点的边对齐，同时所有后续的伸缩项目与其前一个项目对齐</li>
<li><code>flex-end</code>: Flex项目主轴终点对齐，伸缩项目向一行的结束位置靠齐。该行的最后一个伸缩项目在主轴终点边的外边距与该行在主轴终点的边对齐，同时所有前面的伸缩项目与其后一个项目对齐。</li>
<li><code>center</code>: Flex项目主轴居中对齐，伸缩项目向一行的中间位置靠齐。该行的伸缩项目将相互对齐并在行中居中对齐，同时第一个项目与该行在主轴起点的边的距离等同与最后一个项目与该行在主轴终点的边的距离（如果剩余空间是负数，则保持两端溢出的长度相等）。著作权归作者所有。</li>
<li><code>space-between</code>: Flex项目主轴两端对齐，伸缩项目会平均地分布在行里。如果剩余空间是负数，或该行只有一个伸缩项目，则此值等效于flex-start。在其它情况下，第一个项目在主轴起点边的外边距会与该行在主轴起点的边对齐，同时最后一个项目在主轴终点边的外边距与该行在主轴终点的边对齐，而剩下的伸缩项目在确保两两之间的空白空间相等下平均分布。</li>
<li><code>space-around</code>: Flex项目主轴平均分布对齐，伸缩项目会平均地分布在行里，两端保留一半的空间。如果剩余空间是负数，或该行只有一个伸缩项目，则该值等效于center。在其它情况下，伸缩项目在确保两两之间的空白空间相等，同时第一个元素前的空间以及最后一个元素后的空间为其他空白空间的一半下平均分布。</li>
</ul>
</li>
<li><code>align-items</code>: 定义侧轴方向的对其方式<ul>
<li><code>flex-start</code>: flex项目侧轴起点对齐，伸缩项目在侧轴起点边的外边距紧靠住该行在侧轴起始的边</li>
<li><code>flex-end</code>: flex项目侧轴终点对齐,伸缩项目在侧轴终点边的外边距靠住该行在侧轴终点的边 。</li>
<li><code>center</code>: flex项目侧轴居中对齐，伸缩项目的外边距盒在该行的侧轴上居中放置。（如果伸缩行的尺寸小于伸缩项目，则伸缩项目会向两个方向溢出相同的量）。</li>
<li><code>baseline</code>: flex项目侧轴基线对齐，如果伸缩项目的行内轴与侧轴为同一条，则该值和flex-start等效。其它情况下，该值将参与基线对齐。所有参与该对齐方式的伸缩项目将按下列方式排列：首先将这些伸缩项目的基线进行对齐，随后其中基线至侧轴起点边的外边距距离最长的那个项目将紧靠住该行在侧轴起点的边。</li>
<li><code>stretch</code>: 如果侧轴长度属性的值为auto，则此值会使项目的外边距盒的尺寸在遵照min/max-width/height属性的限制下尽可能接近所在行的尺寸。    </li>
</ul>
</li>
<li><code>align-content</code>: 定义Flex项目多行的对齐方式，本属性在只有一行的伸缩容器上没有效果<ul>
<li><code>flex-start</code>: 各行向伸缩容器的起点位置堆叠。伸缩容器中第一行在侧轴起点的边会紧靠住伸缩容器在侧轴起点的边，之后的每一行都紧靠住前面一行。</li>
<li><code>flex-end</code>:各行向伸缩容器的结束位置堆叠。伸缩容器中最后一行在侧轴终点的边会紧靠住该伸缩容器在侧轴终点的边，之前的每一行都紧靠住后面一行。</li>
<li><code>center</code>:各行向伸缩容器的中间位置堆叠。各行两两紧靠住同时在伸缩容器中居中对齐，保持伸缩容器在侧轴起点边的内容边和第一行之间的距离与该容器在侧轴终点边的内容边与第最后一行之间的距离相等。（如果剩下的空间是负数，则行的堆叠会向两个方向溢出的相等距离。）</li>
<li><code>space-between</code>:各行在伸缩容器中平均分布。如果剩余的空间是负数或伸缩容器中只有一行，该值等效于flex-start。在其它情况下，第一行在侧轴起点的边会紧靠住伸缩容器在侧轴起点边的内容边，最后一行在侧轴终点的边会紧靠住伸缩容器在侧轴终点的内容边，剩余的行在保持两两之间的空间相等的状况下排列。</li>
<li><code>space-around</code>:各行在伸缩容器中平均分布，在两边各有一半的空间。如果剩余的空间是负数或伸缩容器中只有一行，该值等效于center。在其它情况下，各行会在保持两两之间的空间相等，同时第一行前面及最后一行后面的空间是其他空间的一半的状况下排列。</li>
<li><code>stretch</code>(默认值):各行将会伸展以占用剩余的空间。如果剩余的空间是负数，该值等效于flex-start。在其它情况下，剩余空间被所有行平分，扩大各行的侧轴尺寸。</li>
</ul>
</li>
</ol>
<h2 id="Flex项目属性"><a href="#Flex项目属性" class="headerlink" title="Flex项目属性"></a>Flex项目属性</h2><ol>
<li><p><code>order</code>:默认值是0，Flex项目是按文档源的流顺序排列,根据order重新排序伸缩项目。有最小（负值最大）order的伸缩项目排在第一个。若有多个项目有相同的order值，这些项目照文件顺序排。这个步骤影响了伸缩项目生盒树成的盒子的顺序，也影响了后面的演算法如何处理各项目。著作权归作者所有。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">    order:&lt;number&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>flex-grow</code>: 定义一个Flex项目的扩大比例。它接受一个没有单位的值作为一个比例。它可以使用Flex项目完全占用Flex容器可用的空间。如果所有Flex项目的flex-grow设置为1时，表示Flex容器中的Flex项目具有相等的尺寸。如果你给其中一个Flex项目设置flex-grow的值为2，那么这个Flex项目的尺寸将是其他Flex项目两倍（其他Flex项目的flex-grow值为1）。flex-grow取负值将失效。</p>
</li>
<li><code>flec-shrink</code>: 可以定义Flex项目的缩小比例,flex-shrink取负值将失效。</li>
<li><code>flex-basis</code>: 定义主轴方向的长度(width|height)。定义了Flex项目在分配Flex容器剩余空间之前的一个默认尺寸。main-size值使它具有匹配的宽度或高度，不过都需要取决于flex-direction的值。如果设置为0，内容不在考虑周围额外空间。如果设置为auto，额外空间会基于flex-grow值做分布。</li>
<li><code>flex</code>: 是flex-grow，flex-shrink和flex-basis三个属性的缩写。第二个和第三个参数(flex-shrink和flex-basis)是可选值。其默认值是0 1 auto。</li>
<li><code>align-self</code>: 用来在单独的伸缩项目上覆写默认的对齐方式。（对于匿名伸缩项目，align-self的值永远与其关联的伸缩容器的align-items的值相同)。<ul>
<li><code>flex-start</code>: 伸缩项目在侧轴起点边的外边距紧靠住该行在侧轴起始的边。</li>
<li><code>flex-end</code>: 伸缩项目在侧轴终点边的外边距靠住该行在侧轴终点的边 。</li>
<li><code>center</code>: 伸缩项目的外边距盒在该行的侧轴上居中放置。（如果伸缩行的尺寸小于伸缩项目，则伸缩项目会向两个方向溢出相同的量）。</li>
<li><code>baseline</code>:如果伸缩项目的行内轴与侧轴为同一条，则该值和flex-start等效。其它情况下，该值将参与基线对齐。所有参与该对齐方式的伸缩项目将按下列方式排列：首先将这些伸缩项目的基线进行对齐，随后其中基线至侧轴起点边的外边距距离最长的那个项目将紧靠住该行在侧轴起点的边。</li>
<li><code>stretch</code>:如果侧轴长度属性的值为auto，则此值会使项目的外边距盒的尺寸在遵照min/max-width/height属性的限制下尽可能接近所在行的尺寸。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123; </div><div class="line">        align-self: auto | flex-start | flex-end | center | baseline | stretch; </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;flex布局基础知识&quot;&gt;&lt;a href=&quot;#flex布局基础知识&quot; class=&quot;headerlink&quot; title=&quot;flex布局基础知识&quot;&gt;&lt;/a&gt;flex布局基础知识&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://ojvil4eq9.bkt.clouddn.com/17-9-12/53121912.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;main axis(主轴): Flex容器的主轴主要用来配置Flex项目。它不一定是水平，这主要取决于flex-direction属性&lt;/li&gt;
&lt;li&gt;main-start|main-end(主轴起点|主轴终点): Flex项目的配置从容器的主轴起点开始,往主轴终点结束&lt;/li&gt;
&lt;li&gt;main size(主轴方向长度):Flex项目的在主轴方向的宽度或高度就是项目的主轴长度，Flex项目的主轴长度属性是width或height属性，由哪一个对着主轴方向决定。&lt;/li&gt;
&lt;li&gt;cross axis(侧轴):与主轴垂直的轴称作侧轴，是侧轴方向的延伸。&lt;/li&gt;
&lt;li&gt;cross-start | cross-end(侧轴起点|侧轴终点):伸缩行的配置从容器的侧轴起点边开始，往侧轴终点边结束。&lt;/li&gt;
&lt;li&gt;cross size(侧轴方向长度):Flex项目的在侧轴方向的宽度或高度就是项目的侧轴长度，Flex项目的侧轴长度属性是width或height属性，由哪一个对着侧轴方向决定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Flex容器属性-主容器&quot;&gt;&lt;a href=&quot;#Flex容器属性-主容器&quot; class=&quot;headerlink&quot; title=&quot;Flex容器属性(主容器)&quot;&gt;&lt;/a&gt;Flex容器属性(主容器)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;display&lt;/code&gt;: 定义一个Flex容器，根据其取的值来决定是内联还是块。Flex容器会为其内容建立新的伸缩格式化上下文。(定义成flex容器不等于定义成块级容器)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-direction&lt;/code&gt;: 定义主轴方向，Flex项目在Flex容器中放置的方向&lt;ul&gt;
&lt;li&gt;&lt;code&gt;row&lt;/code&gt;(默认值): Flex项目从左向右排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;row-reverse&lt;/code&gt;: 与row相反，Flex项目从右向左排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column&lt;/code&gt;: Flex项目从上向下排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;columne-reverse&lt;/code&gt;: 与column相反，Flex项目从下向上排列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-wrap&lt;/code&gt;: 定义Flex项目是否多行显示&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nowrap&lt;/code&gt;(默认值): 单行显示，从左向右排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrap&lt;/code&gt;: 多行显示，从左向右排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrap-reverse&lt;/code&gt;: 多行显示，从右向左排列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-flow&lt;/code&gt;: &lt;code&gt;flex-direction&lt;/code&gt;和&lt;code&gt;flex-wrap&lt;/code&gt;属性的缩写 默认值是row nowrap
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="flex" scheme="http://yoursite.com/tags/flex/"/>
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>前端知识体系整理</title>
    <link href="http://yoursite.com/2017/09/12/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2017/09/12/前端知识体系整理/</id>
    <published>2017-09-12T05:55:49.000Z</published>
    <updated>2017-09-13T06:47:36.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端知识分类"><a href="#前端知识分类" class="headerlink" title="前端知识分类"></a>前端知识分类</h2><ul>
<li>HTML</li>
<li>CSS</li>
<li>DOM和BOM</li>
<li>ECMAScript</li>
<li>前端构建生态</li>
<li>模块化、框架、组件</li>
<li>Node.js</li>
<li>应用工具学习</li>
<li>canvas</li>
<li>HTTP协议</li>
<li>浏览器基础</li>
<li>Photoshop与切图</li>
</ul>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ol>
<li>meta内容与设置</li>
<li>一般常用标签</li>
<li>HTML5新增语义化标签</li>
<li>HTML常用属性</li>
<li>搜索引擎优化<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2></li>
<li>css常用属性</li>
<li>css层叠概念</li>
<li>css选择器和优先级</li>
<li>盒子模型</li>
<li>css布局方式</li>
<li>编译工具less和sass</li>
<li>css实现响应式：利用媒体查询media query</li>
<li>css移动端开发：rem和em的原理和实现</li>
<li>css动画及动画库的使用</li>
<li>css的UI框架<ul>
<li>bootstrap</li>
<li>基于vue框架-PC端elm框架</li>
<li>基于vue框架-移动端vux框架</li>
</ul>
</li>
</ol>
<h2 id="DOM和BOM"><a href="#DOM和BOM" class="headerlink" title="DOM和BOM"></a>DOM和BOM</h2><ol>
<li>DOM对象document</li>
<li>DOMAPI操作</li>
<li>BOM对象的使用<a id="more"></a>
</li>
</ol>
<h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><ol>
<li>ECMAScript基本语法</li>
<li>内置对象：RegExp、Math、Date、Error、Functio、Arguments、</li>
<li>AJAX原理与实现</li>
<li>面向对象与继承</li>
<li>原型和原型链</li>
<li>作用域和作用域链</li>
<li>执行上下文：由变量对象、this、作用域链组成</li>
<li>函数闭包使用和优缺点</li>
<li>ES6新增语法和特性</li>
</ol>
<h2 id="构建生态"><a href="#构建生态" class="headerlink" title="构建生态"></a>构建生态</h2><ul>
<li>npm、yarm包管理工具</li>
<li>gulp、webpack开发打包工具</li>
</ul>
<h2 id="模块化、框架、组件"><a href="#模块化、框架、组件" class="headerlink" title="模块化、框架、组件"></a>模块化、框架、组件</h2><ul>
<li>JQuery、zepto库的使用原理及插件开发</li>
<li>模块化规范：commonJS、AMD规范(RequireJS)和CMD规范(SeaJS)、ES6模块化规范</li>
<li>MVC、MVVM思想</li>
<li>双向数据绑定</li>
<li>Vue框架的使用原理及组件开发</li>
<li>React框架</li>
</ul>
<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><ol>
<li>HTTP协议内容：HTTP1.0、HTTP1.1、HTTP2.0</li>
<li>HTTP请求过程</li>
<li>HTTP缓存与状态码判断过程</li>
<li>浏览器跨域问题及处理方式</li>
</ol>
<h2 id="浏览器基础"><a href="#浏览器基础" class="headerlink" title="浏览器基础"></a>浏览器基础</h2><ol>
<li>浏览器的组成<ul>
<li>用户界面：用户地址栏、前进后退按钮</li>
<li>浏览器引擎：浏览器指令解析模块</li>
<li>持久化存储：localstorage、webSQL、indexDb、cookie</li>
<li>UI后端：浏览器默认控件库</li>
<li>网络模块： 浏览器向服务器发送请求模块</li>
<li>JS解析引擎</li>
<li>浏览器渲染引擎(内核)</li>
</ul>
</li>
</ol>
<h2 id="Photoshop与切图"><a href="#Photoshop与切图" class="headerlink" title="Photoshop与切图"></a>Photoshop与切图</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前端知识分类&quot;&gt;&lt;a href=&quot;#前端知识分类&quot; class=&quot;headerlink&quot; title=&quot;前端知识分类&quot;&gt;&lt;/a&gt;前端知识分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;DOM和BOM&lt;/li&gt;
&lt;li&gt;ECMAScript&lt;/li&gt;
&lt;li&gt;前端构建生态&lt;/li&gt;
&lt;li&gt;模块化、框架、组件&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;应用工具学习&lt;/li&gt;
&lt;li&gt;canvas&lt;/li&gt;
&lt;li&gt;HTTP协议&lt;/li&gt;
&lt;li&gt;浏览器基础&lt;/li&gt;
&lt;li&gt;Photoshop与切图&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;meta内容与设置&lt;/li&gt;
&lt;li&gt;一般常用标签&lt;/li&gt;
&lt;li&gt;HTML5新增语义化标签&lt;/li&gt;
&lt;li&gt;HTML常用属性&lt;/li&gt;
&lt;li&gt;搜索引擎优化&lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;css常用属性&lt;/li&gt;
&lt;li&gt;css层叠概念&lt;/li&gt;
&lt;li&gt;css选择器和优先级&lt;/li&gt;
&lt;li&gt;盒子模型&lt;/li&gt;
&lt;li&gt;css布局方式&lt;/li&gt;
&lt;li&gt;编译工具less和sass&lt;/li&gt;
&lt;li&gt;css实现响应式：利用媒体查询media query&lt;/li&gt;
&lt;li&gt;css移动端开发：rem和em的原理和实现&lt;/li&gt;
&lt;li&gt;css动画及动画库的使用&lt;/li&gt;
&lt;li&gt;css的UI框架&lt;ul&gt;
&lt;li&gt;bootstrap&lt;/li&gt;
&lt;li&gt;基于vue框架-PC端elm框架&lt;/li&gt;
&lt;li&gt;基于vue框架-移动端vux框架&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;DOM和BOM&quot;&gt;&lt;a href=&quot;#DOM和BOM&quot; class=&quot;headerlink&quot; title=&quot;DOM和BOM&quot;&gt;&lt;/a&gt;DOM和BOM&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;DOM对象document&lt;/li&gt;
&lt;li&gt;DOMAPI操作&lt;/li&gt;
&lt;li&gt;BOM对象的使用
    
    </summary>
    
      <category term="知识体系" scheme="http://yoursite.com/categories/%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
    
      <category term="知识体系" scheme="http://yoursite.com/tags/%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6九————JS中的类</title>
    <link href="http://yoursite.com/2017/08/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E4%B9%9D%E2%80%94%E2%80%94JS%E4%B8%AD%E7%9A%84%E7%B1%BB/"/>
    <id>http://yoursite.com/2017/08/23/深入理解ES6九——JS中的类/</id>
    <published>2017-08-23T01:26:05.000Z</published>
    <updated>2017-09-13T06:33:42.416Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>vue脚手架vue-cli的学习二--自定义模块</title>
    <link href="http://yoursite.com/2017/08/22/vue%E8%84%9A%E6%89%8B%E6%9E%B6vue-cli%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%BA%8C-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2017/08/22/vue脚手架vue-cli的学习二-自定义模块/</id>
    <published>2017-08-22T03:51:39.000Z</published>
    <updated>2017-09-13T06:44:29.723Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="vue-cli" scheme="http://yoursite.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6十三</title>
    <link href="http://yoursite.com/2017/08/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E5%8D%81%E4%B8%89/"/>
    <id>http://yoursite.com/2017/08/12/深入理解ES6十三/</id>
    <published>2017-08-12T06:44:00.000Z</published>
    <updated>2017-09-13T07:02:41.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><ul>
<li>模块是自动运行在严格模式下并且没有办法退出运行的Javascript代码，在模块中创建的变量不会自动被添加到全局作用域</li>
<li>模块的两个特性：在模块顶部，this的值是undefined；模块不支持HTML风格的代码注释</li>
</ul>
<h1 id="模块的导入导出语法"><a href="#模块的导入导出语法" class="headerlink" title="模块的导入导出语法"></a>模块的导入导出语法</h1><ul>
<li><p>导出的基本语法：用<code>export</code>关键字将代码暴露给其他模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 导出数据</div><div class="line">export var color = &apos;red&apos;;</div><div class="line">export let name = &apos;tgb&apos;;</div><div class="line">export const magicNumber = 7;</div><div class="line"></div><div class="line">// 导出函数</div><div class="line">export function sum(num1,num2) &#123;</div><div class="line">    return num1 + num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>导入的基本语法：通过<code>import</code>关键字在另一个模块中访问，<code>import</code>语句的两个部分分别是，要导入的标识符和标识符应当从哪个模块导入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import &#123;identifierl,identifier2&#125; from &apos;./example.js&apos;//模块说明符</div><div class="line"></div><div class="line">// 导入多个绑定</div><div class="line">import &#123; sum, multiply, magicNumber&#125; from &apos;./example.js&apos;;</div><div class="line"></div><div class="line">// 导入整个模块</div><div class="line">import * as example from &apos;./expmple.js&apos; // 命名空间导入</div></pre></td></tr></table></figure>
</li>
<li><p>模块说明符的注意事项：Node.js遵循文件系统前缀区分本地文件和包的惯例，例如，<code>example</code>是一个包而<code>./example.js</code>是一个本地文件</p>
</li>
<li>从模块中导入绑定时，import后面使用的标识符，在该模块不能再次使用。</li>
<li>不管在<code>import</code>语句中把一个模块写了多少次，该模块只执行一次，导入模块的代码执行后，实例化过的模块被保存在内存中，只要另一个<code>import</code>语句引用它就可以重复使用它。</li>
</ul>
<h1 id="模块语法的限制"><a href="#模块语法的限制" class="headerlink" title="模块语法的限制"></a>模块语法的限制</h1><ul>
<li><code>export</code>和<code>import</code>的一个重要的限制是，它们必须在其他语句和函数之外使用，所以 必须在顶部使用<code>export</code>和<code>import</code>。</li>
<li>导入的绑定标识符是只读的，标识符只有在被导出的模块中可以修改，导入绑定的模块无法改变绑定值。<a id="more"></a>
</li>
</ul>
<h1 id="导出和导入时的重命名"><a href="#导出和导入时的重命名" class="headerlink" title="导出和导入时的重命名"></a>导出和导入时的重命名</h1><ul>
<li><p>可以用<code>as</code>关键字来改变导出时元素的名称</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function sum (num1,num2) &#123;</div><div class="line">    return num1 + num2;</div><div class="line">&#125;</div><div class="line">export &#123;sum as add&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>导入时改变名称</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import &#123;add as sum&#125; from &apos;./example.js&apos;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="模块的默认值"><a href="#模块的默认值" class="headerlink" title="模块的默认值"></a>模块的默认值</h1><ul>
<li>模块的默认值是指通过default关键字指定的单个变量，函数或类，只能为模块设置一个默认的导出值</li>
<li><p>导出默认值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export default function(num1,num2) &#123;</div><div class="line">    return num1 + num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>导入默认值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import sum from &apos;./example.js&apos; //导入默认值是不使用大括号</div></pre></td></tr></table></figure>
</li>
<li><p>导出默认值和非默认值:用逗号将默认的本地名称与大括号包裹的非默认值分割开，在import语句中，默认值必须排在非默认值前。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">export let color = &apos;red&apos;;</div><div class="line"></div><div class="line">export default function(num1,num2) &#123;</div><div class="line">   return num1 + num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 导入</div><div class="line">import sum, &#123; color &#125; from &apos;./example.js&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="浏览器模块说明符解析"><a href="#浏览器模块说明符解析" class="headerlink" title="浏览器模块说明符解析"></a>浏览器模块说明符解析</h1><ul>
<li>以<code>/</code>开头的解析从根目录开始。</li>
<li>以<code>./</code>开头的解析从当前目录开始。</li>
<li>以<code>../</code>开头的解析从父目录开始。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;模块是自动运行在严格模式下并且没有办法退出运行的Javascript代码，在模块中创建的变量不会自动被添加到全局作用域&lt;/li&gt;
&lt;li&gt;模块的两个特性：在模块顶部，this的值是undefined；模块不支持HTML风格的代码注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;模块的导入导出语法&quot;&gt;&lt;a href=&quot;#模块的导入导出语法&quot; class=&quot;headerlink&quot; title=&quot;模块的导入导出语法&quot;&gt;&lt;/a&gt;模块的导入导出语法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;导出的基本语法：用&lt;code&gt;export&lt;/code&gt;关键字将代码暴露给其他模块&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 导出数据&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export var color = &amp;apos;red&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export let name = &amp;apos;tgb&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export const magicNumber = 7;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 导出函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export function sum(num1,num2) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return num1 + num2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;导入的基本语法：通过&lt;code&gt;import&lt;/code&gt;关键字在另一个模块中访问，&lt;code&gt;import&lt;/code&gt;语句的两个部分分别是，要导入的标识符和标识符应当从哪个模块导入&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import &amp;#123;identifierl,identifier2&amp;#125; from &amp;apos;./example.js&amp;apos;//模块说明符&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 导入多个绑定&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import &amp;#123; sum, multiply, magicNumber&amp;#125; from &amp;apos;./example.js&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 导入整个模块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import * as example from &amp;apos;./expmple.js&amp;apos; // 命名空间导入&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模块说明符的注意事项：Node.js遵循文件系统前缀区分本地文件和包的惯例，例如，&lt;code&gt;example&lt;/code&gt;是一个包而&lt;code&gt;./example.js&lt;/code&gt;是一个本地文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;从模块中导入绑定时，import后面使用的标识符，在该模块不能再次使用。&lt;/li&gt;
&lt;li&gt;不管在&lt;code&gt;import&lt;/code&gt;语句中把一个模块写了多少次，该模块只执行一次，导入模块的代码执行后，实例化过的模块被保存在内存中，只要另一个&lt;code&gt;import&lt;/code&gt;语句引用它就可以重复使用它。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;模块语法的限制&quot;&gt;&lt;a href=&quot;#模块语法的限制&quot; class=&quot;headerlink&quot; title=&quot;模块语法的限制&quot;&gt;&lt;/a&gt;模块语法的限制&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;和&lt;code&gt;import&lt;/code&gt;的一个重要的限制是，它们必须在其他语句和函数之外使用，所以 必须在顶部使用&lt;code&gt;export&lt;/code&gt;和&lt;code&gt;import&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;导入的绑定标识符是只读的，标识符只有在被导出的模块中可以修改，导入绑定的模块无法改变绑定值。
    
    </summary>
    
      <category term="模块化" scheme="http://yoursite.com/categories/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="ES6模块化" scheme="http://yoursite.com/tags/ES6%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>国际化——Vue-i18n的使用</title>
    <link href="http://yoursite.com/2017/08/12/%E5%9B%BD%E9%99%85%E5%8C%96%E2%80%94%E2%80%94Vue-i18n%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/08/12/国际化——Vue-i18n的使用/</id>
    <published>2017-08-12T03:30:07.000Z</published>
    <updated>2017-09-13T07:01:46.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-i18n安装"><a href="#Vue-i18n安装" class="headerlink" title="Vue-i18n安装"></a>Vue-i18n安装</h2><ul>
<li><code>npm install vue-i18n --save</code></li>
</ul>
<h2 id="Vue-i18n的使用"><a href="#Vue-i18n的使用" class="headerlink" title="Vue-i18n的使用"></a>Vue-i18n的使用</h2><ul>
<li>在入口<code>main.js</code>文件配置使用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import VueI18n from &apos;vue-i18n&apos;</div><div class="line"></div><div class="line">Vue.use(VueI18n);</div><div class="line">/*---------基本使用-----------*/</div><div class="line">const i18n = new VueI18n(&#123;</div><div class="line">  locale: &apos;CN&apos;,    // 语言标识</div><div class="line">  messages : &#123;</div><div class="line">    en: &#123;</div><div class="line">      message: &#123;</div><div class="line">        hello: &apos;hello world&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    cn: &#123;</div><div class="line">      message: &#123;</div><div class="line">        hello: &apos;你好、世界&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">/*---------使用语言包-----------*/</div><div class="line">const i18n = new VueI18n(&#123;</div><div class="line">  locale: &apos;CN&apos;,    // 语言标识</div><div class="line">  messages: &#123;</div><div class="line">    &apos;CN&apos;: require(&apos;./assets/common/lang/cn&apos;),   // 中文语言包</div><div class="line">    &apos;EN&apos;: require(&apos;./assets/common/lang/en&apos;)    // 英文语言包</div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line"></div><div class="line">/*---------语言包内部语法star-----------*/</div><div class="line">export const  message = &#123;</div><div class="line">      language:&apos;语言&apos;,</div><div class="line">      hello: &apos;你好,世界&apos;</div><div class="line">&#125;</div><div class="line">/*---------语言包内部语法end-----------*/</div><div class="line"></div><div class="line">/*---------挂载全局使用-----------*/</div><div class="line">new Vue(&#123;</div><div class="line">  el: &apos;#app&apos;,</div><div class="line">  i18n,</div><div class="line">  router,</div><div class="line">  template: &apos;&lt;App/&gt;&apos;,</div><div class="line">  components: &#123; App &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">/*---------vue组件模板的使用-----------*/</div><div class="line"> &lt;template&gt;</div><div class="line">        &lt;p&gt;&#123;&#123; $t(&quot;message.hello&quot;) &#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;/template&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="单独组件的使用"><a href="#单独组件的使用" class="headerlink" title="单独组件的使用"></a>单独组件的使用</h2><ul>
<li>在单个vue组件中使用，要用到i18n自定义块，需要配置webpack文件<code>webpack.base.conf.js</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.vue$/,</div><div class="line">        loader: &apos;vue-loader&apos;,</div><div class="line">        options: &#123;</div><div class="line">          loaders: &#123;</div><div class="line">            // you need to specify `i18n` loaders key with `vue-i18n-loader` (https://github.com/kazupon/vue-i18n-loader)</div><div class="line">            i18n: &apos;@kazupon/vue-i18n-loader&apos;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      // ...</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>示例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;i18n&gt;</div><div class="line">&#123;</div><div class="line">  &quot;en&quot;: &#123;</div><div class="line">    &quot;hello&quot;: &quot;hello world!&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;ja&quot;: &#123;</div><div class="line">    &quot;hello&quot;: &quot;你好,世界！&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/i18n&gt;</div><div class="line"></div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;label for=&quot;locale&quot;&gt;locale&lt;/label&gt;</div><div class="line">    &lt;select v-model=&quot;locale&quot;&gt;</div><div class="line">      &lt;option&gt;en&lt;/option&gt;</div><div class="line">      &lt;option&gt;ja&lt;/option&gt;</div><div class="line">    &lt;/select&gt;</div><div class="line">    &lt;p&gt;message: &#123;&#123; $t(&apos;hello&apos;) &#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  name: &apos;app&apos;,</div><div class="line">  data () &#123; return &#123; locale: &apos;en&apos; &#125; &#125;,</div><div class="line">  watch: &#123;</div><div class="line">    locale (val) &#123;</div><div class="line">      this.$i18n.locale = val</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vue-i18n安装&quot;&gt;&lt;a href=&quot;#Vue-i18n安装&quot; class=&quot;headerlink&quot; title=&quot;Vue-i18n安装&quot;&gt;&lt;/a&gt;Vue-i18n安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install vue-i18n --save&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Vue-i18n的使用&quot;&gt;&lt;a href=&quot;#Vue-i18n的使用&quot; class=&quot;headerlink&quot; title=&quot;Vue-i18n的使用&quot;&gt;&lt;/a&gt;Vue-i18n的使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在入口&lt;code&gt;main.js&lt;/code&gt;文件配置使用&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import Vue from &amp;apos;vue&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import VueI18n from &amp;apos;vue-i18n&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.use(VueI18n);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------基本使用-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const i18n = new VueI18n(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  locale: &amp;apos;CN&amp;apos;,    // 语言标识&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  messages : &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    en: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      message: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hello: &amp;apos;hello world&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    cn: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      message: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hello: &amp;apos;你好、世界&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------使用语言包-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const i18n = new VueI18n(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  locale: &amp;apos;CN&amp;apos;,    // 语言标识&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  messages: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;CN&amp;apos;: require(&amp;apos;./assets/common/lang/cn&amp;apos;),   // 中文语言包&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;EN&amp;apos;: require(&amp;apos;./assets/common/lang/en&amp;apos;)    // 英文语言包&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------语言包内部语法star-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export const  message = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      language:&amp;apos;语言&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      hello: &amp;apos;你好,世界&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------语言包内部语法end-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------挂载全局使用-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;new Vue(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  el: &amp;apos;#app&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  i18n,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  router,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  template: &amp;apos;&amp;lt;App/&amp;gt;&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  components: &amp;#123; App &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------vue组件模板的使用-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;lt;template&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;p&amp;gt;&amp;#123;&amp;#123; $t(&amp;quot;message.hello&amp;quot;) &amp;#125;&amp;#125;&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/template&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="组件" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Vue-i18" scheme="http://yoursite.com/tags/Vue-i18/"/>
    
      <category term="国际化" scheme="http://yoursite.com/tags/%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6六</title>
    <link href="http://yoursite.com/2017/08/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E5%85%AD/"/>
    <id>http://yoursite.com/2017/08/06/深入理解ES6六/</id>
    <published>2017-08-06T09:15:41.000Z</published>
    <updated>2017-09-13T06:33:54.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><ul>
<li>ES6新增的数据类型<code>Symbol</code></li>
<li><p>创建Symbol：通过去全局的<code>Symbol</code>函数创建一个<code>Symbol</code>，<code>Symbol</code>函数接受一个可选参数，用于添加一段文本描述即将创建的<code>Symbol</code>,方便阅读和调试Symbol程序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">let firstName = Symbol(&apos;first name&apos;);</div><div class="line">    let person = &#123;&#125;;</div><div class="line"></div><div class="line">    person[firstName] = &apos;Nicholas&apos;;</div><div class="line"></div><div class="line">    console.log(&apos;first name&apos; in person); //false</div><div class="line">    console.log(person[firstName]); //&apos;Nicholas&apos;</div><div class="line">    console.log(firstName); //&apos;Symbol(first name)&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>ES6扩展了<code>typeof</code>操作符，支持返回<code>Symbol</code>,可以用typeof来检测变量是否为<code>Symbol</code>类型.</p>
</li>
</ul>
<h2 id="Symbol共享体系"><a href="#Symbol共享体系" class="headerlink" title="Symbol共享体系"></a>Symbol共享体系</h2><ul>
<li><p>ES6提供了一个可以随时访问的全局Symbol注册表,如果要创建一个可共享的Symbol,要使用Symbol.for()方法，该方法只接受一个参数，就是即将创建的Symbol的字符串标识符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let uid = Symbol.for(&apos;uid&apos;);</div><div class="line">let object = &#123;&#125;;</div><div class="line"></div><div class="line">object[uid]=&apos;12345&apos;;</div><div class="line"></div><div class="line">console.log(ojbect[uid]);</div><div class="line">console.log(uid);</div></pre></td></tr></table></figure>
</li>
<li><p>Symbol.for()方法首先在全局Symbol注册表中搜索键为’uid’的Symbol是否存在，如果存在，直接返回已有的Symbol；否则创建一个新的Symbol，并使用这个键在Symbol全局注册表中注册，随即返回新创建的Symbol</p>
<a id="more"></a></li>
<li>可以使用<code>Symbol.keyFor()</code>方法在Symbol全局注册表中检索与Symbol有关的键<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let uid = Symbol.for(&apos;uid&apos;);</div><div class="line">console.log(Symbol.keyFor(uid)); //&apos;uid&apos;</div><div class="line"></div><div class="line">let uid3 = Symbol(&apos;uid&apos;);</div><div class="line">console.log(Symbol.keyFor(uid3)) //undefined</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Symbol属性检索"><a href="#Symbol属性检索" class="headerlink" title="Symbol属性检索"></a>Symbol属性检索</h2><ul>
<li>ES6中新增<code>Object.getOwnPropertySymbols()</code>方法来检索对象中的Symbol属性，返回值是一个包含所有Symbol自由属性的数组<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let uid = Symbol.for(&apos;uid&apos;);</div><div class="line">let object = &#123;</div><div class="line">    [uid]: &apos;12345&apos;</div><div class="line">&#125;;</div><div class="line">let symbols = object.getOwnPropertySymbols(object);</div><div class="line"></div><div class="line">console.log(symbols.length);               //1</div><div class="line">console.log(symbols[0]);                   //&apos;Symbol(uid)&apos;</div><div class="line">console.log(object[symbols[0]])            //&apos;12345&apos;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Symbol&quot;&gt;&lt;a href=&quot;#Symbol&quot; class=&quot;headerlink&quot; title=&quot;Symbol&quot;&gt;&lt;/a&gt;Symbol&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ES6新增的数据类型&lt;code&gt;Symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建Symbol：通过去全局的&lt;code&gt;Symbol&lt;/code&gt;函数创建一个&lt;code&gt;Symbol&lt;/code&gt;，&lt;code&gt;Symbol&lt;/code&gt;函数接受一个可选参数，用于添加一段文本描述即将创建的&lt;code&gt;Symbol&lt;/code&gt;,方便阅读和调试Symbol程序&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let firstName = Symbol(&amp;apos;first name&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    let person = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    person[firstName] = &amp;apos;Nicholas&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(&amp;apos;first name&amp;apos; in person); //false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(person[firstName]); //&amp;apos;Nicholas&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(firstName); //&amp;apos;Symbol(first name)&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ES6扩展了&lt;code&gt;typeof&lt;/code&gt;操作符，支持返回&lt;code&gt;Symbol&lt;/code&gt;,可以用typeof来检测变量是否为&lt;code&gt;Symbol&lt;/code&gt;类型.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Symbol共享体系&quot;&gt;&lt;a href=&quot;#Symbol共享体系&quot; class=&quot;headerlink&quot; title=&quot;Symbol共享体系&quot;&gt;&lt;/a&gt;Symbol共享体系&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ES6提供了一个可以随时访问的全局Symbol注册表,如果要创建一个可共享的Symbol,要使用Symbol.for()方法，该方法只接受一个参数，就是即将创建的Symbol的字符串标识符&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let uid = Symbol.for(&amp;apos;uid&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let object = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;object[uid]=&amp;apos;12345&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(ojbect[uid]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(uid);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Symbol.for()方法首先在全局Symbol注册表中搜索键为’uid’的Symbol是否存在，如果存在，直接返回已有的Symbol；否则创建一个新的Symbol，并使用这个键在Symbol全局注册表中注册，随即返回新创建的Symbol&lt;/p&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="Symbol" scheme="http://yoursite.com/tags/Symbol/"/>
    
  </entry>
  
</feed>
