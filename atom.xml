<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汤国斌的博客</title>
  <subtitle>学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-13T09:03:07.601Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>汤国斌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Next主体配置</title>
    <link href="http://yoursite.com/2017/09/13/Next%E4%B8%BB%E4%BD%93%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/09/13/Next主体配置/</id>
    <published>2017-09-13T08:43:05.000Z</published>
    <updated>2017-09-13T09:03:07.601Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 有两份主要的配置文件（_config.yml），一份位于站点根目录下，另一份位于主题目录下。为了描述方便，在以下说明中，将前者称为站点配置文件，后者称为主题配置文件。</p>
<p>hexo的next主题个性化配置教程: <a href="https://segmentfault.com/a/1190000009544924#articleHeader19" target="_blank" rel="external">https://segmentfault.com/a/1190000009544924#articleHeader19</a></p>
<h2 id="NexT主题安装"><a href="#NexT主题安装" class="headerlink" title="NexT主题安装"></a>NexT主题安装</h2><h3 id="下载NexT主题"><a href="#下载NexT主题" class="headerlink" title="下载NexT主题"></a>下载NexT主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd your-hexo-site`</div><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<h3 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h3><p>修改站点配置文件_config.yml，找到以下部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: http://hexo.io/plugins/</div><div class="line">## Themes: http://hexo.io/themes/</div><div class="line">theme: landscape</div></pre></td></tr></table></figure></p>
<p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: http://hexo.io/plugins/</div><div class="line">## Themes: http://hexo.io/themes/</div><div class="line"># theme: landscape</div><div class="line">theme: next`</div></pre></td></tr></table></figure></p>
<p>至此，NexT主题就安装好了，非常方便，在Hexo中切换主题只需修改站点配置文件中theme属性来配置，想换就换。</p>
<h3 id="选择Scheme"><a href="#选择Scheme" class="headerlink" title="选择Scheme"></a>选择Scheme</h3><p>NexT 通过 Scheme 提供主题中的主题。Mist是NexT主题自带的主题，可以通过修改主题配置文件中的scheme属性获得。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Schemes</div><div class="line">scheme: Mist  #去掉默认的注释即可切换为Mist主题</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h2><p>NexT主题菜单设置，用于设置博客上方导航栏，在主题配置文件中修改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /                       #主页</div><div class="line">  categories: /categories	#分类页（需手动创建）</div><div class="line">  #about: /about		#关于页面（需手动创建）</div><div class="line">  archives: /archives		#归档页</div><div class="line">  tags: /tags			#标签页（需手动创建）</div><div class="line">  #commonweal: /404.html        #公益 404 （需手动创建）</div></pre></td></tr></table></figure></p>
<p>只是在menu选项中设置还不能让标签页面、分类页面生效，需要我们手动创建</p>
<h3 id="标签页面"><a href="#标签页面" class="headerlink" title="标签页面"></a>标签页面</h3><ol>
<li>运行以下命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page &quot;tags&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>同时，在/source目录下会生成一个tags文件夹，里面包含一个index.md文件</p>
<ol>
<li><p>修改/source/tags目录下的index.md文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: tags</div><div class="line">date: 2015-09-29 14:37:02</div><div class="line">type: &quot;tags&quot;</div><div class="line">---</div></pre></td></tr></table></figure>
</li>
<li><p>修改主题配置文件<br>去掉tags的注释</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /                       #主页</div><div class="line">  categories: /categories	#分类页（需手动创建）</div><div class="line">  #about: /about		#关于页面（需手动创建）</div><div class="line">  archives: /archives		#归档页</div><div class="line">  tags: /tags			#标签页（需手动创建）</div><div class="line">  #commonweal: /404.html        #公益 404 （需手动创建）</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="分类页面"><a href="#分类页面" class="headerlink" title="分类页面"></a>分类页面</h3><ol>
<li><p>运行以下命令 <code>hexo new page &quot;categories&quot;</code><br>同时，在/source目录下会生成一个categories文件夹，里面包含一个index.md文件</p>
</li>
<li><p>修改/source/categories目录下的index.md文件</p>
</li>
<li><p>修改主题配置文件:去掉categories的注释</p>
</li>
</ol>
<h3 id="侧边栏头像设置"><a href="#侧边栏头像设置" class="headerlink" title="侧边栏头像设置"></a>侧边栏头像设置</h3><p>编辑站点配置文件，增加avatar字段</p>
<h1 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h1><p>avatar: /images/avatar.png<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">头像图片须放置在主题的/source/images/目录下</div><div class="line">### 搜索</div><div class="line">使用Sitemap插件 可方便管理员通知搜索引擎他们网站上有哪些可供抓取的网页，有助于让别人更好地通过搜索到自己的博客。</div><div class="line">1. sitemap安装配置 `npm install hexo-generator-sitemap --save`</div><div class="line"></div><div class="line">2. 修改站点配置文件</div></pre></td></tr></table></figure></p>
<h1 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h1><p>plugins:</p>
<ul>
<li>hexo-generator-sitemap<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">使用以下命令后，你可以在站点的/public目录下找到一个sitemap.xml文件，这个文件就是你的站点地图，里面包含你的站点的网页地址。</div></pre></td></tr></table></figure>
</li>
</ul>
<p>hexo clean<br>hexo g<br>```<br>提交sitemap到google参考如何向google提交sitemap</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 有两份主要的配置文件（_config.yml），一份位于站点根目录下，另一份位于主题目录下。为了描述方便，在以下说明中，将前者称为站点配置文件，后者称为主题配置文件。&lt;/p&gt;
&lt;p&gt;hexo的next主题个性化配置教程: &lt;a href=&quot;https://segmentfault.com/a/1190000009544924#articleHeader19&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/a/1190000009544924#articleHeader19&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;NexT主题安装&quot;&gt;&lt;a href=&quot;#NexT主题安装&quot; class=&quot;headerlink&quot; title=&quot;NexT主题安装&quot;&gt;&lt;/a&gt;NexT主题安装&lt;/h2&gt;&lt;h3 id=&quot;下载NexT主题&quot;&gt;&lt;a href=&quot;#下载NexT主题&quot; class=&quot;headerlink&quot; title=&quot;下载NexT主题&quot;&gt;&lt;/a&gt;下载NexT主题&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cd your-hexo-site`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git clone https://github.com/iissnan/hexo-theme-next themes/next&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;修改站点配置文件&quot;&gt;&lt;a href=&quot;#修改站点配置文件&quot; class=&quot;headerlink&quot; title=&quot;修改站点配置文件&quot;&gt;&lt;/a&gt;修改站点配置文件&lt;/h3&gt;&lt;p&gt;修改站点配置文件_config.yml，找到以下部分&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Extensions&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;## Plugins: http://hexo.io/plugins/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;## Themes: http://hexo.io/themes/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;theme: landscape&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改为&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Extensions&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;## Plugins: http://hexo.io/plugins/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;## Themes: http://hexo.io/themes/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# theme: landscape&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;theme: next`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;至此，NexT主题就安装好了，非常方便，在Hexo中切换主题只需修改站点配置文件中theme属性来配置，想换就换。&lt;/p&gt;
&lt;h3 id=&quot;选择Scheme&quot;&gt;&lt;a href=&quot;#选择Scheme&quot; class=&quot;headerlink&quot; title=&quot;选择Scheme&quot;&gt;&lt;/a&gt;选择Scheme&lt;/h3&gt;&lt;p&gt;NexT 通过 Scheme 提供主题中的主题。Mist是NexT主题自带的主题，可以通过修改主题配置文件中的scheme属性获得。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Schemes&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;scheme: Mist  #去掉默认的注释即可切换为Mist主题&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="应用工具学习" scheme="http://yoursite.com/categories/%E5%BA%94%E7%94%A8%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Next" scheme="http://yoursite.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>flex布局学习</title>
    <link href="http://yoursite.com/2017/09/12/flex%E5%B8%83%E5%B1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/09/12/flex布局学习/</id>
    <published>2017-09-12T07:11:25.000Z</published>
    <updated>2017-09-13T07:06:20.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flex布局基础知识"><a href="#flex布局基础知识" class="headerlink" title="flex布局基础知识"></a>flex布局基础知识</h2><p><img src="http://ojvil4eq9.bkt.clouddn.com/17-9-12/53121912.jpg" alt=""></p>
<ul>
<li>main axis(主轴): Flex容器的主轴主要用来配置Flex项目。它不一定是水平，这主要取决于flex-direction属性</li>
<li>main-start|main-end(主轴起点|主轴终点): Flex项目的配置从容器的主轴起点开始,往主轴终点结束</li>
<li>main size(主轴方向长度):Flex项目的在主轴方向的宽度或高度就是项目的主轴长度，Flex项目的主轴长度属性是width或height属性，由哪一个对着主轴方向决定。</li>
<li>cross axis(侧轴):与主轴垂直的轴称作侧轴，是侧轴方向的延伸。</li>
<li>cross-start | cross-end(侧轴起点|侧轴终点):伸缩行的配置从容器的侧轴起点边开始，往侧轴终点边结束。</li>
<li>cross size(侧轴方向长度):Flex项目的在侧轴方向的宽度或高度就是项目的侧轴长度，Flex项目的侧轴长度属性是width或height属性，由哪一个对着侧轴方向决定。</li>
</ul>
<h2 id="Flex容器属性-主容器"><a href="#Flex容器属性-主容器" class="headerlink" title="Flex容器属性(主容器)"></a>Flex容器属性(主容器)</h2><ol>
<li><code>display</code>: 定义一个Flex容器，根据其取的值来决定是内联还是块。Flex容器会为其内容建立新的伸缩格式化上下文。(定义成flex容器不等于定义成块级容器)</li>
<li><code>flex-direction</code>: 定义主轴方向，Flex项目在Flex容器中放置的方向<ul>
<li><code>row</code>(默认值): Flex项目从左向右排列</li>
<li><code>row-reverse</code>: 与row相反，Flex项目从右向左排列</li>
<li><code>column</code>: Flex项目从上向下排列</li>
<li><code>columne-reverse</code>: 与column相反，Flex项目从下向上排列</li>
</ul>
</li>
<li><code>flex-wrap</code>: 定义Flex项目是否多行显示<ul>
<li><code>nowrap</code>(默认值): 单行显示，从左向右排列</li>
<li><code>wrap</code>: 多行显示，从左向右排列</li>
<li><code>wrap-reverse</code>: 多行显示，从右向左排列</li>
</ul>
</li>
<li><code>flex-flow</code>: <code>flex-direction</code>和<code>flex-wrap</code>属性的缩写 默认值是row nowrap<a id="more"></a>  </li>
<li><code>justify-content</code>: 定义主轴方向的对齐方式<ul>
<li><code>flex-start</code>(默认值): Flex项目主轴起点对齐，伸缩项目向一行的起始位置靠齐。该行的第一个伸缩项目在主轴起点边的外边距与该行在主轴起点的边对齐，同时所有后续的伸缩项目与其前一个项目对齐</li>
<li><code>flex-end</code>: Flex项目主轴终点对齐，伸缩项目向一行的结束位置靠齐。该行的最后一个伸缩项目在主轴终点边的外边距与该行在主轴终点的边对齐，同时所有前面的伸缩项目与其后一个项目对齐。</li>
<li><code>center</code>: Flex项目主轴居中对齐，伸缩项目向一行的中间位置靠齐。该行的伸缩项目将相互对齐并在行中居中对齐，同时第一个项目与该行在主轴起点的边的距离等同与最后一个项目与该行在主轴终点的边的距离（如果剩余空间是负数，则保持两端溢出的长度相等）。著作权归作者所有。</li>
<li><code>space-between</code>: Flex项目主轴两端对齐，伸缩项目会平均地分布在行里。如果剩余空间是负数，或该行只有一个伸缩项目，则此值等效于flex-start。在其它情况下，第一个项目在主轴起点边的外边距会与该行在主轴起点的边对齐，同时最后一个项目在主轴终点边的外边距与该行在主轴终点的边对齐，而剩下的伸缩项目在确保两两之间的空白空间相等下平均分布。</li>
<li><code>space-around</code>: Flex项目主轴平均分布对齐，伸缩项目会平均地分布在行里，两端保留一半的空间。如果剩余空间是负数，或该行只有一个伸缩项目，则该值等效于center。在其它情况下，伸缩项目在确保两两之间的空白空间相等，同时第一个元素前的空间以及最后一个元素后的空间为其他空白空间的一半下平均分布。</li>
</ul>
</li>
<li><code>align-items</code>: 定义侧轴方向的对其方式<ul>
<li><code>flex-start</code>: flex项目侧轴起点对齐，伸缩项目在侧轴起点边的外边距紧靠住该行在侧轴起始的边</li>
<li><code>flex-end</code>: flex项目侧轴终点对齐,伸缩项目在侧轴终点边的外边距靠住该行在侧轴终点的边 。</li>
<li><code>center</code>: flex项目侧轴居中对齐，伸缩项目的外边距盒在该行的侧轴上居中放置。（如果伸缩行的尺寸小于伸缩项目，则伸缩项目会向两个方向溢出相同的量）。</li>
<li><code>baseline</code>: flex项目侧轴基线对齐，如果伸缩项目的行内轴与侧轴为同一条，则该值和flex-start等效。其它情况下，该值将参与基线对齐。所有参与该对齐方式的伸缩项目将按下列方式排列：首先将这些伸缩项目的基线进行对齐，随后其中基线至侧轴起点边的外边距距离最长的那个项目将紧靠住该行在侧轴起点的边。</li>
<li><code>stretch</code>: 如果侧轴长度属性的值为auto，则此值会使项目的外边距盒的尺寸在遵照min/max-width/height属性的限制下尽可能接近所在行的尺寸。    </li>
</ul>
</li>
<li><code>align-content</code>: 定义Flex项目多行的对齐方式，本属性在只有一行的伸缩容器上没有效果<ul>
<li><code>flex-start</code>: 各行向伸缩容器的起点位置堆叠。伸缩容器中第一行在侧轴起点的边会紧靠住伸缩容器在侧轴起点的边，之后的每一行都紧靠住前面一行。</li>
<li><code>flex-end</code>:各行向伸缩容器的结束位置堆叠。伸缩容器中最后一行在侧轴终点的边会紧靠住该伸缩容器在侧轴终点的边，之前的每一行都紧靠住后面一行。</li>
<li><code>center</code>:各行向伸缩容器的中间位置堆叠。各行两两紧靠住同时在伸缩容器中居中对齐，保持伸缩容器在侧轴起点边的内容边和第一行之间的距离与该容器在侧轴终点边的内容边与第最后一行之间的距离相等。（如果剩下的空间是负数，则行的堆叠会向两个方向溢出的相等距离。）</li>
<li><code>space-between</code>:各行在伸缩容器中平均分布。如果剩余的空间是负数或伸缩容器中只有一行，该值等效于flex-start。在其它情况下，第一行在侧轴起点的边会紧靠住伸缩容器在侧轴起点边的内容边，最后一行在侧轴终点的边会紧靠住伸缩容器在侧轴终点的内容边，剩余的行在保持两两之间的空间相等的状况下排列。</li>
<li><code>space-around</code>:各行在伸缩容器中平均分布，在两边各有一半的空间。如果剩余的空间是负数或伸缩容器中只有一行，该值等效于center。在其它情况下，各行会在保持两两之间的空间相等，同时第一行前面及最后一行后面的空间是其他空间的一半的状况下排列。</li>
<li><code>stretch</code>(默认值):各行将会伸展以占用剩余的空间。如果剩余的空间是负数，该值等效于flex-start。在其它情况下，剩余空间被所有行平分，扩大各行的侧轴尺寸。</li>
</ul>
</li>
</ol>
<h2 id="Flex项目属性"><a href="#Flex项目属性" class="headerlink" title="Flex项目属性"></a>Flex项目属性</h2><ol>
<li><p><code>order</code>:默认值是0，Flex项目是按文档源的流顺序排列,根据order重新排序伸缩项目。有最小（负值最大）order的伸缩项目排在第一个。若有多个项目有相同的order值，这些项目照文件顺序排。这个步骤影响了伸缩项目生盒树成的盒子的顺序，也影响了后面的演算法如何处理各项目。著作权归作者所有。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">    order:&lt;number&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>flex-grow</code>: 定义一个Flex项目的扩大比例。它接受一个没有单位的值作为一个比例。它可以使用Flex项目完全占用Flex容器可用的空间。如果所有Flex项目的flex-grow设置为1时，表示Flex容器中的Flex项目具有相等的尺寸。如果你给其中一个Flex项目设置flex-grow的值为2，那么这个Flex项目的尺寸将是其他Flex项目两倍（其他Flex项目的flex-grow值为1）。flex-grow取负值将失效。</p>
</li>
<li><code>flec-shrink</code>: 可以定义Flex项目的缩小比例,flex-shrink取负值将失效。</li>
<li><code>flex-basis</code>: 定义主轴方向的长度(width|height)。定义了Flex项目在分配Flex容器剩余空间之前的一个默认尺寸。main-size值使它具有匹配的宽度或高度，不过都需要取决于flex-direction的值。如果设置为0，内容不在考虑周围额外空间。如果设置为auto，额外空间会基于flex-grow值做分布。</li>
<li><code>flex</code>: 是flex-grow，flex-shrink和flex-basis三个属性的缩写。第二个和第三个参数(flex-shrink和flex-basis)是可选值。其默认值是0 1 auto。</li>
<li><code>align-self</code>: 用来在单独的伸缩项目上覆写默认的对齐方式。（对于匿名伸缩项目，align-self的值永远与其关联的伸缩容器的align-items的值相同)。<ul>
<li><code>flex-start</code>: 伸缩项目在侧轴起点边的外边距紧靠住该行在侧轴起始的边。</li>
<li><code>flex-end</code>: 伸缩项目在侧轴终点边的外边距靠住该行在侧轴终点的边 。</li>
<li><code>center</code>: 伸缩项目的外边距盒在该行的侧轴上居中放置。（如果伸缩行的尺寸小于伸缩项目，则伸缩项目会向两个方向溢出相同的量）。</li>
<li><code>baseline</code>:如果伸缩项目的行内轴与侧轴为同一条，则该值和flex-start等效。其它情况下，该值将参与基线对齐。所有参与该对齐方式的伸缩项目将按下列方式排列：首先将这些伸缩项目的基线进行对齐，随后其中基线至侧轴起点边的外边距距离最长的那个项目将紧靠住该行在侧轴起点的边。</li>
<li><code>stretch</code>:如果侧轴长度属性的值为auto，则此值会使项目的外边距盒的尺寸在遵照min/max-width/height属性的限制下尽可能接近所在行的尺寸。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123; </div><div class="line">        align-self: auto | flex-start | flex-end | center | baseline | stretch; </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;flex布局基础知识&quot;&gt;&lt;a href=&quot;#flex布局基础知识&quot; class=&quot;headerlink&quot; title=&quot;flex布局基础知识&quot;&gt;&lt;/a&gt;flex布局基础知识&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://ojvil4eq9.bkt.clouddn.com/17-9-12/53121912.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;main axis(主轴): Flex容器的主轴主要用来配置Flex项目。它不一定是水平，这主要取决于flex-direction属性&lt;/li&gt;
&lt;li&gt;main-start|main-end(主轴起点|主轴终点): Flex项目的配置从容器的主轴起点开始,往主轴终点结束&lt;/li&gt;
&lt;li&gt;main size(主轴方向长度):Flex项目的在主轴方向的宽度或高度就是项目的主轴长度，Flex项目的主轴长度属性是width或height属性，由哪一个对着主轴方向决定。&lt;/li&gt;
&lt;li&gt;cross axis(侧轴):与主轴垂直的轴称作侧轴，是侧轴方向的延伸。&lt;/li&gt;
&lt;li&gt;cross-start | cross-end(侧轴起点|侧轴终点):伸缩行的配置从容器的侧轴起点边开始，往侧轴终点边结束。&lt;/li&gt;
&lt;li&gt;cross size(侧轴方向长度):Flex项目的在侧轴方向的宽度或高度就是项目的侧轴长度，Flex项目的侧轴长度属性是width或height属性，由哪一个对着侧轴方向决定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Flex容器属性-主容器&quot;&gt;&lt;a href=&quot;#Flex容器属性-主容器&quot; class=&quot;headerlink&quot; title=&quot;Flex容器属性(主容器)&quot;&gt;&lt;/a&gt;Flex容器属性(主容器)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;display&lt;/code&gt;: 定义一个Flex容器，根据其取的值来决定是内联还是块。Flex容器会为其内容建立新的伸缩格式化上下文。(定义成flex容器不等于定义成块级容器)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-direction&lt;/code&gt;: 定义主轴方向，Flex项目在Flex容器中放置的方向&lt;ul&gt;
&lt;li&gt;&lt;code&gt;row&lt;/code&gt;(默认值): Flex项目从左向右排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;row-reverse&lt;/code&gt;: 与row相反，Flex项目从右向左排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column&lt;/code&gt;: Flex项目从上向下排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;columne-reverse&lt;/code&gt;: 与column相反，Flex项目从下向上排列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-wrap&lt;/code&gt;: 定义Flex项目是否多行显示&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nowrap&lt;/code&gt;(默认值): 单行显示，从左向右排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrap&lt;/code&gt;: 多行显示，从左向右排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrap-reverse&lt;/code&gt;: 多行显示，从右向左排列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-flow&lt;/code&gt;: &lt;code&gt;flex-direction&lt;/code&gt;和&lt;code&gt;flex-wrap&lt;/code&gt;属性的缩写 默认值是row nowrap
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="flex" scheme="http://yoursite.com/tags/flex/"/>
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>前端知识体系整理</title>
    <link href="http://yoursite.com/2017/09/12/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2017/09/12/前端知识体系整理/</id>
    <published>2017-09-12T05:55:49.000Z</published>
    <updated>2017-09-13T06:47:36.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端知识分类"><a href="#前端知识分类" class="headerlink" title="前端知识分类"></a>前端知识分类</h2><ul>
<li>HTML</li>
<li>CSS</li>
<li>DOM和BOM</li>
<li>ECMAScript</li>
<li>前端构建生态</li>
<li>模块化、框架、组件</li>
<li>Node.js</li>
<li>应用工具学习</li>
<li>canvas</li>
<li>HTTP协议</li>
<li>浏览器基础</li>
<li>Photoshop与切图</li>
</ul>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ol>
<li>meta内容与设置</li>
<li>一般常用标签</li>
<li>HTML5新增语义化标签</li>
<li>HTML常用属性</li>
<li>搜索引擎优化<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2></li>
<li>css常用属性</li>
<li>css层叠概念</li>
<li>css选择器和优先级</li>
<li>盒子模型</li>
<li>css布局方式</li>
<li>编译工具less和sass</li>
<li>css实现响应式：利用媒体查询media query</li>
<li>css移动端开发：rem和em的原理和实现</li>
<li>css动画及动画库的使用</li>
<li>css的UI框架<ul>
<li>bootstrap</li>
<li>基于vue框架-PC端elm框架</li>
<li>基于vue框架-移动端vux框架</li>
</ul>
</li>
</ol>
<h2 id="DOM和BOM"><a href="#DOM和BOM" class="headerlink" title="DOM和BOM"></a>DOM和BOM</h2><ol>
<li>DOM对象document</li>
<li>DOMAPI操作</li>
<li>BOM对象的使用<a id="more"></a>
</li>
</ol>
<h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><ol>
<li>ECMAScript基本语法</li>
<li>内置对象：RegExp、Math、Date、Error、Functio、Arguments、</li>
<li>AJAX原理与实现</li>
<li>面向对象与继承</li>
<li>原型和原型链</li>
<li>作用域和作用域链</li>
<li>执行上下文：由变量对象、this、作用域链组成</li>
<li>函数闭包使用和优缺点</li>
<li>ES6新增语法和特性</li>
</ol>
<h2 id="构建生态"><a href="#构建生态" class="headerlink" title="构建生态"></a>构建生态</h2><ul>
<li>npm、yarm包管理工具</li>
<li>gulp、webpack开发打包工具</li>
</ul>
<h2 id="模块化、框架、组件"><a href="#模块化、框架、组件" class="headerlink" title="模块化、框架、组件"></a>模块化、框架、组件</h2><ul>
<li>JQuery、zepto库的使用原理及插件开发</li>
<li>模块化规范：commonJS、AMD规范(RequireJS)和CMD规范(SeaJS)、ES6模块化规范</li>
<li>MVC、MVVM思想</li>
<li>双向数据绑定</li>
<li>Vue框架的使用原理及组件开发</li>
<li>React框架</li>
</ul>
<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><ol>
<li>HTTP协议内容：HTTP1.0、HTTP1.1、HTTP2.0</li>
<li>HTTP请求过程</li>
<li>HTTP缓存与状态码判断过程</li>
<li>浏览器跨域问题及处理方式</li>
</ol>
<h2 id="浏览器基础"><a href="#浏览器基础" class="headerlink" title="浏览器基础"></a>浏览器基础</h2><ol>
<li>浏览器的组成<ul>
<li>用户界面：用户地址栏、前进后退按钮</li>
<li>浏览器引擎：浏览器指令解析模块</li>
<li>持久化存储：localstorage、webSQL、indexDb、cookie</li>
<li>UI后端：浏览器默认控件库</li>
<li>网络模块： 浏览器向服务器发送请求模块</li>
<li>JS解析引擎</li>
<li>浏览器渲染引擎(内核)</li>
</ul>
</li>
</ol>
<h2 id="Photoshop与切图"><a href="#Photoshop与切图" class="headerlink" title="Photoshop与切图"></a>Photoshop与切图</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前端知识分类&quot;&gt;&lt;a href=&quot;#前端知识分类&quot; class=&quot;headerlink&quot; title=&quot;前端知识分类&quot;&gt;&lt;/a&gt;前端知识分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;DOM和BOM&lt;/li&gt;
&lt;li&gt;ECMAScript&lt;/li&gt;
&lt;li&gt;前端构建生态&lt;/li&gt;
&lt;li&gt;模块化、框架、组件&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;应用工具学习&lt;/li&gt;
&lt;li&gt;canvas&lt;/li&gt;
&lt;li&gt;HTTP协议&lt;/li&gt;
&lt;li&gt;浏览器基础&lt;/li&gt;
&lt;li&gt;Photoshop与切图&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;meta内容与设置&lt;/li&gt;
&lt;li&gt;一般常用标签&lt;/li&gt;
&lt;li&gt;HTML5新增语义化标签&lt;/li&gt;
&lt;li&gt;HTML常用属性&lt;/li&gt;
&lt;li&gt;搜索引擎优化&lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;css常用属性&lt;/li&gt;
&lt;li&gt;css层叠概念&lt;/li&gt;
&lt;li&gt;css选择器和优先级&lt;/li&gt;
&lt;li&gt;盒子模型&lt;/li&gt;
&lt;li&gt;css布局方式&lt;/li&gt;
&lt;li&gt;编译工具less和sass&lt;/li&gt;
&lt;li&gt;css实现响应式：利用媒体查询media query&lt;/li&gt;
&lt;li&gt;css移动端开发：rem和em的原理和实现&lt;/li&gt;
&lt;li&gt;css动画及动画库的使用&lt;/li&gt;
&lt;li&gt;css的UI框架&lt;ul&gt;
&lt;li&gt;bootstrap&lt;/li&gt;
&lt;li&gt;基于vue框架-PC端elm框架&lt;/li&gt;
&lt;li&gt;基于vue框架-移动端vux框架&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;DOM和BOM&quot;&gt;&lt;a href=&quot;#DOM和BOM&quot; class=&quot;headerlink&quot; title=&quot;DOM和BOM&quot;&gt;&lt;/a&gt;DOM和BOM&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;DOM对象document&lt;/li&gt;
&lt;li&gt;DOMAPI操作&lt;/li&gt;
&lt;li&gt;BOM对象的使用
    
    </summary>
    
      <category term="知识体系" scheme="http://yoursite.com/categories/%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
    
      <category term="知识体系" scheme="http://yoursite.com/tags/%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6九————JS中的类</title>
    <link href="http://yoursite.com/2017/08/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E4%B9%9D%E2%80%94%E2%80%94JS%E4%B8%AD%E7%9A%84%E7%B1%BB/"/>
    <id>http://yoursite.com/2017/08/23/深入理解ES6九——JS中的类/</id>
    <published>2017-08-23T01:26:05.000Z</published>
    <updated>2017-09-13T06:33:42.416Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>vue脚手架vue-cli的学习二--自定义模块</title>
    <link href="http://yoursite.com/2017/08/22/vue%E8%84%9A%E6%89%8B%E6%9E%B6vue-cli%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%BA%8C-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2017/08/22/vue脚手架vue-cli的学习二-自定义模块/</id>
    <published>2017-08-22T03:51:39.000Z</published>
    <updated>2017-09-13T06:44:29.723Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="vue-cli" scheme="http://yoursite.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6十三</title>
    <link href="http://yoursite.com/2017/08/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E5%8D%81%E4%B8%89/"/>
    <id>http://yoursite.com/2017/08/12/深入理解ES6十三/</id>
    <published>2017-08-12T06:44:00.000Z</published>
    <updated>2017-09-13T07:02:41.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><ul>
<li>模块是自动运行在严格模式下并且没有办法退出运行的Javascript代码，在模块中创建的变量不会自动被添加到全局作用域</li>
<li>模块的两个特性：在模块顶部，this的值是undefined；模块不支持HTML风格的代码注释</li>
</ul>
<h1 id="模块的导入导出语法"><a href="#模块的导入导出语法" class="headerlink" title="模块的导入导出语法"></a>模块的导入导出语法</h1><ul>
<li><p>导出的基本语法：用<code>export</code>关键字将代码暴露给其他模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 导出数据</div><div class="line">export var color = &apos;red&apos;;</div><div class="line">export let name = &apos;tgb&apos;;</div><div class="line">export const magicNumber = 7;</div><div class="line"></div><div class="line">// 导出函数</div><div class="line">export function sum(num1,num2) &#123;</div><div class="line">    return num1 + num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>导入的基本语法：通过<code>import</code>关键字在另一个模块中访问，<code>import</code>语句的两个部分分别是，要导入的标识符和标识符应当从哪个模块导入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import &#123;identifierl,identifier2&#125; from &apos;./example.js&apos;//模块说明符</div><div class="line"></div><div class="line">// 导入多个绑定</div><div class="line">import &#123; sum, multiply, magicNumber&#125; from &apos;./example.js&apos;;</div><div class="line"></div><div class="line">// 导入整个模块</div><div class="line">import * as example from &apos;./expmple.js&apos; // 命名空间导入</div></pre></td></tr></table></figure>
</li>
<li><p>模块说明符的注意事项：Node.js遵循文件系统前缀区分本地文件和包的惯例，例如，<code>example</code>是一个包而<code>./example.js</code>是一个本地文件</p>
</li>
<li>从模块中导入绑定时，import后面使用的标识符，在该模块不能再次使用。</li>
<li>不管在<code>import</code>语句中把一个模块写了多少次，该模块只执行一次，导入模块的代码执行后，实例化过的模块被保存在内存中，只要另一个<code>import</code>语句引用它就可以重复使用它。</li>
</ul>
<h1 id="模块语法的限制"><a href="#模块语法的限制" class="headerlink" title="模块语法的限制"></a>模块语法的限制</h1><ul>
<li><code>export</code>和<code>import</code>的一个重要的限制是，它们必须在其他语句和函数之外使用，所以 必须在顶部使用<code>export</code>和<code>import</code>。</li>
<li>导入的绑定标识符是只读的，标识符只有在被导出的模块中可以修改，导入绑定的模块无法改变绑定值。<a id="more"></a>
</li>
</ul>
<h1 id="导出和导入时的重命名"><a href="#导出和导入时的重命名" class="headerlink" title="导出和导入时的重命名"></a>导出和导入时的重命名</h1><ul>
<li><p>可以用<code>as</code>关键字来改变导出时元素的名称</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function sum (num1,num2) &#123;</div><div class="line">    return num1 + num2;</div><div class="line">&#125;</div><div class="line">export &#123;sum as add&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>导入时改变名称</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import &#123;add as sum&#125; from &apos;./example.js&apos;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="模块的默认值"><a href="#模块的默认值" class="headerlink" title="模块的默认值"></a>模块的默认值</h1><ul>
<li>模块的默认值是指通过default关键字指定的单个变量，函数或类，只能为模块设置一个默认的导出值</li>
<li><p>导出默认值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export default function(num1,num2) &#123;</div><div class="line">    return num1 + num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>导入默认值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import sum from &apos;./example.js&apos; //导入默认值是不使用大括号</div></pre></td></tr></table></figure>
</li>
<li><p>导出默认值和非默认值:用逗号将默认的本地名称与大括号包裹的非默认值分割开，在import语句中，默认值必须排在非默认值前。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">export let color = &apos;red&apos;;</div><div class="line"></div><div class="line">export default function(num1,num2) &#123;</div><div class="line">   return num1 + num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 导入</div><div class="line">import sum, &#123; color &#125; from &apos;./example.js&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="浏览器模块说明符解析"><a href="#浏览器模块说明符解析" class="headerlink" title="浏览器模块说明符解析"></a>浏览器模块说明符解析</h1><ul>
<li>以<code>/</code>开头的解析从根目录开始。</li>
<li>以<code>./</code>开头的解析从当前目录开始。</li>
<li>以<code>../</code>开头的解析从父目录开始。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;模块是自动运行在严格模式下并且没有办法退出运行的Javascript代码，在模块中创建的变量不会自动被添加到全局作用域&lt;/li&gt;
&lt;li&gt;模块的两个特性：在模块顶部，this的值是undefined；模块不支持HTML风格的代码注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;模块的导入导出语法&quot;&gt;&lt;a href=&quot;#模块的导入导出语法&quot; class=&quot;headerlink&quot; title=&quot;模块的导入导出语法&quot;&gt;&lt;/a&gt;模块的导入导出语法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;导出的基本语法：用&lt;code&gt;export&lt;/code&gt;关键字将代码暴露给其他模块&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 导出数据&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export var color = &amp;apos;red&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export let name = &amp;apos;tgb&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export const magicNumber = 7;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 导出函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export function sum(num1,num2) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return num1 + num2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;导入的基本语法：通过&lt;code&gt;import&lt;/code&gt;关键字在另一个模块中访问，&lt;code&gt;import&lt;/code&gt;语句的两个部分分别是，要导入的标识符和标识符应当从哪个模块导入&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import &amp;#123;identifierl,identifier2&amp;#125; from &amp;apos;./example.js&amp;apos;//模块说明符&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 导入多个绑定&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import &amp;#123; sum, multiply, magicNumber&amp;#125; from &amp;apos;./example.js&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 导入整个模块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import * as example from &amp;apos;./expmple.js&amp;apos; // 命名空间导入&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模块说明符的注意事项：Node.js遵循文件系统前缀区分本地文件和包的惯例，例如，&lt;code&gt;example&lt;/code&gt;是一个包而&lt;code&gt;./example.js&lt;/code&gt;是一个本地文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;从模块中导入绑定时，import后面使用的标识符，在该模块不能再次使用。&lt;/li&gt;
&lt;li&gt;不管在&lt;code&gt;import&lt;/code&gt;语句中把一个模块写了多少次，该模块只执行一次，导入模块的代码执行后，实例化过的模块被保存在内存中，只要另一个&lt;code&gt;import&lt;/code&gt;语句引用它就可以重复使用它。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;模块语法的限制&quot;&gt;&lt;a href=&quot;#模块语法的限制&quot; class=&quot;headerlink&quot; title=&quot;模块语法的限制&quot;&gt;&lt;/a&gt;模块语法的限制&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;和&lt;code&gt;import&lt;/code&gt;的一个重要的限制是，它们必须在其他语句和函数之外使用，所以 必须在顶部使用&lt;code&gt;export&lt;/code&gt;和&lt;code&gt;import&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;导入的绑定标识符是只读的，标识符只有在被导出的模块中可以修改，导入绑定的模块无法改变绑定值。
    
    </summary>
    
      <category term="模块化" scheme="http://yoursite.com/categories/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="ES6模块化" scheme="http://yoursite.com/tags/ES6%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>国际化——Vue-i18n的使用</title>
    <link href="http://yoursite.com/2017/08/12/%E5%9B%BD%E9%99%85%E5%8C%96%E2%80%94%E2%80%94Vue-i18n%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/08/12/国际化——Vue-i18n的使用/</id>
    <published>2017-08-12T03:30:07.000Z</published>
    <updated>2017-09-13T07:01:46.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-i18n安装"><a href="#Vue-i18n安装" class="headerlink" title="Vue-i18n安装"></a>Vue-i18n安装</h2><ul>
<li><code>npm install vue-i18n --save</code></li>
</ul>
<h2 id="Vue-i18n的使用"><a href="#Vue-i18n的使用" class="headerlink" title="Vue-i18n的使用"></a>Vue-i18n的使用</h2><ul>
<li>在入口<code>main.js</code>文件配置使用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import VueI18n from &apos;vue-i18n&apos;</div><div class="line"></div><div class="line">Vue.use(VueI18n);</div><div class="line">/*---------基本使用-----------*/</div><div class="line">const i18n = new VueI18n(&#123;</div><div class="line">  locale: &apos;CN&apos;,    // 语言标识</div><div class="line">  messages : &#123;</div><div class="line">    en: &#123;</div><div class="line">      message: &#123;</div><div class="line">        hello: &apos;hello world&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    cn: &#123;</div><div class="line">      message: &#123;</div><div class="line">        hello: &apos;你好、世界&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">/*---------使用语言包-----------*/</div><div class="line">const i18n = new VueI18n(&#123;</div><div class="line">  locale: &apos;CN&apos;,    // 语言标识</div><div class="line">  messages: &#123;</div><div class="line">    &apos;CN&apos;: require(&apos;./assets/common/lang/cn&apos;),   // 中文语言包</div><div class="line">    &apos;EN&apos;: require(&apos;./assets/common/lang/en&apos;)    // 英文语言包</div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line"></div><div class="line">/*---------语言包内部语法star-----------*/</div><div class="line">export const  message = &#123;</div><div class="line">      language:&apos;语言&apos;,</div><div class="line">      hello: &apos;你好,世界&apos;</div><div class="line">&#125;</div><div class="line">/*---------语言包内部语法end-----------*/</div><div class="line"></div><div class="line">/*---------挂载全局使用-----------*/</div><div class="line">new Vue(&#123;</div><div class="line">  el: &apos;#app&apos;,</div><div class="line">  i18n,</div><div class="line">  router,</div><div class="line">  template: &apos;&lt;App/&gt;&apos;,</div><div class="line">  components: &#123; App &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">/*---------vue组件模板的使用-----------*/</div><div class="line"> &lt;template&gt;</div><div class="line">        &lt;p&gt;&#123;&#123; $t(&quot;message.hello&quot;) &#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;/template&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="单独组件的使用"><a href="#单独组件的使用" class="headerlink" title="单独组件的使用"></a>单独组件的使用</h2><ul>
<li>在单个vue组件中使用，要用到i18n自定义块，需要配置webpack文件<code>webpack.base.conf.js</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.vue$/,</div><div class="line">        loader: &apos;vue-loader&apos;,</div><div class="line">        options: &#123;</div><div class="line">          loaders: &#123;</div><div class="line">            // you need to specify `i18n` loaders key with `vue-i18n-loader` (https://github.com/kazupon/vue-i18n-loader)</div><div class="line">            i18n: &apos;@kazupon/vue-i18n-loader&apos;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      // ...</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>示例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;i18n&gt;</div><div class="line">&#123;</div><div class="line">  &quot;en&quot;: &#123;</div><div class="line">    &quot;hello&quot;: &quot;hello world!&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;ja&quot;: &#123;</div><div class="line">    &quot;hello&quot;: &quot;你好,世界！&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/i18n&gt;</div><div class="line"></div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;label for=&quot;locale&quot;&gt;locale&lt;/label&gt;</div><div class="line">    &lt;select v-model=&quot;locale&quot;&gt;</div><div class="line">      &lt;option&gt;en&lt;/option&gt;</div><div class="line">      &lt;option&gt;ja&lt;/option&gt;</div><div class="line">    &lt;/select&gt;</div><div class="line">    &lt;p&gt;message: &#123;&#123; $t(&apos;hello&apos;) &#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  name: &apos;app&apos;,</div><div class="line">  data () &#123; return &#123; locale: &apos;en&apos; &#125; &#125;,</div><div class="line">  watch: &#123;</div><div class="line">    locale (val) &#123;</div><div class="line">      this.$i18n.locale = val</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vue-i18n安装&quot;&gt;&lt;a href=&quot;#Vue-i18n安装&quot; class=&quot;headerlink&quot; title=&quot;Vue-i18n安装&quot;&gt;&lt;/a&gt;Vue-i18n安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install vue-i18n --save&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Vue-i18n的使用&quot;&gt;&lt;a href=&quot;#Vue-i18n的使用&quot; class=&quot;headerlink&quot; title=&quot;Vue-i18n的使用&quot;&gt;&lt;/a&gt;Vue-i18n的使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在入口&lt;code&gt;main.js&lt;/code&gt;文件配置使用&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import Vue from &amp;apos;vue&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import VueI18n from &amp;apos;vue-i18n&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.use(VueI18n);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------基本使用-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const i18n = new VueI18n(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  locale: &amp;apos;CN&amp;apos;,    // 语言标识&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  messages : &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    en: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      message: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hello: &amp;apos;hello world&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    cn: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      message: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hello: &amp;apos;你好、世界&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------使用语言包-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const i18n = new VueI18n(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  locale: &amp;apos;CN&amp;apos;,    // 语言标识&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  messages: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;CN&amp;apos;: require(&amp;apos;./assets/common/lang/cn&amp;apos;),   // 中文语言包&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;EN&amp;apos;: require(&amp;apos;./assets/common/lang/en&amp;apos;)    // 英文语言包&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------语言包内部语法star-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export const  message = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      language:&amp;apos;语言&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      hello: &amp;apos;你好,世界&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------语言包内部语法end-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------挂载全局使用-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;new Vue(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  el: &amp;apos;#app&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  i18n,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  router,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  template: &amp;apos;&amp;lt;App/&amp;gt;&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  components: &amp;#123; App &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*---------vue组件模板的使用-----------*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;lt;template&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;p&amp;gt;&amp;#123;&amp;#123; $t(&amp;quot;message.hello&amp;quot;) &amp;#125;&amp;#125;&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/template&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="组件" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Vue-i18" scheme="http://yoursite.com/tags/Vue-i18/"/>
    
      <category term="国际化" scheme="http://yoursite.com/tags/%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6六</title>
    <link href="http://yoursite.com/2017/08/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E5%85%AD/"/>
    <id>http://yoursite.com/2017/08/06/深入理解ES6六/</id>
    <published>2017-08-06T09:15:41.000Z</published>
    <updated>2017-09-13T06:33:54.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><ul>
<li>ES6新增的数据类型<code>Symbol</code></li>
<li><p>创建Symbol：通过去全局的<code>Symbol</code>函数创建一个<code>Symbol</code>，<code>Symbol</code>函数接受一个可选参数，用于添加一段文本描述即将创建的<code>Symbol</code>,方便阅读和调试Symbol程序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">let firstName = Symbol(&apos;first name&apos;);</div><div class="line">    let person = &#123;&#125;;</div><div class="line"></div><div class="line">    person[firstName] = &apos;Nicholas&apos;;</div><div class="line"></div><div class="line">    console.log(&apos;first name&apos; in person); //false</div><div class="line">    console.log(person[firstName]); //&apos;Nicholas&apos;</div><div class="line">    console.log(firstName); //&apos;Symbol(first name)&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>ES6扩展了<code>typeof</code>操作符，支持返回<code>Symbol</code>,可以用typeof来检测变量是否为<code>Symbol</code>类型.</p>
</li>
</ul>
<h2 id="Symbol共享体系"><a href="#Symbol共享体系" class="headerlink" title="Symbol共享体系"></a>Symbol共享体系</h2><ul>
<li><p>ES6提供了一个可以随时访问的全局Symbol注册表,如果要创建一个可共享的Symbol,要使用Symbol.for()方法，该方法只接受一个参数，就是即将创建的Symbol的字符串标识符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let uid = Symbol.for(&apos;uid&apos;);</div><div class="line">let object = &#123;&#125;;</div><div class="line"></div><div class="line">object[uid]=&apos;12345&apos;;</div><div class="line"></div><div class="line">console.log(ojbect[uid]);</div><div class="line">console.log(uid);</div></pre></td></tr></table></figure>
</li>
<li><p>Symbol.for()方法首先在全局Symbol注册表中搜索键为’uid’的Symbol是否存在，如果存在，直接返回已有的Symbol；否则创建一个新的Symbol，并使用这个键在Symbol全局注册表中注册，随即返回新创建的Symbol</p>
<a id="more"></a></li>
<li>可以使用<code>Symbol.keyFor()</code>方法在Symbol全局注册表中检索与Symbol有关的键<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let uid = Symbol.for(&apos;uid&apos;);</div><div class="line">console.log(Symbol.keyFor(uid)); //&apos;uid&apos;</div><div class="line"></div><div class="line">let uid3 = Symbol(&apos;uid&apos;);</div><div class="line">console.log(Symbol.keyFor(uid3)) //undefined</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Symbol属性检索"><a href="#Symbol属性检索" class="headerlink" title="Symbol属性检索"></a>Symbol属性检索</h2><ul>
<li>ES6中新增<code>Object.getOwnPropertySymbols()</code>方法来检索对象中的Symbol属性，返回值是一个包含所有Symbol自由属性的数组<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let uid = Symbol.for(&apos;uid&apos;);</div><div class="line">let object = &#123;</div><div class="line">    [uid]: &apos;12345&apos;</div><div class="line">&#125;;</div><div class="line">let symbols = object.getOwnPropertySymbols(object);</div><div class="line"></div><div class="line">console.log(symbols.length);               //1</div><div class="line">console.log(symbols[0]);                   //&apos;Symbol(uid)&apos;</div><div class="line">console.log(object[symbols[0]])            //&apos;12345&apos;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Symbol&quot;&gt;&lt;a href=&quot;#Symbol&quot; class=&quot;headerlink&quot; title=&quot;Symbol&quot;&gt;&lt;/a&gt;Symbol&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ES6新增的数据类型&lt;code&gt;Symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建Symbol：通过去全局的&lt;code&gt;Symbol&lt;/code&gt;函数创建一个&lt;code&gt;Symbol&lt;/code&gt;，&lt;code&gt;Symbol&lt;/code&gt;函数接受一个可选参数，用于添加一段文本描述即将创建的&lt;code&gt;Symbol&lt;/code&gt;,方便阅读和调试Symbol程序&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let firstName = Symbol(&amp;apos;first name&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    let person = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    person[firstName] = &amp;apos;Nicholas&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(&amp;apos;first name&amp;apos; in person); //false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(person[firstName]); //&amp;apos;Nicholas&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(firstName); //&amp;apos;Symbol(first name)&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ES6扩展了&lt;code&gt;typeof&lt;/code&gt;操作符，支持返回&lt;code&gt;Symbol&lt;/code&gt;,可以用typeof来检测变量是否为&lt;code&gt;Symbol&lt;/code&gt;类型.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Symbol共享体系&quot;&gt;&lt;a href=&quot;#Symbol共享体系&quot; class=&quot;headerlink&quot; title=&quot;Symbol共享体系&quot;&gt;&lt;/a&gt;Symbol共享体系&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ES6提供了一个可以随时访问的全局Symbol注册表,如果要创建一个可共享的Symbol,要使用Symbol.for()方法，该方法只接受一个参数，就是即将创建的Symbol的字符串标识符&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let uid = Symbol.for(&amp;apos;uid&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let object = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;object[uid]=&amp;apos;12345&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(ojbect[uid]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(uid);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Symbol.for()方法首先在全局Symbol注册表中搜索键为’uid’的Symbol是否存在，如果存在，直接返回已有的Symbol；否则创建一个新的Symbol，并使用这个键在Symbol全局注册表中注册，随即返回新创建的Symbol&lt;/p&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="Symbol" scheme="http://yoursite.com/tags/Symbol/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6五</title>
    <link href="http://yoursite.com/2017/08/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E4%BA%94/"/>
    <id>http://yoursite.com/2017/08/06/深入理解ES6五/</id>
    <published>2017-08-06T09:15:16.000Z</published>
    <updated>2017-09-13T06:35:02.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><ul>
<li><p>对象解构的语法：在赋值操作符(=)左边放置一个对象字面量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let node = &#123;</div><div class="line">    type:&apos;Indet&apos;,</div><div class="line">    name:&apos;noo&apos;</div><div class="line">&#125;</div><div class="line">let &#123; type, name&#125; = node;</div><div class="line">console.log(type);</div><div class="line">console.log(name);</div></pre></td></tr></table></figure>
</li>
<li><p>对象的解构赋值：由于代码块语句不允许出现在赋值语句左侧，所以必须添加小括号将其转换为一个表达式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let node = &#123;</div><div class="line">    type:&apos;Indet&apos;,</div><div class="line">    name:&apos;noo&apos;</div><div class="line">&#125;,</div><div class="line">    type = &apos;Literal&apos;,</div><div class="line">    name = &apos;sss&apos;;</div><div class="line"></div><div class="line">    (&#123; type, name &#125; = node);</div><div class="line">    console.log(type); //&apos;Indet&apos;</div><div class="line">    console.log(name); //&apos;noo&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>函数中也可以传入解构表达式</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">let node = &#123;</div><div class="line">    type:&apos;Indet&apos;,</div><div class="line">    name:&apos;noo&apos;</div><div class="line">&#125;,</div><div class="line">    type = &apos;Literal&apos;,</div><div class="line">    name = &apos;sss&apos;;</div><div class="line"></div><div class="line">    function outPut(value) &#123;</div><div class="line">        console.log(value === node);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    outPut(&#123; type, name &#125; = node);</div><div class="line"></div><div class="line">    console.log(type); //&apos;Indet&apos;</div><div class="line">    console.log(name); //&apos;noo&apos;</div></pre></td></tr></table></figure>
<ul>
<li><p>解构赋值表达式可以设置默认值：在属性名称后面添加一个等号和相应的默认值即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let node = &#123;</div><div class="line">    type:&apos;Indet&apos;,</div><div class="line">    name:&apos;noo&apos;</div><div class="line">&#125;;</div><div class="line">let &#123; type, name, value = true&#125; = node;</div><div class="line"></div><div class="line">console.log(type); //&apos;Indet&apos;</div><div class="line">console.log(name); //&apos;noo&apos;</div><div class="line">console.log(value); //true</div></pre></td></tr></table></figure>
</li>
<li><p>为非同名局部变量赋值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let node = &#123;</div><div class="line">    type:&apos;Indet&apos;,</div><div class="line">    name:&apos;noo&apos;</div><div class="line">&#125;;</div><div class="line">// type:localType语法的含义是读取名为type的属性并将其值存储在变量localType中</div><div class="line">let &#123; type:localType, name:localName&#125; = node;</div><div class="line"></div><div class="line">console.log(localType); //&apos;Indet&apos;</div><div class="line">console.log(localName); //&apos;noo&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>嵌套对象解构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">let node = &#123;</div><div class="line">    type:&apos;Identifier&apos;,</div><div class="line">    name:&apos;noo&apos;,</div><div class="line">    loc: &#123;</div><div class="line">        start: &#123;</div><div class="line">            line: 1,</div><div class="line">            column:1</div><div class="line">        &#125;,</div><div class="line">        end: &#123;</div><div class="line">            line: 1,</div><div class="line">            column: 4</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let &#123; loc: &#123;start &#125;&#125; = node;</div><div class="line"></div><div class="line">console.log(start.line); //1</div><div class="line">console.log(start.column); //1</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><ul>
<li><p>数组解构语法：使用数组字面量，解构操作全部在数组内完成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let colors = [&apos;red&apos;, &apos;grren&apos;, &apos;blue&apos;];</div><div class="line">let [first, second] = colors;</div><div class="line">console.log(first);   //&apos;red&apos;</div><div class="line">console.log(second);   //&apos;grren&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>数组解构赋值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let colors = [&apos;red&apos;, &apos;grren&apos;, &apos;blue&apos;],</div><div class="line">    first = &apos;111&apos;,</div><div class="line">    second = &apos;222&apos;;</div><div class="line">[first,second] = colors;</div><div class="line"></div><div class="line">console.log(first);</div><div class="line">console.log(second);</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对象解构&quot;&gt;&lt;a href=&quot;#对象解构&quot; class=&quot;headerlink&quot; title=&quot;对象解构&quot;&gt;&lt;/a&gt;对象解构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对象解构的语法：在赋值操作符(=)左边放置一个对象字面量&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let node = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type:&amp;apos;Indet&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let &amp;#123; type, name&amp;#125; = node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(type);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(name);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对象的解构赋值：由于代码块语句不允许出现在赋值语句左侧，所以必须添加小括号将其转换为一个表达式。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let node = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type:&amp;apos;Indet&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type = &amp;apos;Literal&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name = &amp;apos;sss&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (&amp;#123; type, name &amp;#125; = node);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(type); //&amp;apos;Indet&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(name); //&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数中也可以传入解构表达式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let node = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type:&amp;apos;Indet&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type = &amp;apos;Literal&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name = &amp;apos;sss&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    function outPut(value) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        console.log(value === node);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    outPut(&amp;#123; type, name &amp;#125; = node);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(type); //&amp;apos;Indet&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(name); //&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;解构赋值表达式可以设置默认值：在属性名称后面添加一个等号和相应的默认值即可。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let node = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type:&amp;apos;Indet&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let &amp;#123; type, name, value = true&amp;#125; = node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(type); //&amp;apos;Indet&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(name); //&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(value); //true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为非同名局部变量赋值&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let node = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type:&amp;apos;Indet&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// type:localType语法的含义是读取名为type的属性并将其值存储在变量localType中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let &amp;#123; type:localType, name:localName&amp;#125; = node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(localType); //&amp;apos;Indet&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(localName); //&amp;apos;noo&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;嵌套对象解构&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let node = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type:&amp;apos;Identifier&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;apos;noo&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    loc: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        start: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            line: 1,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            column:1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        end: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            line: 1,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            column: 4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let &amp;#123; loc: &amp;#123;start &amp;#125;&amp;#125; = node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(start.line); //1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(start.column); //1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="解构" scheme="http://yoursite.com/tags/%E8%A7%A3%E6%9E%84/"/>
    
      <category term="解构赋值" scheme="http://yoursite.com/tags/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    
      <category term="对象解构" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84/"/>
    
      <category term="数组解构" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84/"/>
    
      <category term="不定元素" scheme="http://yoursite.com/tags/%E4%B8%8D%E5%AE%9A%E5%85%83%E7%B4%A0/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6四</title>
    <link href="http://yoursite.com/2017/08/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E5%9B%9B/"/>
    <id>http://yoursite.com/2017/08/06/深入理解ES6四/</id>
    <published>2017-08-06T07:40:34.000Z</published>
    <updated>2017-09-13T06:34:48.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6规范清晰的定义了对象的类别"><a href="#ES6规范清晰的定义了对象的类别" class="headerlink" title="ES6规范清晰的定义了对象的类别"></a>ES6规范清晰的定义了对象的类别</h2><ul>
<li>普通对象 具有JavaScript对象所有的默认内部行为</li>
<li>特异对象 具有某些与默认行为不符的内部行为</li>
<li>标准对象 ES6中规范定义的对象</li>
<li>内建对象 脚本开始执行时存在于JavaScript执行环境中的对象，所有标准对象都是内建对象</li>
</ul>
<h2 id="对象字面量语法的扩展"><a href="#对象字面量语法的扩展" class="headerlink" title="对象字面量语法的扩展"></a>对象字面量语法的扩展</h2><ul>
<li><p>属性初始化简写语法：当一个对象的属性与本地变量同名时，不必要再写冒号和值，简单地只写属性名即可。当对象字面量里只有一个属性的名称时，JavaScript引擎会在可访问作用域中查找其同名变量，如果找到，则该变量的值被复赋值给对象字面量里的同名属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function Person(name,age) &#123;</div><div class="line">    reutrn &#123;</div><div class="line">        name,</div><div class="line">        age</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>对象方法的简写语法：消除了冒号和关键字<code>function</code>,与传统对象方法的区别是简写方法可以使用super关键字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let person = &#123;</div><div class="line">    name:&apos;tgb&apos;,</div><div class="line">    sayName() &#123;</div><div class="line">        console.log(this.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>可计算属性名：在ES6中可以在对象字面量中使用可计算属性名称，对象字面中使用方括号表示该属性名称时可计算的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let suffix = &apos;name&apos;</div><div class="line">let person = &#123;</div><div class="line">    [&apos;first&apos;+suffix]: &apos;Nicholas&apos;,</div><div class="line">    [&apos;last&apos;+suffix]:&apos;Zakas&apos;</div><div class="line">&#125;</div><div class="line">console.log(person[&apos;first name&apos;]);</div><div class="line">console.log(person[&apos;last name&apos;]);</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="ES6新增方法"><a href="#ES6新增方法" class="headerlink" title="ES6新增方法"></a>ES6新增方法</h2><ul>
<li><p>Object.is()方法：这个方法接受两个参数，如果两个参数的类型相同且具有相同的值，则返回true。用来弥补全等运算符的不准确运算。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">console.log(+0 === -0)  //true;</div><div class="line">console.log(Object.is(+0,-0)); //false</div><div class="line"></div><div class="line">console.log(NaN === Nan); //false</div><div class="line">console.log(Object.is(NaN,NaN)) //true</div></pre></td></tr></table></figure>
</li>
<li><p>Object.assign()方法：混入方法，这个方法接受一个对象和任意数量的源对象，最终返回接受对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">let obj = &#123;&#125;;</div><div class="line">Object.assign(obj,</div><div class="line">    &#123;</div><div class="line">        type:&apos;js&apos;;</div><div class="line">        name:&apos;file.js&apos;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        type:&apos;css  //如果多个源对象具有同名的属性则排位靠后的源对象会覆盖排位靠前的</div><div class="line">    &#125;</div><div class="line">)</div><div class="line">console.log(obj.type); //&apos;css&apos;</div><div class="line">console.log(obj.name); //&apos;file.js&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="增强对象原型"><a href="#增强对象原型" class="headerlink" title="增强对象原型"></a>增强对象原型</h2><ul>
<li><p>ES6新增<code>Object.setPrototypeOf()方法</code>：这个方法可以改变任意指定对象的原型，它接受两个参数；被改变的对象原型的对象以及要替代第一个参数原型的对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">let person = &#123;</div><div class="line">    getGreeting() &#123;</div><div class="line">        return &apos;Hello&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">let dog = &#123;</div><div class="line">    getGreeting() &#123;</div><div class="line">        return &apos;Woof&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let friend = Object.create(person);</div><div class="line">console.log(Object.getPrototypeOf(firend)===person); //true</div><div class="line"></div><div class="line">Object.setPrototypeOf(friend,dog);</div><div class="line">console.log(Object.getPrototypeOf(friend)===dog); //true</div></pre></td></tr></table></figure>
</li>
<li><p>简化原型访问的Super引用</p>
<ul>
<li>Super引用相当于指向对象原型的指针，就是Object.getPrototypeOf(this)的值</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ES6规范清晰的定义了对象的类别&quot;&gt;&lt;a href=&quot;#ES6规范清晰的定义了对象的类别&quot; class=&quot;headerlink&quot; title=&quot;ES6规范清晰的定义了对象的类别&quot;&gt;&lt;/a&gt;ES6规范清晰的定义了对象的类别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;普通对象 具有JavaScript对象所有的默认内部行为&lt;/li&gt;
&lt;li&gt;特异对象 具有某些与默认行为不符的内部行为&lt;/li&gt;
&lt;li&gt;标准对象 ES6中规范定义的对象&lt;/li&gt;
&lt;li&gt;内建对象 脚本开始执行时存在于JavaScript执行环境中的对象，所有标准对象都是内建对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;对象字面量语法的扩展&quot;&gt;&lt;a href=&quot;#对象字面量语法的扩展&quot; class=&quot;headerlink&quot; title=&quot;对象字面量语法的扩展&quot;&gt;&lt;/a&gt;对象字面量语法的扩展&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;属性初始化简写语法：当一个对象的属性与本地变量同名时，不必要再写冒号和值，简单地只写属性名即可。当对象字面量里只有一个属性的名称时，JavaScript引擎会在可访问作用域中查找其同名变量，如果找到，则该变量的值被复赋值给对象字面量里的同名属性&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function Person(name,age) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    reutrn &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        name,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        age&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对象方法的简写语法：消除了冒号和关键字&lt;code&gt;function&lt;/code&gt;,与传统对象方法的区别是简写方法可以使用super关键字&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let person = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;apos;tgb&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sayName() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        console.log(this.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可计算属性名：在ES6中可以在对象字面量中使用可计算属性名称，对象字面中使用方括号表示该属性名称时可计算的&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let suffix = &amp;apos;name&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let person = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&amp;apos;first&amp;apos;+suffix]: &amp;apos;Nicholas&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&amp;apos;last&amp;apos;+suffix]:&amp;apos;Zakas&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(person[&amp;apos;first name&amp;apos;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(person[&amp;apos;last name&amp;apos;]);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="对象" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="对象字面量" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6三</title>
    <link href="http://yoursite.com/2017/08/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E4%B8%89/"/>
    <id>http://yoursite.com/2017/08/06/深入理解ES6三/</id>
    <published>2017-08-06T01:08:19.000Z</published>
    <updated>2017-09-13T06:34:05.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul>
<li><p>ES6简化了为形式参数提供默认值的过程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function makeRequest(rul,timeout = 2000,callback) &#123;</div><div class="line">    //函数其余部分</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>上面的函数只有当不为第二个参数传入值或者主动为第二个参数传入undefined时才会使用timeout的默认值</p>
</li>
<li><p>在ES6中一个函数使用了默认参数值，会使得arguments对象保持与命名参数的分离，无论参数如何变化，arguments对象不再随之改变。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function mix(first,second=&apos;b&apos;) &#123;</div><div class="line">    console.log(arguments.length);  // 1 之传入了一个参数</div><div class="line">    console.log(first === arguments[0])  // true</div><div class="line">    console.log(second === aruments[1])  // false //arguments[1]是undefined</div><div class="line">&#125;</div><div class="line">mix(&apos;a&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>默认参数表达式</p>
<ul>
<li>ES6中可以使用先定义的参数作为后定义参数的默认值，但是后定义的参数不能作为先定义参数的默认值。</li>
<li>默认参数也存在临时死区，定义参数时会为每个参数创建一个新的标识符绑定，该绑定在初始化之前不可被引用，如果访问会导致程序错误</li>
</ul>
</li>
</ul>
<h2 id="不定参数"><a href="#不定参数" class="headerlink" title="不定参数"></a>不定参数</h2><ul>
<li>在函数的命名参数钱添加三个点(…)就表明这是一个不定参数，该参数为一个数组，包含着自它之后出入的所有参数，通过这个数组名即可逐一访问里面的参数。</li>
<li>不定参数的使用限制：1.每个函数最多只能声明一个不定参数，而且一定要放在所有参数的末尾。2.不定参数不能用于对象字面量setter中</li>
<li>arguments对象包含不定参数，无论是否使用不定参数，argumetns对象总是包含所有传入函数的参数</li>
</ul>
<h2 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h2><pre><code>- 展开运算符可以让你指定一个数组，将它们打散后作为各自独立的参数传入函数
- 展开运算符的使用：例如`Math.max()`方法可以接受任意数量的参数并返回值最大的一个，但是该方法不允许传入数组。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// ES5使用</div><div class="line">let values = [25,50,75,100];</div><div class="line">console.log(Math.max.apply(Math,values)); //100</div><div class="line"></div><div class="line">// Es6使用</div><div class="line">console.log(Math.max(...values)); //100</div></pre></td></tr></table></figure>
</code></pre><a id="more"></a>
<h2 id="判断函数被调用的方法"><a href="#判断函数被调用的方法" class="headerlink" title="判断函数被调用的方法"></a>判断函数被调用的方法</h2><ul>
<li>在ES5中判断一个函数是否通过new关键字被调用(或者说，判断该函数是否作为构造函数被调用)，最常使用的是instanceof</li>
<li>instanceof语法：<code>Object instanceof constructor;</code> <code>instanceof</code>运算符用来检测<code>constructor.prototype</code>是否存在于参数<code>Object</code>的原型链上</li>
<li>ES6引入了<code>new.target</code>这个元属性，元属性市值非对象的属性，其可以提供非对象目标的补充信息，当调用函数的<a href="构造器">[construct]</a>方法时，new.target被赋值new操作符的目标，通常是新创建的对象实例。如果用[[call]]方法，则new.target的值为undefined。</li>
</ul>
<h2 id="块级函数"><a href="#块级函数" class="headerlink" title="块级函数"></a>块级函数</h2><ul>
<li><p>ES6中允许在代码块中声明函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if(true) &#123;</div><div class="line">    function doSomething() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>块级函数的声明提升</p>
<ul>
<li>函数声明的块级函数会被提升至块的顶部而用let定义的函数表达式不会被提升</li>
<li>ES6严格模式下块级函数只会提升至块的顶部，但是在非严格模式下函数会被提升至外围函数或全局作用域的顶部。</li>
</ul>
</li>
</ul>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul>
<li>箭头函数是一种使用箭头(=&gt;)定义函数的新语法</li>
<li>与传统函数的不同：<ol>
<li>没有this、super、arguments和new.target绑定 这些值由外围一层非箭头函数决定</li>
<li>不能通过new关键字调用 箭头函数没有[[constructor]]方法，如果通过new关键字调用箭头函数，程序会抛出错误。</li>
<li>没有原型 不存在<code>prototype</code>这个属性</li>
<li>不可以改变<code>this</code>的绑定 在函数的生命周期内始终保持一致</li>
<li>不支持arguments对象</li>
<li>不支持重复命名的参数</li>
</ol>
</li>
<li><p>箭头函数的语法</p>
<ol>
<li><p>当箭头函数只有一个参数时，可以直接写参数名，箭头紧随其后，箭头右侧额表达式被求值后便立即返回</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let reflect = value =&gt; value;</div></pre></td></tr></table></figure>
</li>
<li><p>如果要传入两个或两个以上的参数，要在参数的两侧添加一对小括号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let sum = (num1,num2) =&gt; num1+num2;</div></pre></td></tr></table></figure>
</li>
<li><p>如果函数没有参数，也要在声明的时候写一组没有内容的小括号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let getName = () =&gt; &apos;Tgb&apos;;</div></pre></td></tr></table></figure>
</li>
<li><p>可以有函数体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let sum = (num1,num2) =&gt; &#123;</div><div class="line">    return num1+num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>箭头函数返回对象字面量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let getTempItem = id =&gt; (&#123; id: id,name: &apos;temp&apos; &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>箭头函数的自调用 沙箱模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let person = ((name) =&gt; &#123;</div><div class="line">    return &#123;</div><div class="line">        getName: function() &#123;</div><div class="line">            retrun name;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)(&apos;tgb&apos;);</div></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ES6简化了为形式参数提供默认值的过程&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function makeRequest(rul,timeout = 2000,callback) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //函数其余部分&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上面的函数只有当不为第二个参数传入值或者主动为第二个参数传入undefined时才会使用timeout的默认值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在ES6中一个函数使用了默认参数值，会使得arguments对象保持与命名参数的分离，无论参数如何变化，arguments对象不再随之改变。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function mix(first,second=&amp;apos;b&amp;apos;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(arguments.length);  // 1 之传入了一个参数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(first === arguments[0])  // true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(second === aruments[1])  // false //arguments[1]是undefined&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mix(&amp;apos;a&amp;apos;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;默认参数表达式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6中可以使用先定义的参数作为后定义参数的默认值，但是后定义的参数不能作为先定义参数的默认值。&lt;/li&gt;
&lt;li&gt;默认参数也存在临时死区，定义参数时会为每个参数创建一个新的标识符绑定，该绑定在初始化之前不可被引用，如果访问会导致程序错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;不定参数&quot;&gt;&lt;a href=&quot;#不定参数&quot; class=&quot;headerlink&quot; title=&quot;不定参数&quot;&gt;&lt;/a&gt;不定参数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在函数的命名参数钱添加三个点(…)就表明这是一个不定参数，该参数为一个数组，包含着自它之后出入的所有参数，通过这个数组名即可逐一访问里面的参数。&lt;/li&gt;
&lt;li&gt;不定参数的使用限制：1.每个函数最多只能声明一个不定参数，而且一定要放在所有参数的末尾。2.不定参数不能用于对象字面量setter中&lt;/li&gt;
&lt;li&gt;arguments对象包含不定参数，无论是否使用不定参数，argumetns对象总是包含所有传入函数的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;展开运算符&quot;&gt;&lt;a href=&quot;#展开运算符&quot; class=&quot;headerlink&quot; title=&quot;展开运算符&quot;&gt;&lt;/a&gt;展开运算符&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- 展开运算符可以让你指定一个数组，将它们打散后作为各自独立的参数传入函数
- 展开运算符的使用：例如`Math.max()`方法可以接受任意数量的参数并返回值最大的一个，但是该方法不允许传入数组。
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// ES5使用&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let values = [25,50,75,100];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(Math.max.apply(Math,values)); //100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// Es6使用&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(Math.max(...values)); //100&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="函数" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="不定参数" scheme="http://yoursite.com/tags/%E4%B8%8D%E5%AE%9A%E5%8F%82%E6%95%B0/"/>
    
      <category term="展开运算符" scheme="http://yoursite.com/tags/%E5%B1%95%E5%BC%80%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
      <category term="块级函数" scheme="http://yoursite.com/tags/%E5%9D%97%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
      <category term="箭头函数" scheme="http://yoursite.com/tags/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6二</title>
    <link href="http://yoursite.com/2017/07/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/07/26/深入理解ES6二/</id>
    <published>2017-07-26T13:49:53.000Z</published>
    <updated>2017-09-13T06:33:22.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模板字面量的主要功能"><a href="#模板字面量的主要功能" class="headerlink" title="模板字面量的主要功能"></a>模板字面量的主要功能</h1><ul>
<li>多行字符串：一个正式的多行字符串的概念</li>
<li>基本的字符串格式化：将变量的值嵌入字符串的能力</li>
<li>HTML转义 向HTML插入经过安全转换后的字符串的能力</li>
</ul>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let message = `Hello world`;</div></pre></td></tr></table></figure>
<ul>
<li><p>模板字面量可以使用反斜杠(/),在模板字面量中不需要转义单,双引号</p>
</li>
<li><p>模板字面量可以很简洁的使用多行字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let message = `Hello</div><div class="line">world`</div></pre></td></tr></table></figure>
</li>
<li><p>在模板字面量中，可以把任何合法的javascript表达式嵌入到占位符中并将其作为字符串的一部分输出到结果中。<br>占位符有一个左侧的${和右侧的}符号组成，中间可以包含任意的javascript表达式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let name = &apos;Nicholas&apos;,</div><div class="line">    message = `Hello $&#123;name&#125;`</div></pre></td></tr></table></figure>
</li>
</ul>
<p>#注意事项</p>
<ul>
<li><p>模板字面量可以访问作用域中所有可访问的变量，而嵌入未定义的变量会抛出错误</p>
</li>
<li><p>可以在模板字面量中嵌入另外一个</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let name = &apos;Nicholas&apos;,</div><div class="line">    message = &apos;Hello, $&#123;</div><div class="line">        `my name is $&#123;name&#125;`</div><div class="line">    &#125;.`;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h1 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h1><ul>
<li><p>标签模板是在模板字面量第一个反撇号(`)前方标注的字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let message = tag`Hello world`</div></pre></td></tr></table></figure>
</li>
<li><p>标签是一个函数，第一个参数是一个数组，包含JavaScript解释过后的字面量字符串，它之后的所有参数都是每一个站位符的解释值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function tag(literals,...substitutions) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">    let a = 5,b = 10;</div><div class="line">    let tag = (s,v1,v2)=&gt;&#123;</div><div class="line">        console.log(s);</div><div class="line">        console.log(v1);</div><div class="line">        console.log(v2);</div><div class="line">    &#125;</div><div class="line">    tag`Hello $&#123;a+b&#125; world $&#123;a*b&#125;`;  //[&apos;Hello &apos;,&apos; world &apos;,&apos;&apos;]</div><div class="line">                                     //15</div><div class="line">                                     //50</div></pre></td></tr></table></figure>
</li>
<li><p>通过String.raw()标签可以访问到字符转义被转换成等价字符前的原声字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let message1 = `Multiline\nstring`;</div><div class="line">let message2 = String.raw`Multiline\nstring`;</div><div class="line">console.log(message1); //&apos;Multiline</div><div class="line">                       //string&apos;</div><div class="line">console.log(message2); //&apos;Multiline\nstring&apos;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模板字面量的主要功能&quot;&gt;&lt;a href=&quot;#模板字面量的主要功能&quot; class=&quot;headerlink&quot; title=&quot;模板字面量的主要功能&quot;&gt;&lt;/a&gt;模板字面量的主要功能&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;多行字符串：一个正式的多行字符串的概念&lt;/li&gt;
&lt;li&gt;基本的字符串格式化：将变量的值嵌入字符串的能力&lt;/li&gt;
&lt;li&gt;HTML转义 向HTML插入经过安全转换后的字符串的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let message = `Hello world`;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;模板字面量可以使用反斜杠(/),在模板字面量中不需要转义单,双引号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模板字面量可以很简洁的使用多行字符串&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let message = `Hello&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;world`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在模板字面量中，可以把任何合法的javascript表达式嵌入到占位符中并将其作为字符串的一部分输出到结果中。&lt;br&gt;占位符有一个左侧的${和右侧的}符号组成，中间可以包含任意的javascript表达式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let name = &amp;apos;Nicholas&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    message = `Hello $&amp;#123;name&amp;#125;`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;模板字面量可以访问作用域中所有可访问的变量，而嵌入未定义的变量会抛出错误&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以在模板字面量中嵌入另外一个&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let name = &amp;apos;Nicholas&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    message = &amp;apos;Hello, $&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        `my name is $&amp;#123;name&amp;#125;`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;.`;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="模板字面量" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F/"/>
    
      <category term="标签模板" scheme="http://yoursite.com/tags/%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>HTML5基础标签的掌握</title>
    <link href="http://yoursite.com/2017/07/20/HTML5%E5%9F%BA%E7%A1%80%E6%A0%87%E7%AD%BE%E7%9A%84%E6%8E%8C%E6%8F%A1/"/>
    <id>http://yoursite.com/2017/07/20/HTML5基础标签的掌握/</id>
    <published>2017-07-20T09:12:09.000Z</published>
    <updated>2017-09-13T06:37:56.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a><abbr>标签</abbr></h2><ul>
<li><code>&lt;abbr&gt;</code> 标签表示简称或缩写，比如 “WWW” 或 “NATO”</li>
<li><code>&lt;abbr&gt;</code> 标签中使用全局的 title 属性，这样就能够在鼠标指针移动到 <abbr> 元素上时显示出简称/缩写的完整版本。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The &lt;abbr title=&quot;People&apos;s Republic of China&quot;&gt;PRC&lt;/abbr&gt; was founded in 1949.</div></pre></td></tr></table></figure>
</abbr></li>
</ul>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;标签&quot;&gt;&lt;a href=&quot;#标签&quot; class=&quot;headerlink&quot; title=&quot;标签&quot;&gt;&lt;/a&gt;&lt;abbr&gt;标签&lt;/abbr&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt; 标签表示简称或缩写，比如 “WWW” 或 “NATO”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt; 标签中使用全局的 title 属性，这样就能够在鼠标指针移动到 &lt;abbr&gt; 元素上时显示出简称/缩写的完整版本。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;The &amp;lt;abbr title=&amp;quot;People&amp;apos;s Republic of China&amp;quot;&amp;gt;PRC&amp;lt;/abbr&amp;gt; was founded in 1949.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/abbr&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="标签" scheme="http://yoursite.com/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6一</title>
    <link href="http://yoursite.com/2017/07/19/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E4%B8%80/"/>
    <id>http://yoursite.com/2017/07/19/深入理解ES6一/</id>
    <published>2017-07-19T02:03:31.000Z</published>
    <updated>2017-09-13T06:35:12.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="let声明"><a href="#let声明" class="headerlink" title="let声明"></a>let声明</h1><ol>
<li>Es6中引入块级声明，<code>let</code>声明的变量作用域限制在代码块中；</li>
<li><code>let</code>声明不会被提升;</li>
<li>在同一作用域中不能用<code>let</code>重复定义已经存在的标识符，会抛出错误。</li>
</ol>
<h1 id="const声明"><a href="#const声明" class="headerlink" title="const声明"></a>const声明</h1><ol>
<li><code>const</code>声明的变量作用域也会限制在代码块中；</li>
<li><code>const</code>声明的是常量，其值一旦被设定后不可更改，每个通过const声明的常量必须进行初始化(赋值)</li>
<li><code>const</code>声明不允许修改绑定，但允许修改值；例如<code>const</code>声明对象，对象的值是可以修改的</li>
</ol>
<h1 id="临时死区的存在"><a href="#临时死区的存在" class="headerlink" title="临时死区的存在"></a>临时死区的存在</h1><ul>
<li>临时死区(temporal dead zone)TDZ用来描述<code>let</code>和<code>const</code>的不提升效果；</li>
<li>与<code>var</code>声明不同，<code>let</code>和<code>const</code>声明的变量不会被提升到作用域的顶部，在<code>javascript</code>引擎扫描代码的时候会将<code>let</code>和<code>const</code>的声明放到临时死区中</li>
</ul>
<h1 id="循环中的块级作用域"><a href="#循环中的块级作用域" class="headerlink" title="循环中的块级作用域"></a>循环中的块级作用域</h1><ul>
<li>常见的循环错误；<code>var</code>声明是全局变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var funcs = [];</div><div class="line">for(var i=0;i&lt;10;i++) &#123;</div><div class="line">    funcs.push(function() &#123;</div><div class="line">        console.log(i);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">funcs.forEach(funcion(func) &#123;</div><div class="line">    func(); //输出10次10 </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>使用闭包解决这个问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var funcs = [];</div><div class="line">for(var i=0;i&lt;10;i++) &#123;</div><div class="line">    funcs.push((function(value)&#123;</div><div class="line">        // 变量i的值在传递到这个作用域是被赋值给了value;</div><div class="line">        // 此时这个值就不会随外部变量而变化了；</div><div class="line">        return function() &#123;</div><div class="line">            console.log(value);</div><div class="line">        &#125;</div><div class="line">    &#125;)(i));</div><div class="line">&#125;</div><div class="line">funcs.forEach(function(func) &#123;</div><div class="line">    func(); //输出0，然后是1,2直到9</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>使用let声明简化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var funcs=[];</div><div class="line">for(let i=0;i&lt;10;i++) &#123;</div><div class="line">    funcs.push(function() &#123;</div><div class="line">        console.log(i);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">funcs.forEach(function(func) &#123;</div><div class="line">    func(); //输出0，然后是1,2直到9</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="全局作用域的绑定"><a href="#全局作用域的绑定" class="headerlink" title="全局作用域的绑定"></a>全局作用域的绑定</h1><ul>
<li>当<code>var</code>被用于全局作用域时，它会创建一个新的全局变量作为全局对象(浏览器环境中的window对象)的属性</li>
<li>当在全局作用域中使用<code>let</code>和<code>const</code>,会在全局作用域下创建一个新的绑定，但是该绑定不会添加为全局对象的属性。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;let声明&quot;&gt;&lt;a href=&quot;#let声明&quot; class=&quot;headerlink&quot; title=&quot;let声明&quot;&gt;&lt;/a&gt;let声明&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Es6中引入块级声明，&lt;code&gt;let&lt;/code&gt;声明的变量作用域限制在代码块中；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt;声明不会被提升;&lt;/li&gt;
&lt;li&gt;在同一作用域中不能用&lt;code&gt;let&lt;/code&gt;重复定义已经存在的标识符，会抛出错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;const声明&quot;&gt;&lt;a href=&quot;#const声明&quot; class=&quot;headerlink&quot; title=&quot;const声明&quot;&gt;&lt;/a&gt;const声明&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;声明的变量作用域也会限制在代码块中；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;声明的是常量，其值一旦被设定后不可更改，每个通过const声明的常量必须进行初始化(赋值)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;声明不允许修改绑定，但允许修改值；例如&lt;code&gt;const&lt;/code&gt;声明对象，对象的值是可以修改的&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;临时死区的存在&quot;&gt;&lt;a href=&quot;#临时死区的存在&quot; class=&quot;headerlink&quot; title=&quot;临时死区的存在&quot;&gt;&lt;/a&gt;临时死区的存在&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;临时死区(temporal dead zone)TDZ用来描述&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;的不提升效果；&lt;/li&gt;
&lt;li&gt;与&lt;code&gt;var&lt;/code&gt;声明不同，&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;声明的变量不会被提升到作用域的顶部，在&lt;code&gt;javascript&lt;/code&gt;引擎扫描代码的时候会将&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;的声明放到临时死区中&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;循环中的块级作用域&quot;&gt;&lt;a href=&quot;#循环中的块级作用域&quot; class=&quot;headerlink&quot; title=&quot;循环中的块级作用域&quot;&gt;&lt;/a&gt;循环中的块级作用域&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;常见的循环错误；&lt;code&gt;var&lt;/code&gt;声明是全局变量&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var funcs = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;for(var i=0;i&amp;lt;10;i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    funcs.push(function() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        console.log(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;funcs.forEach(funcion(func) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    func(); //输出10次10 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="let" scheme="http://yoursite.com/tags/let/"/>
    
      <category term="const" scheme="http://yoursite.com/tags/const/"/>
    
      <category term="块级作用域" scheme="http://yoursite.com/tags/%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>HTTP状态码分析</title>
    <link href="http://yoursite.com/2017/07/18/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/07/18/HTTP状态码分析/</id>
    <published>2017-07-18T09:01:10.000Z</published>
    <updated>2017-09-13T07:00:47.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1xx（临时响应）"><a href="#1xx（临时响应）" class="headerlink" title="1xx（临时响应）"></a>1xx（临时响应）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">表示临时响应并需要请求者继续执行操作的状态码</div></pre></td></tr></table></figure>
<ol>
<li>100（继续）: 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</li>
<li>101（切换协议）: 请求者已要求服务器切换协议，服务器已确认并准备切换。</li>
</ol>
<h2 id="2xx-（成功）"><a href="#2xx-（成功）" class="headerlink" title="2xx （成功）"></a>2xx （成功）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">表示成功处理了请求的状态码</div></pre></td></tr></table></figure>
<ol>
<li>200（成功）: 服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件。</li>
<li>201（已创建）: 请求成功并且服务器创建了新的资源。</li>
<li>202（已接受）: 服务器已接受请求，但尚未处理。</li>
<li>203（非授权信息）: 服务器已成功处理了请求，但返回的信息可能来自另一来源。</li>
<li>204（无内容）: 服务器成功处理了请求，但没有返回任何内容。</li>
<li>205（重置内容）: 服务器成功处理了请求，但没有返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。</li>
<li>206（部分内容）: 服务器成功处理了部分 GET 请求。</li>
</ol>
<h2 id="3xx-（重定向）"><a href="#3xx-（重定向）" class="headerlink" title="3xx （重定向）"></a>3xx （重定向）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">要完成请求，需要进一步操作。通常，这些状态码用来重定向。Google 建议您在每次请求中使用重定向不要超过 5 次。您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。诊断下的网络抓取页列出了由于重定向错误导致 Googlebot 无法抓取的网址。</div></pre></td></tr></table></figure>
<ol>
<li>300（多种选择）: 针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择</li>
<li>301（永久移动）: 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置</li>
<li>302（临时移动）: 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引</li>
<li>303（查看其他位置）: 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。</li>
<li>304（未修改）: 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。</li>
<li>305（使用代理）: 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</li>
<li><p>307（临时重定向）: 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 <a href="answer.py?answer=">301</a> 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。</p>
<a id="more"></a>
<h2 id="4xx（请求错误）"><a href="#4xx（请求错误）" class="headerlink" title="4xx（请求错误）"></a>4xx（请求错误）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这些状态码表示请求可能出错，妨碍了服务器的处理</div></pre></td></tr></table></figure>
</li>
<li><p>400（错误请求）: 服务器不理解请求的语法。</p>
</li>
<li>401（未授权）: 请求要求身份验证。对于登录后请求的网页，服务器可能返回此响应。</li>
<li>403（禁止）: 服务器拒绝请求。如果您在 Googlebot 尝试抓取您网站上的有效网页时看到此状态码（您可以在 Google 网站管理员工具诊断下的网络抓取页面上看到此信息），可能是您的服务器或主机拒绝了 Googlebot 访问</li>
<li>404（未找到）：服务器找不到请求的网页。例如，对于服务器上不存在的网页经常会返回此代码。如果您的网站上没有 robots.txt 文件，而您在 Google 网站管理员工具”诊断”标签的 robots.txt 页上看到此状态码，则这是正确的状态码。但是，如果您有 robots.txt 文件而又看到此状态码，则说明您的 robots.txt 文件可能命名错误或位于错误的位置（该文件应当位于顶级域，名为 robots.txt）。如果对于 Googlebot 抓取的网址看到此状态码（在”诊断”标签的 HTTP 错误页面上），则表示 Googlebot 跟随的可能是另一个页面的无效链接（是旧链接或输入有误的链接）。</li>
<li>405（方法禁用）：禁用请求中指定的方法。</li>
<li>406（不接受）: 无法使用请求的内容特性响应请求的网页。</li>
<li>407（需要代理授权）: 此状态码与 <a href="answer.py?answer=35128">401（未授权）</a>类似，但指定请求者应当授权使用代理。如果服务器返回此响应，还表示请求者应当使用代理。</li>
<li>408（请求超时）: 服务器等候请求时发生超时。</li>
<li>409（冲突）: 服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，以及两个请求的差异列表。</li>
<li>410（已删除）: 如果请求的资源已永久删除，服务器就会返回此响应。该代码与 404（未找到）代码类似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。如果资源已永久移动，您应使用 301 指定资源的新位置。</li>
<li>411（需要有效长度）: 服务器不接受不含有效内容长度标头字段的请求</li>
<li>412（未满足前提条件）: 服务器未满足请求者在请求中设置的其中一个前提条件。</li>
<li>413（请求实体过大）: 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力</li>
<li>414（请求的 URI 过长）: 请求的 URI（通常为网址）过长，服务器无法处理。</li>
<li>415（不支持的媒体类型）: 请求的格式不受请求页面的支持。</li>
<li>416（请求范围不符合要求）: 如果页面无法提供请求的范围，则服务器会返回此状态码</li>
<li>417（未满足期望值）: 服务器未满足”期望”请求标头字段的要求</li>
</ol>
<h2 id="5xx（服务器错误）"><a href="#5xx（服务器错误）" class="headerlink" title="5xx（服务器错误）"></a>5xx（服务器错误）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这些状态码表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</div></pre></td></tr></table></figure>
<ol>
<li>500（服务器内部错误）: 服务器遇到错误，无法完成请求。</li>
<li>501（尚未实施）: 服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</li>
<li>502（错误网关）: 服务器作为网关或代理，从上游服务器收到无效响应</li>
<li>503（服务不可用）: 服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态</li>
<li>504（网关超时）: 服务器作为网关或代理，但是没有及时从上游服务器收到请求</li>
<li>505（HTTP 版本不受支持）: 服务器不支持请求中所用的 HTTP 协议版本</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1xx（临时响应）&quot;&gt;&lt;a href=&quot;#1xx（临时响应）&quot; class=&quot;headerlink&quot; title=&quot;1xx（临时响应）&quot;&gt;&lt;/a&gt;1xx（临时响应）&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;表示临时响应并需要请求者继续执行操作的状态码&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;100（继续）: 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。&lt;/li&gt;
&lt;li&gt;101（切换协议）: 请求者已要求服务器切换协议，服务器已确认并准备切换。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2xx-（成功）&quot;&gt;&lt;a href=&quot;#2xx-（成功）&quot; class=&quot;headerlink&quot; title=&quot;2xx （成功）&quot;&gt;&lt;/a&gt;2xx （成功）&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;表示成功处理了请求的状态码&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;200（成功）: 服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件。&lt;/li&gt;
&lt;li&gt;201（已创建）: 请求成功并且服务器创建了新的资源。&lt;/li&gt;
&lt;li&gt;202（已接受）: 服务器已接受请求，但尚未处理。&lt;/li&gt;
&lt;li&gt;203（非授权信息）: 服务器已成功处理了请求，但返回的信息可能来自另一来源。&lt;/li&gt;
&lt;li&gt;204（无内容）: 服务器成功处理了请求，但没有返回任何内容。&lt;/li&gt;
&lt;li&gt;205（重置内容）: 服务器成功处理了请求，但没有返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。&lt;/li&gt;
&lt;li&gt;206（部分内容）: 服务器成功处理了部分 GET 请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;3xx-（重定向）&quot;&gt;&lt;a href=&quot;#3xx-（重定向）&quot; class=&quot;headerlink&quot; title=&quot;3xx （重定向）&quot;&gt;&lt;/a&gt;3xx （重定向）&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;要完成请求，需要进一步操作。通常，这些状态码用来重定向。Google 建议您在每次请求中使用重定向不要超过 5 次。您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。诊断下的网络抓取页列出了由于重定向错误导致 Googlebot 无法抓取的网址。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;300（多种选择）: 针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择&lt;/li&gt;
&lt;li&gt;301（永久移动）: 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置&lt;/li&gt;
&lt;li&gt;302（临时移动）: 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引&lt;/li&gt;
&lt;li&gt;303（查看其他位置）: 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。&lt;/li&gt;
&lt;li&gt;304（未修改）: 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。&lt;/li&gt;
&lt;li&gt;305（使用代理）: 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;307（临时重定向）: 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 &lt;a href=&quot;answer.py?answer=&quot;&gt;301&lt;/a&gt; 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。&lt;/p&gt;
    
    </summary>
    
      <category term="HTTP协议" scheme="http://yoursite.com/categories/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="状态码" scheme="http://yoursite.com/tags/%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>浏览器缓存</title>
    <link href="http://yoursite.com/2017/07/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
    <id>http://yoursite.com/2017/07/18/浏览器缓存/</id>
    <published>2017-07-18T02:55:49.000Z</published>
    <updated>2017-09-13T07:05:16.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓存的定义"><a href="#缓存的定义" class="headerlink" title="缓存的定义"></a>缓存的定义</h2><ul>
<li>Web缓存是指一个Web资源（如html页面，图片，js，数据等）存在于Web服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。</li>
</ul>
<h2 id="缓存的命中和未命中"><a href="#缓存的命中和未命中" class="headerlink" title="缓存的命中和未命中"></a>缓存的命中和未命中</h2><ul>
<li>304 的标准解释：<ul>
<li>Not Modified 客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</li>
</ul>
</li>
<li>HTTP在验证<a id="more"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓存的定义&quot;&gt;&lt;a href=&quot;#缓存的定义&quot; class=&quot;headerlink&quot; title=&quot;缓存的定义&quot;&gt;&lt;/a&gt;缓存的定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Web缓存是指一个Web资源（如html页面，图片，js，数据等）存在于Web服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;缓存的命中和未命中&quot;&gt;&lt;a href=&quot;#缓存的命中和未命中&quot; class=&quot;headerlink&quot; title=&quot;缓存的命中和未命中&quot;&gt;&lt;/a&gt;缓存的命中和未命中&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;304 的标准解释：&lt;ul&gt;
&lt;li&gt;Not Modified 客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP在验证
    
    </summary>
    
      <category term="HTTP协议" scheme="http://yoursite.com/categories/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议的学习四</title>
    <link href="http://yoursite.com/2017/07/17/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%9B%9B/"/>
    <id>http://yoursite.com/2017/07/17/HTTP协议的学习四/</id>
    <published>2017-07-17T06:58:41.007Z</published>
    <updated>2017-09-13T06:39:03.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web服务器的主要功能"><a href="#web服务器的主要功能" class="headerlink" title="web服务器的主要功能"></a>web服务器的主要功能</h2><ol>
<li>建立连接</li>
<li>接受请求–从网络中读取一条HTTP请求报文</li>
<li>处理请求–对请求报文进行解释，并采取行动</li>
<li>构建响应–创建带有正确首部的HTTP响应报文</li>
<li>发送响应–将响应回送给客服端</li>
<li>记录事务处理过程–将于已完成事务有关的内容记录在一个日志文件中。</li>
</ol>
<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><ul>
<li>web代理服务器是网络的中间实体，代理位于客服端和服务器之间，扮演‘中间人’的角色，在各端点之间来回传送HTTP报文。<a id="more"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;web服务器的主要功能&quot;&gt;&lt;a href=&quot;#web服务器的主要功能&quot; class=&quot;headerlink&quot; title=&quot;web服务器的主要功能&quot;&gt;&lt;/a&gt;web服务器的主要功能&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;建立连接&lt;/li&gt;
&lt;li&gt;接受请求–从网络中读取一条HTTP请求报文&lt;/li&gt;
&lt;li&gt;处理请求–对请求报文进行解释，并采取行动&lt;/li&gt;
&lt;li&gt;构建响应–创建带有正确首部的HTTP响应报文&lt;/li&gt;
&lt;li&gt;发送响应–将响应回送给客服端&lt;/li&gt;
&lt;li&gt;记录事务处理过程–将于已完成事务有关的内容记录在一个日志文件中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;代理&quot;&gt;&lt;a href=&quot;#代理&quot; class=&quot;headerlink&quot; title=&quot;代理&quot;&gt;&lt;/a&gt;代理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;web代理服务器是网络的中间实体，代理位于客服端和服务器之间，扮演‘中间人’的角色，在各端点之间来回传送HTTP报文。
    
    </summary>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="代理" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议的学习三</title>
    <link href="http://yoursite.com/2017/07/17/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%89/"/>
    <id>http://yoursite.com/2017/07/17/HTTP协议的学习三/</id>
    <published>2017-07-17T06:58:33.000Z</published>
    <updated>2017-09-13T06:38:51.944Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="HTTP协议" scheme="http://yoursite.com/categories/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
      <category term="URL" scheme="http://yoursite.com/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>工作中遇到的问题——对象的拷贝</title>
    <link href="http://yoursite.com/2017/07/13/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2017/07/13/工作中遇到的问题——对象的拷贝/</id>
    <published>2017-07-13T11:47:26.000Z</published>
    <updated>2017-09-13T06:30:54.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h1><ul>
<li>将对象赋值给一个变量时，当我改变变量的值，发现原来的对象也跟着改变。<h1 id="发现原因："><a href="#发现原因：" class="headerlink" title="发现原因："></a>发现原因：</h1></li>
<li>因为对象是应用类型，存放在堆内存中；当我们用变量保存一个对象时，实际上保存的是该对象指针，这个指针指向对象的位置，所以当我们改变变量的时候，会从指针找到对象的位置，从而改变了对象。<h1 id="解决方法：将对象拷贝再赋值给变量"><a href="#解决方法：将对象拷贝再赋值给变量" class="headerlink" title="解决方法：将对象拷贝再赋值给变量"></a>解决方法：将对象拷贝再赋值给变量</h1></li>
</ul>
<ol>
<li><p>浅拷贝</p>
<ul>
<li><p>简单的引用复制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function shallowClone(copyObj) &#123;</div><div class="line">    var obj = &#123;&#125;;</div><div class="line">    for ( var i in copyObj) &#123;</div><div class="line">        obj[i] = copyObj[i];</div><div class="line">    &#125;</div><div class="line">    return obj;</div><div class="line">&#125;</div><div class="line">var x = &#123;</div><div class="line">    a: 1,</div><div class="line">    b: &#123; f: &#123; g: 1 &#125; &#125;,</div><div class="line">    c: [ 1, 2, 3 ]</div><div class="line">&#125;;</div><div class="line">var y = shallowClone(x);</div><div class="line">console.log(y.b.f === x.b.f);     // true</div></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>ES6新方法<code>Object.assign()</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var x = &#123;</div><div class="line">    a: 1,</div><div class="line">    b: &#123; f: &#123; g: 1 &#125; &#125;,</div><div class="line">    c: [ 1, 2, 3 ]</div><div class="line">&#125;;</div><div class="line">var y = Object.assign(&#123;&#125;, x);</div><div class="line">console.log(y.b.f === x.b.f);     // true</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>深度拷贝</p>
<ul>
<li><p>Array的slice和concat方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    var array = [1,2,3]; </div><div class="line">var array_shallow = array; </div><div class="line">var array_concat = array.concat(); </div><div class="line">var array_slice = array.slice(0); </div><div class="line">console.log(array === array_shallow); //true </div><div class="line">console.log(array === array_slice); //false，“看起来”像深拷贝</div><div class="line">console.log(array === array_concat); //false，“看起来”像深拷贝</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">    var array = [1, [1,2,3], &#123;name:&quot;array&quot;&#125;]; </div><div class="line">var array_concat = array.concat();</div><div class="line">var array_slice = array.slice(0);</div><div class="line">array_concat[1][0] = 5;  //改变array_concat中数组元素的值 </div><div class="line">console.log(array[1]); //[5,2,3] </div><div class="line">console.log(array_slice[1]); //[5,2,3] </div><div class="line">array_slice[2].name = &quot;array_slice&quot;; //改变array_slice中对象元素的值 </div><div class="line">console.log(array[2].name); //array_slice</div><div class="line">console.log(array_concat[2].name); //array_slice</div></pre></td></tr></table></figure>
</li>
<li><p>JSON对象的parse和stringify</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">    //例1</div><div class="line">var source = &#123; name:&quot;source&quot;, child:&#123; name:&quot;child&quot; &#125; &#125; </div><div class="line">var target = JSON.parse(JSON.stringify(source));</div><div class="line">target.name = &quot;target&quot;;  //改变target的name属性</div><div class="line">console.log(source.name); //source </div><div class="line">console.log(target.name); //target</div><div class="line">target.child.name = &quot;target child&quot;; //改变target的child </div><div class="line">console.log(source.child.name); //child </div><div class="line">console.log(target.child.name); //target child</div><div class="line">//例2</div><div class="line">var source = &#123; name:function()&#123;console.log(1);&#125;, child:&#123; name:&quot;child&quot; &#125; &#125; </div><div class="line">var target = JSON.parse(JSON.stringify(source));</div><div class="line">console.log(target.name); //undefined</div><div class="line">//例3</div><div class="line">var source = &#123; name:function()&#123;console.log(1);&#125;, child:new RegExp(&quot;e&quot;) &#125;</div><div class="line">var target = JSON.parse(JSON.stringify(source));</div><div class="line">console.log(target.name); //undefined</div><div class="line">console.log(target.child); //Object &#123;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h1 id="完整的拷贝方法"><a href="#完整的拷贝方法" class="headerlink" title="完整的拷贝方法"></a>完整的拷贝方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">var $ = (function()&#123;</div><div class="line">  var types = &apos;Array Object String Date RegExp Function Boolean Number Null Undefined&apos;.split(&apos; &apos;);</div><div class="line">  function type() &#123;</div><div class="line">    return Object.prototype.toString.call(this).slice(8, -1);</div><div class="line">  &#125;</div><div class="line">  for (var i = types.length; i--;) &#123;</div><div class="line">     $[&apos;is&apos; + types[i]] = (function (self) &#123;</div><div class="line">        return function (elem) &#123;</div><div class="line">           return type.call(elem) === self;</div><div class="line">        &#125;;</div><div class="line">    &#125;)(types[i]);</div><div class="line">  &#125;</div><div class="line">  return $;</div><div class="line">&#125;)();//类型判断</div><div class="line"></div><div class="line"> function copy(obj,deep)&#123; </div><div class="line">  if(obj === null || (!$.isObject(obj) &amp;&amp; !$.isFunction(obj)))&#123; </div><div class="line">    return obj; </div><div class="line">      &#125; </div><div class="line">  if($.isFunction(obj))&#123;</div><div class="line">     return new Function(&quot;return &quot; + obj.toString())();</div><div class="line">  &#125;else&#123;</div><div class="line">         var name, target = $.isArray(obj) ? [] : &#123;&#125;, value; </div><div class="line">         for(name in obj)&#123; </div><div class="line">            value = obj[name]; </div><div class="line">            if(value === obj) &#123;</div><div class="line">              continue;</div><div class="line">            &#125;</div><div class="line">            if(deep &amp;&amp; ($.isArray(value) || $.isObject(value)))&#123;</div><div class="line">              target[name] = copy(value,deep);</div><div class="line">            &#125;else&#123;</div><div class="line">              target[name] = value;</div><div class="line">            &#125; </div><div class="line">       &#125; </div><div class="line">       return target;</div><div class="line">     &#125;　        </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;遇到的问题：&quot;&gt;&lt;a href=&quot;#遇到的问题：&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题：&quot;&gt;&lt;/a&gt;遇到的问题：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;将对象赋值给一个变量时，当我改变变量的值，发现原来的对象也跟着改变。&lt;h1 id=&quot;发现原因：&quot;&gt;&lt;a href=&quot;#发现原因：&quot; class=&quot;headerlink&quot; title=&quot;发现原因：&quot;&gt;&lt;/a&gt;发现原因：&lt;/h1&gt;&lt;/li&gt;
&lt;li&gt;因为对象是应用类型，存放在堆内存中；当我们用变量保存一个对象时，实际上保存的是该对象指针，这个指针指向对象的位置，所以当我们改变变量的时候，会从指针找到对象的位置，从而改变了对象。&lt;h1 id=&quot;解决方法：将对象拷贝再赋值给变量&quot;&gt;&lt;a href=&quot;#解决方法：将对象拷贝再赋值给变量&quot; class=&quot;headerlink&quot; title=&quot;解决方法：将对象拷贝再赋值给变量&quot;&gt;&lt;/a&gt;解决方法：将对象拷贝再赋值给变量&lt;/h1&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;浅拷贝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单的引用复制&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function shallowClone(copyObj) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var obj = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for ( var i in copyObj) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        obj[i] = copyObj[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return obj;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var x = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a: 1,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    b: &amp;#123; f: &amp;#123; g: 1 &amp;#125; &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    c: [ 1, 2, 3 ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var y = shallowClone(x);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(y.b.f === x.b.f);     // true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="http://yoursite.com/categories/ECMAScript/"/>
    
    
      <category term="对象" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="对象复制" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Chrome开发工具指南</title>
    <link href="http://yoursite.com/2017/07/12/Chrome%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2017/07/12/Chrome开发工具指南/</id>
    <published>2017-07-12T03:18:15.000Z</published>
    <updated>2017-09-13T06:36:29.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="谷歌浏览器开发工具综述"><a href="#谷歌浏览器开发工具综述" class="headerlink" title="谷歌浏览器开发工具综述"></a>谷歌浏览器开发工具综述</h2><ol>
<li>使用开发工具<ul>
<li>选择浏览器位于浏览器窗口右上方的菜单栏的工具目录chrome-menu，选择开发者工具选项</li>
<li>右击页面任何位置并选择审查元素</li>
<li>使用快捷键f12</li>
</ul>
</li>
<li>开发者工具窗口<ul>
<li>开发者工具窗口的顶部工具栏中排列着任务相关的组。每个工具栏项目和相应的面板让你能够使用网页或应用程序的特定信息来工作，包括 DOM 元素，资源，和源。</li>
<li>总体而言，有八个主要的工具可供查看开发工具<ol>
<li>元素面板(Element)</li>
<li>控制台面板(Console)</li>
<li>源代码面板(sources)</li>
<li>网络面板(Network)</li>
<li>性能面板(Performance)</li>
<li>内存面板(Memory)</li>
<li>应用面板(Application)(Audits)</li>
<li>安全面板(Security)</li>
</ol>
</li>
<li>可以使用 Ctrl + [ 和 Ctrl + ] 快捷键在面板之间移动<a id="more"></a>
<h2 id="元素面板-Element-详解"><a href="#元素面板-Element-详解" class="headerlink" title="元素面板(Element)详解"></a>元素面板(Element)详解</h2></li>
</ul>
</li>
<li>检查和调整页面<ul>
<li>实时编辑 DOM 节点：只需双击选定元素，然后进行更改</li>
<li>实时编辑样式：<ul>
<li>在 Styles 窗格中实时编辑样式属性名称和值。所有样式均可修改，除了灰色部分（与 User Agent 样式表一样）。</li>
<li>要编辑名称或值，请点击它，进行更改，然后按 Tab 或 Enter 保存更改。</li>
<li>默认情况下，您的 CSS 修改不是永久的，重新加载页面时更改会丢失。 如果您想要在页面加载时保留更改，请设置永久制作</li>
</ul>
</li>
<li>检查和编辑框模型参数：<ul>
<li>使用 Computed 窗格检查和编辑当前元素的框模型参数。 框模型中的所有值均可修改，只需点击它们即可</li>
</ul>
</li>
</ul>
</li>
<li>编辑样式<ul>
<li>检查应用到元素的样式<ul>
<li>顶端为 element.style。这些样式要么直接使用样式属性（例如 <p style="color:green">）直接应用到元素，要么在 DevTools 中应用</p></li>
<li>下方是与元素匹配的任何 CSS 规则。例如，在下面的屏幕截图中，选定元素从 tools.css 中定义的规则接收 line-height:24px</li>
<li>再下方是继承的样式，其中包括与选定元素的祖先实体匹配的任何可继承样式规则。 例如，在下面的屏幕截图中，选定元素从 user agent stylesheet 继承 display:list-item</li>
</ul>
</li>
</ul>
</li>
<li>编辑DOM</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;谷歌浏览器开发工具综述&quot;&gt;&lt;a href=&quot;#谷歌浏览器开发工具综述&quot; class=&quot;headerlink&quot; title=&quot;谷歌浏览器开发工具综述&quot;&gt;&lt;/a&gt;谷歌浏览器开发工具综述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用开发工具&lt;ul&gt;
&lt;li&gt;选择浏览器位于浏览器窗口右上方的菜单栏的工具目录chrome-menu，选择开发者工具选项&lt;/li&gt;
&lt;li&gt;右击页面任何位置并选择审查元素&lt;/li&gt;
&lt;li&gt;使用快捷键f12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开发者工具窗口&lt;ul&gt;
&lt;li&gt;开发者工具窗口的顶部工具栏中排列着任务相关的组。每个工具栏项目和相应的面板让你能够使用网页或应用程序的特定信息来工作，包括 DOM 元素，资源，和源。&lt;/li&gt;
&lt;li&gt;总体而言，有八个主要的工具可供查看开发工具&lt;ol&gt;
&lt;li&gt;元素面板(Element)&lt;/li&gt;
&lt;li&gt;控制台面板(Console)&lt;/li&gt;
&lt;li&gt;源代码面板(sources)&lt;/li&gt;
&lt;li&gt;网络面板(Network)&lt;/li&gt;
&lt;li&gt;性能面板(Performance)&lt;/li&gt;
&lt;li&gt;内存面板(Memory)&lt;/li&gt;
&lt;li&gt;应用面板(Application)(Audits)&lt;/li&gt;
&lt;li&gt;安全面板(Security)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;可以使用 Ctrl + [ 和 Ctrl + ] 快捷键在面板之间移动
    
    </summary>
    
      <category term="浏览器基础" scheme="http://yoursite.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
      <category term="chrome开发工具" scheme="http://yoursite.com/tags/chrome%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
